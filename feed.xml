<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Award Winning Fjords</title>
  <subtitle>Words &amp;amp; Wisdom by Thomas Reynolds</subtitle>
  <id>http://awardwinningfjords.com/</id>
  <link href="http://awardwinningfjords.com/"/>
  <link href="http://awardwinningfjords.com/feed.xml" rel="self"/>
  <updated>2012-05-19T00:00:00+00:00T00:00:00-08:00</updated>
  <author>
    <name>Thomas Reynolds</name>
  </author>
  <entry>
    <title>Front-end Performance Tools: Embedded Vector</title>
    <link rel="alternate" href="/2012/05/19/embedded-vector.html"/>
    <id>/2012/05/19/embedded-vector.html</id>
    <published>2012-05-19T00:00:00+00:00T00:00:00-08:00</published>
    <updated>2012-05-19T00:00:00+00:00T00:00:00-08:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;Recently, I&amp;#39;ve been working on quite a few animation projects in Javascript. Traditional web applications are evented. The browser and application wait or user (or network) input and adjust the displayed content accordingly. Animation is different. Animation needs to run 60 frames-per-second, every second that the viewer is on the page. This create two problems.&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;Recently, I&amp;#39;ve been working on quite a few animation projects in Javascript. Traditional web applications are evented. The browser and application wait or user (or network) input and adjust the displayed content accordingly. Animation is different. Animation needs to run 60 frames-per-second, every second that the viewer is on the page. This create two problems.&lt;/p&gt;

&lt;p&gt;One, every piece of code in your runloop is being executed repeatedly. Small errors and inefficiencies quickly pile up, leak memory, trigger garbage collection and slow down execution.&lt;/p&gt;

&lt;p&gt;And two, since the browser uses the same thread for animation, execution and garbage collection, errors and inefficiencies will negatively effect the smoothness of the animation. An animation is only as good as its framerate.&lt;/p&gt;

&lt;p&gt;Here are a collection of tools I&amp;#39;ve been working on avoid common performance problems.&lt;/p&gt;

&lt;h2&gt;Avoid Creating Unnecessary Objects&lt;/h2&gt;

&lt;p&gt;See my previous article about avoiding the creation of unnecessary, intermediate objects when using CoffeeScript. The principle applies in regular Javascript as well.&lt;/p&gt;

&lt;p&gt;A common source of unnecessary objects in animation is the simple Vector class which models an element&amp;#39;s x and y position. Paper.js&amp;#39; Point class is a good example. Basically, elements in the system have a Vector position which can be manipulated, rotated, scaled, et cetera. However, doing this kind of math creates object on every frame which will quickly pile up. Ashley Gullen&amp;#39;s article, &lt;a href="http://www.scirra.com/blog/76/how-to-write-low-garbage-real-time-javascript"&gt;How to write low garbage real-time Javascript&lt;/a&gt;, covers the issue in depth.&lt;/p&gt;

&lt;p&gt;The solution is simply to add x and y parameters directly to your elements, avoiding the intermediate Vector class. To facilitate this, I&amp;#39;ve extracted a small library from some code I&amp;#39;ve been writing which let&amp;#39;s you mixin x/y values to existing classes, and have access to basic Vector math operations.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/tdreyno/embeded-vector"&gt;You can view the library, embedded-vector, here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s an example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Particle constructor
function Particle() {}

Vector.mixinTo(Particle);

var p1 = new Particle();

p1.getX(); // 0
p1.getY(); // 0

var p2 = new Particle();
p2.set(10, 10)
p2.getX(); // 10
p2.get(); // 10

p1.distance(p2); // 14.1421356
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also namespace the methods, so you have have multiple x/y pairs.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Ball constructor
function Ball() {}

Vector.mixinTo(Particle, &amp;quot;position&amp;quot;);
Vector.mixinTo(Particle, &amp;quot;velocity&amp;quot;);

var b = new Ball();

b.getPositionX(); // 0
b.getPositionY(); // 0
b.getVelocityX(); // 0
b.getVelocityY(); // 0

function onFrame(delta) {
  // Fake gravity
  b.addVelocity(0, -9.8 * delta)
  b.addPosition(
    b.getVelocityX() * delta
    b.getVelocityY() * delta
  );
}
&lt;/code&gt;&lt;/pre&gt;
</content>
  </entry>
  <entry>
    <title>Beware of CoffeeScript Comprehensions</title>
    <link rel="alternate" href="/2012/05/08/beware-coffeescript-comprehensions.html"/>
    <id>/2012/05/08/beware-coffeescript-comprehensions.html</id>
    <published>2012-05-08T00:00:00-08:00</published>
    <updated>2012-05-08T00:00:00-08:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;I&amp;#39;ve recently spent some time addressing bugs and speed issues with the first large CoffeeScript project (nearly 10,000 lines of code) I&amp;#39;ve worked on with multiple developers.&lt;/p&gt;

&lt;p&gt;For the most part, the process was painless. CoffeeScript hides a great deal of complexity beneath it&amp;#39;s glossy syntax, which is great for writing simple and readable code. But there is always tension between high-level languages and raw performance. If you&amp;#39;re an experienced Javascript developer, the compiled output of a snippet of CoffeeScript code should be recognizable, readable and pretty much what you&amp;#39;d write if you wrote Javascript directly.&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;I&amp;#39;ve recently spent some time addressing bugs and speed issues with the first large CoffeeScript project (nearly 10,000 lines of code) I&amp;#39;ve worked on with multiple developers.&lt;/p&gt;

&lt;p&gt;For the most part, the process was painless. CoffeeScript hides a great deal of complexity beneath it&amp;#39;s glossy syntax, which is great for writing simple and readable code. But there is always tension between high-level languages and raw performance. If you&amp;#39;re an experienced Javascript developer, the compiled output of a snippet of CoffeeScript code should be recognizable, readable and pretty much what you&amp;#39;d write if you wrote Javascript directly.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s an example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;list = [1..3]
console.log(i) for i in list
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Becomes:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var i, list, _i, _len;

list = [1, 2, 3];

for (_i = 0, _len = list.length; _i &amp;lt; _len; _i++) {
  i = list[_i];
  console.log(i);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Great, a simple for loop which avoids recalculating &lt;code&gt;list.length&lt;/code&gt; on every iteration. However, CoffeeScript also overloads the &lt;code&gt;for&lt;/code&gt; loop with the ability to do &lt;a href="http://coffeescript.org/#loops"&gt;Comprehensions&lt;/a&gt;. Comprehensions allow you to manipulate the items being iterated over, provide a native way of running &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;filter&lt;/code&gt;, &lt;code&gt;reject&lt;/code&gt; and other manipulative functions on a collection. &lt;strong&gt;Whether a &lt;code&gt;for&lt;/code&gt; loop acts as a comprehension is dependent on context.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here are some examples:&lt;/p&gt;

&lt;h2&gt;Assigning a &lt;code&gt;for&lt;/code&gt; loop to a variable:&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;list = [1..3]
output = for i in list
  console.log(i)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Becomes:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var i, list, output;

list = [1, 2, 3];

output = (function() {
  var _i, _len, _results;
  _results = [];
  for (_i = 0, _len = list.length; _i &amp;lt; _len; _i++) {
    i = list[_i];
    _results.push(console.log(i));
  }
  return _results;
})();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice that we now create an empty array to hold the result of the comprehension, then the last line of the &lt;code&gt;for&lt;/code&gt; loop is used as the value which is pushed into that array. Additionally, there is a wrapping anonymous function which immediately executes to keep some of the loop variables from leaking out of their scope.&lt;/p&gt;

&lt;p&gt;This result can also be triggered as a one-liner wrapped in parenthesis:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;list = [1..3]
output = (console.log(i) for i in list)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For the most part, this makes sense. You are requesting an output variable, so one is created, even if the results aren&amp;#39;t meaningful (just the return value of &lt;code&gt;console.log&lt;/code&gt;). I would like to point out that this code will create 1 anonymous function every single time it is executed. If this loop were used frequently enough, such as inside a &lt;code&gt;setInterval&lt;/code&gt; or &lt;code&gt;requestAnimationFrame&lt;/code&gt; loop, it could begin producing and throwing away up to 60 anonymous functions per second, per usage. Eventually, &lt;a href="http://www.scirra.com/blog/76/how-to-write-low-garbage-real-time-javascript"&gt;the Javascript Garbage Collector will cleanup these unused functions, causing the framerate to stutter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you want to avoid this, you can write the &lt;code&gt;push&lt;/code&gt; portion of your array building manually:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;list = [1..3]
output = []
output.push(i+1) for i in list
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Becomes:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var i, list, output, _i, _len;

list = [1, 2, 3];

output = [];

for (_i = 0, _len = list.length; _i &amp;lt; _len; _i++) {
  i = list[_i];
  output.push(i + 1);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Implicitly Returning Comprehensions&lt;/h2&gt;

&lt;p&gt;Here&amp;#39;s where you need to pay close attention. &lt;strong&gt;If you have a &lt;code&gt;for&lt;/code&gt; loop as the last piece of code in a function, it will be used as the return value and generate a resulting array, even when not explicitly requests.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;printI = -&amp;gt;
  list = [1..3]
  console.log(i) for i in list
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Becomes:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var printI;

printI = function() {
  var i, list, _i, _len, _results;
  list = [1, 2, 3];
  _results = [];
  for (_i = 0, _len = list.length; _i &amp;lt; _len; _i++) {
    i = list[_i];
    _results.push(console.log(i));
  }
  return _results;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In our codebase, this happened very often. The above code is simply for debugging, there is no need to create, build and return an array every single time it is called. Our code had a render tree, on every frame, we would render the root object, then use a &lt;code&gt;for&lt;/code&gt; loop to render each of that object&amp;#39;s children. &lt;strong&gt;Which means we were building and discarding these implicit comprehension arrays once for every single drawn component in our system every single frame.&lt;/strong&gt; It adds up.&lt;/p&gt;

&lt;h2&gt;Solution&lt;/h2&gt;

&lt;p&gt;My suggestion is to document all method return values and set them explicitly when writing CoffeeScript. Here is how the above methods &lt;strong&gt;should&lt;/strong&gt; look:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Log each item in the array
#
# list - An array of integers to be logged
#
# Returns undefined.
printI = (list) -&amp;gt;
  console.log(i) for i in list
  undefined

printI([1..3])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which becomes a simple loop with no return value:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var printI;

printI = function(list) {
  var i, _i, _len;
  for (_i = 0, _len = list.length; _i &amp;lt; _len; _i++) {
    i = list[_i];
    console.log(i);
  }
  return;
};

printI([1, 2, 3]);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Check Your Own Code&lt;/h3&gt;

&lt;p&gt;Try searching through your output Javascript for &lt;code&gt;return _results&lt;/code&gt;, that will reveal if your code might be accidentally returning unnecessary comprehensions.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Middleman 3.0 Beta 2</title>
    <link rel="alternate" href="/2012/04/23/middleman-3-beta-2.html"/>
    <id>/2012/04/23/middleman-3-beta-2.html</id>
    <published>2012-04-23T00:00:00-08:00</published>
    <updated>2012-04-23T00:00:00-08:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;h3&gt;What is Middleman?&lt;/h3&gt;

&lt;p&gt;Middleman is a small tool for developing stand-alone, static websites. It&amp;#39;s great for separating frontend development from the backend, developing blazingly fast static websites or quickly creating prototypes. Middleman brings all of the power of Rails to provide an incredibly powerful development environment with access to:&lt;/p&gt;
</summary>
    <content type="html">&lt;h3&gt;What is Middleman?&lt;/h3&gt;

&lt;p&gt;Middleman is a small tool for developing stand-alone, static websites. It&amp;#39;s great for separating frontend development from the backend, developing blazingly fast static websites or quickly creating prototypes. Middleman brings all of the power of Rails to provide an incredibly powerful development environment with access to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Templating engines and layouts (ERb, Slim, Haml, anything supported by Tilt)&lt;/li&gt;
&lt;li&gt;Preprocessors (CoffeeScript, Sass, Less, Stylus, etc)&lt;/li&gt;
&lt;li&gt;Compression (Minify CSS, JS and images)&lt;/li&gt;
&lt;li&gt;Post-compile callbacks for deployment&lt;/li&gt;
&lt;li&gt;And lots of new stuff in 3.0&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Install the Beta&lt;/h3&gt;

&lt;p&gt;Before getting in to all the new features, here&amp;#39;s how you can install the beta:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gem install middleman --pre
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Remember:&lt;/strong&gt; This is a beta and there are bound to be bugs and possible regressions. 3.0 should be fully backwards compatible with 2.x. Please submit any issues you run into on &lt;a href="https://github.com/middleman/middleman/issues"&gt;the Github issue tracker&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;New Features Since Beta 1&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Read about the other 3.0 features, discussed in &lt;a href="/2012/01/03/middleman-3-beta.html"&gt;the Beta 1 announcement&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;First, and foremost, I want to recognize the incredible contributions Ben Hollis has made to Middleman in the past 6 months. He&amp;#39;s been &lt;a href="https://github.com/middleman/middleman/commits/master?author=bhollis"&gt;writing tons code&lt;/a&gt;, including some of the features below, as well as managing the community and helping keep me some making stupid errors by commenting on my commits. He&amp;#39;s also refactoring the &lt;code&gt;middleman-blog&lt;/code&gt; extension, which will be 3.0-compatible very soon.&lt;/p&gt;

&lt;p&gt;So, here are some new features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;h4&gt;Bundler Required&lt;/h4&gt;

&lt;p&gt;Most non-Rubyists, and many active Rubyists, are constantly fighting with Rubygems when using Middleman. Our solution in 2.0 was to allow the use of Bundler Gemfiles to lock down the Middleman environment. This was great, but only Ruby developers knew how to use it. In 3.0, Bundler in built directly into Middleman. All new projects generate a Gemfile. In the future, we hope to provide CLI commands for managing a Middleman project, such as: &lt;code&gt;middleman upgrade&lt;/code&gt;, to rebundle a project with a newer release of Middleman. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;h4&gt;i18n Built-in&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;middleman-i18n&lt;/code&gt; extension has been merged into core. We hope to further expand its functionality to make Middleman the best possible solution for building multi-lingual websites.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;h4&gt;&lt;code&gt;gzip&lt;/code&gt; and &lt;code&gt;asset_hash&lt;/code&gt; extensions&lt;/h4&gt;

&lt;p&gt;Two new optimization extensions are available in Beta 2. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;gzip&lt;/code&gt; will compress your assets during a build, but it will be up to you to serve them. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;asset_hash&lt;/code&gt; is an alternative cache-busting scheme, targeting CDNs. The current &lt;code&gt;cache_buster&lt;/code&gt; extension simply adds a querystring to asset paths, which busts the cache in browsers. CDNs actually require that the name of the file is changed. &lt;code&gt;asset_hash&lt;/code&gt; will insert a hash of the file into the file names of your assets during build.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;h4&gt;Implied output extensions&lt;/h4&gt;

&lt;p&gt;Templating engines can now set a default output extension. For example, &lt;code&gt;.erb&lt;/code&gt; now implies &lt;code&gt;.html&lt;/code&gt; so &lt;code&gt;my-template.erb&lt;/code&gt; will ouput to &lt;code&gt;my-template.html&lt;/code&gt;. The 2.0 functionality, of including both the template extension and the output extension in the file name is still prefered. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;h4&gt;Miscellaneous Changes&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Activate mobile html5boilerplate template&lt;/li&gt;
&lt;li&gt;Update html5boilerplate template to version 3&lt;/li&gt;
&lt;li&gt;Don&amp;#39;t re-minify files with &amp;quot;.min&amp;quot; in their name&lt;/li&gt;
&lt;li&gt;Automatically load helper modules in helpers/ directory&lt;/li&gt;
&lt;li&gt;Add pid for cleanup&lt;/li&gt;
&lt;li&gt;Use guard/listen for file watching&lt;/li&gt;
&lt;li&gt;Errors stop the build and print a stacktrace rather than silently getting printed into files.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;with_layout&lt;/code&gt; works with globs or regexes.&lt;/li&gt;
&lt;li&gt;Setting &lt;code&gt;directory_index&lt;/code&gt; from &lt;code&gt;page&lt;/code&gt; with a glob or regex now works.&lt;/li&gt;
&lt;li&gt;Properly output Compass-generated sprited images.&lt;/li&gt;
&lt;li&gt;Include vendored assets in sprockets path.&lt;/li&gt;
&lt;li&gt;Switch built-in CSS compressor to Rainpress.&lt;/li&gt;
&lt;li&gt;Automatically load helper modules from &lt;code&gt;helpers/&lt;/code&gt;, like Rails.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ignore&lt;/code&gt; and &lt;code&gt;page&lt;/code&gt; both work with file globs or regexes.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;layout&lt;/code&gt;, &lt;code&gt;ignore&lt;/code&gt;, and &lt;code&gt;directory_index&lt;/code&gt; can be set from front matter.&lt;/li&gt;
&lt;li&gt;JavaScript and CSS are minified no matter where they are in the site, including in inline code blocks.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Canvas Hit Tracking</title>
    <link rel="alternate" href="/2012/03/21/canvas-hit-tracking.html"/>
    <id>/2012/03/21/canvas-hit-tracking.html</id>
    <published>2012-03-21T00:00:00-08:00</published>
    <updated>2012-03-21T00:00:00-08:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;&lt;em&gt;NOTE: Code samples are in CoffeeScript&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;One of the most fundamental interactions of any game is the ability to click (or touch) an on-screen component to manipulate it. Sounds simple enough, but when building HTML5 Canvas-based games, you&amp;#39;d be wrong.&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;&lt;em&gt;NOTE: Code samples are in CoffeeScript&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;One of the most fundamental interactions of any game is the ability to click (or touch) an on-screen component to manipulate it. Sounds simple enough, but when building HTML5 Canvas-based games, you&amp;#39;d be wrong.&lt;/p&gt;

&lt;p&gt;The HTML5 Canvas allows us to easily draw shapes and images, but it does not provide an object model. What this means is, when I write code to draw a circle:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ctx.arc(10, 10, 10, 0, Math.PI * 2) # Arcs are in Radians
ctx.fill()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src="/projects/hit-tracking/one.png" alt="Single Circle"&gt;&lt;/p&gt;

&lt;p&gt;That code will draw the circle on the canvas immediately, but there is no link between what is displayed and what code caused it to be drawn.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s encapsulate drawing a circle into an Object we can reuse. We will also create an array of Objects being displayed.&lt;/p&gt;

&lt;h2&gt;A Simple Drawing Object&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;class Circle
  constructor: (@opt={}) -&amp;gt;
  draw: (ctx) -&amp;gt;
    ctx.arc(
        @opt.x      ? 10, # Default to 10
        @opt.y      ? 10, # Default to 10
        @opt.radius ? 10, # Default to 10
        0, Math.PI * 2
    )
    ctx.fill()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which can be used like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;c = new Circle(x: 50, y: 50, radius: 50)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;The World: A Collection of Objects&lt;/h2&gt;

&lt;p&gt;To keep track of our objects for drawing, we&amp;#39;ll use a simple array:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;theWorld = {
  items: []
  draw: -&amp;gt;
    canvasElement = document.getElementById(&amp;quot;world&amp;quot;)
    ctx = canvasElement.getContext(&amp;quot;2d&amp;quot;)

    # Clear previously drawn
    ctx.clearRect(
      0, 0, 
      canvasElement.width+1, canvasElement.height+1
    )

    # Draw everything
    obj.draw(ctx) for obj in @items
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now let&amp;#39;s add our circle to the world:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;theWorld.items.push(c)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, let&amp;#39;s draw the world:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;theWorld.draw()
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Naive Hit Tracking&lt;/h2&gt;

&lt;p&gt;So, now that we have an object representing a circle that we can manipulate and redraw, how do we figure out if clicking (or touching) a specific point on the canvas will &amp;quot;hit&amp;quot; a specific object?&lt;/p&gt;

&lt;p&gt;A first solution might involve Bounding Boxes. A Bounding Box is a rectangular container which our drawn object would fill. In the circle example above, the bounding box of a circle drawn at &lt;code&gt;x=50&lt;/code&gt;, &lt;code&gt;y=50&lt;/code&gt; and with a &lt;code&gt;radius=5&lt;/code&gt; would be: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Top left:     { x:   0, y:   0 }&lt;/li&gt;
&lt;li&gt;Top right:    { x: 100, y:   0 }&lt;/li&gt;
&lt;li&gt;Bottom left:  { x:   0, y: 100 }&lt;/li&gt;
&lt;li&gt;Bottom right: { x: 100, y: 100 }&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let&amp;#39;s add code to our Circle object to calculate this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# class Circle
getBounds: -&amp;gt;      
  {
    top:    @y - @radius
    left:   @x - @radius
    width:  @radius * 2
    height: @radius * 2
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Remember, HTML5 Canvas draws circles from their center. The above can be used like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;c = new Circle(x: 50, y: 50, radius: 50)
c.getBounds() # =&amp;gt; { top: 0, left: 0, width: 100, height: 100 }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, using simple math, we can calculate whether a click is inside that bounding box. Let&amp;#39;s add more to Circle:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# class Circle
didHit: (targetX, targetY) -&amp;gt;
  b = @getBounds()
  (
    (b.top  &amp;lt;= targetY &amp;lt;= b.top  + b.height) &amp;amp;&amp;amp;
    (b.left &amp;lt;= targetX &amp;lt;= b.left + b.width)
  )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Running a few hit tests should return expected results:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;c.didHit(5,   5)   # =&amp;gt; true
c.didHit(0,   0)   # =&amp;gt; true
c.didHit(10,  10)  # =&amp;gt; true
c.didHit(100, 100) # =&amp;gt; false
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;The Problem With Bounding Boxes&lt;/h3&gt;

&lt;p&gt;Our choice of shapes, a circle, should give you a hint as to the issues with using bounding boxes for hit testing. Circles are not rectangles, as such, they will give &amp;quot;false&amp;quot; positives at the points inside their bounds, but outside their arcs such as: &lt;code&gt;x=0,y=0&lt;/code&gt;. The problem is fourth magnified as soon as we start drawing complex shapes or using images with transparent regions.&lt;/p&gt;

&lt;h3&gt;The Great Thing About Bounding Boxes&lt;/h3&gt;

&lt;p&gt;Fear not! The above code is not useless. HTML5 Canvas has the ability to clear specific portions of an already drawn canvas. For performance reasons, you&amp;#39;ll want to clear and redraw only the portions that change rather than clearing the whole canvas (as our &lt;code&gt;theWorld&lt;/code&gt; example does). The method for clear is &lt;code&gt;clearRect&lt;/code&gt; and as you may guess, it takes a bounding box rectangle.&lt;/p&gt;

&lt;p&gt;If we had drawn our circle, we could they clear its bounding box like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# class Circle
clear: (ctx) -&amp;gt;
  b = @getBounds()
  ctx.clearRect(
    b.left, 
    b.top, 
    b.left + b.width, 
    b.top  + b.height
  )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That said, let&amp;#39;s move on to a pixel-perfect hit test. We&amp;#39;ll need to refactor our Circle and world first.&lt;/p&gt;

&lt;h2&gt;Offscreen Canvases&lt;/h2&gt;

&lt;p&gt;Another common HTML5 Canvas performance technique you&amp;#39;ll encounter is using &amp;quot;offscreen canvases&amp;quot; to reduce the amount of drawing that drawing the whole world would require. Offscreen canvases are simply canvas elements which have not been added to the DOM. In this approach, each Object actually has its own canvas which contains only itself. Drawing the entire world simply copies each Object&amp;#39;s canvas onto the main &amp;quot;onscreen canvas.&amp;quot;&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s look at a beefed-up Circle class which uses an offscreen canvas:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# class Circle
constructor: (@opt={}) -&amp;gt;
  @canvas = document.createElement(&amp;quot;canvas&amp;quot;)
  # @canvas.width  needs to be same side as world canvas
  # @canvas.height needs to be same side as world canvas
  @ctx = @canvas.getContext(&amp;quot;2d&amp;quot;)
  @drawOffscreen()

drawOffscreen: -&amp;gt;
  @ctx.arc(
      @opt.x ? 10, 
      @opt.y ? 10, 
      @opt.radius ? 10, 
      0, Math.PI * 2
  )
  @ctx.fill()

# Note: Drawing the entire offscreen canvas onto the
# entire world canvas will get progressively slower as
# the dimensions of the canvas grows. Consider only 
# drawing the image slice which represents this object&amp;#39;s
# bounding box.
copyOffscreen: (ctx) -&amp;gt;
  ctx.drawImage(@canvas, 0, 0)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This time, we create an offscreen canvas for each Circle. &lt;code&gt;drawOffscreen&lt;/code&gt; will render to that canvas and &lt;code&gt;copyOffscreen&lt;/code&gt; will copy that image to the world canvas (passed in as ctx). &lt;code&gt;drawOffscreen&lt;/code&gt; only needs to be called when the parameters which describe the Object change.&lt;/p&gt;

&lt;p&gt;The world can now be drawn like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;theWorld = {
  items: []
  draw: -&amp;gt;
    canvasElement = document.getElementById(&amp;quot;world&amp;quot;)
    ctx = canvasElement.getContext(&amp;quot;2d&amp;quot;)

    # Clear Objects
    obj.clear(ctx) for obj in @items

    # Draw everything
    obj.copyOffscreen(ctx) for obj in @items
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, we&amp;#39;re getting close to a modern, reusable and extensible system for managing Objects, how they clear themselves and how they draw themselves (offscreen and only on parameter change).&lt;/p&gt;

&lt;h2&gt;Per-Object Canvas Hit Testing&lt;/h2&gt;

&lt;p&gt;Enough of the preamble, here&amp;#39;s the meat. Now that we have an offscreen canvas for each Object that only contains itself, we can use that to check if we are &amp;quot;hitting&amp;quot; the drawn item. If there is a visible pixel at the point of the hit, then we return true.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# class Circle
didHit: (targetX, targetY) -&amp;gt;
  imageData = @ctx.getImageData(targetX, targetY, 1, 1)
  (imageData.data[3] &amp;gt; 0)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;getImageData&lt;/code&gt; method returns the RGBA values for the requested range of pixels on a canvas. In the above code, we ask for the target X/Y only. The resulting data is an array &lt;code&gt;[R, G, B, A]&lt;/code&gt;. &lt;code&gt;imageData.data[3]&lt;/code&gt; is the alpha value of the pixel, if it is greater than zero then that means we drew something there and the hit test is true.&lt;/p&gt;

&lt;h2&gt;Putting It All Together&lt;/h2&gt;

&lt;p&gt;Let&amp;#39;s make an addition to &lt;code&gt;theWorld&lt;/code&gt; to allow it to test all of its Objects and return only the items which we click on.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# theWorld
hitTestObjects: (targetX, targetY) -&amp;gt;
  i for i in @items when i.hitTest(targetX, targetY)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There we go, here&amp;#39;s a complicated example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;c1 = new Circle(x: 50,  y: 50, radius: 50)
c2 = new Circle(x: 100, y: 50, radius: 50)
c3 = new Circle(x: 150, y: 50, radius: 50)

theWorld.push(c1)
theWorld.push(c2)
theWorld.push(c3)

theWorld.hitTestObjects(0,    0) # =&amp;gt; []
theWorld.hitTestObjects(50,  50) # =&amp;gt; [c1, c2]
theWorld.hitTestObjects(100, 50) # =&amp;gt; [c1, c2, c3]
theWorld.hitTestObjects(150, 50) # =&amp;gt; [c2, c3]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src="/projects/hit-tracking/three.png" alt="Three Circles"&gt;&lt;/p&gt;

&lt;p&gt;I could go further and try things out with arcs, empty stroked rectangles, donuts and semi-transparent images, but it would work exactly the same.&lt;/p&gt;

&lt;p&gt;There&amp;#39;s plenty of room for caching, memoization and other optimizations in this system, but conceptually this is common approach. I hope this was enlightening.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Image Sequences: Let Me Count The Ways</title>
    <link rel="alternate" href="/2012/03/08/image-sequences.html"/>
    <id>/2012/03/08/image-sequences.html</id>
    <published>2012-03-08T00:00:00-08:00</published>
    <updated>2012-03-08T00:00:00-08:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;Everyone&amp;#39;s very excited by their &amp;quot;Pure CSS&amp;quot; &lt;a href="http://lab.victorcoulon.fr/css/path-menu/"&gt;this&lt;/a&gt; and &amp;quot;Pure CSS&amp;quot; &lt;a href="http://clear.youyuxi.com/"&gt;that&lt;/a&gt;, but if we are front-end developers really want to start taking on traditionally Flash use-cases, we&amp;#39;re going to need to step out animation game up a notch.&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;Everyone&amp;#39;s very excited by their &amp;quot;Pure CSS&amp;quot; &lt;a href="http://lab.victorcoulon.fr/css/path-menu/"&gt;this&lt;/a&gt; and &amp;quot;Pure CSS&amp;quot; &lt;a href="http://clear.youyuxi.com/"&gt;that&lt;/a&gt;, but if we are front-end developers really want to start taking on traditionally Flash use-cases, we&amp;#39;re going to need to step out animation game up a notch.&lt;/p&gt;

&lt;p&gt;Enter the Image Sequence. An Image Sequence is exactly what it sounds like, a series of images, each representing a single frame of an animation. Usually these will be exported from a high-level application like Adobe After Effects. For memory and performance reasons, these images are usually combined into a single Sprite Sheet. You may have heard of this technique, because &lt;a href="http://en.wikipedia.org/wiki/Sprite_(computer_graphics)"&gt;we&amp;#39;ve been using it for decades&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This week I implemented Image Sequences in 3 different ways. And just yesterday, Apple started using another technique on their &lt;a href="http://www.apple.com/ipad/"&gt;iPad product page&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;The Animation&lt;/h2&gt;

&lt;p&gt;I&amp;#39;ll be animating a &amp;quot;bouncing&amp;quot; particle. Here&amp;#39;s a look at the first frame:&lt;/p&gt;

&lt;p&gt;&lt;img src="/projects/sequence/particle-hover/particle_hover_04_00000.png"&gt;&lt;/p&gt;

&lt;p&gt;Each frame is 104x124. &lt;/p&gt;

&lt;p&gt;Here&amp;#39;s &lt;a href="/projects/sequence/particle-hover.zip"&gt;a zip of the entire 60 frame sequence&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Finally, here&amp;#39;s &lt;a href="/projects/sequence/particle-hover-frames.jpg"&gt;a 560kb Sprite Sheet containing all the frames&lt;/a&gt;. We&amp;#39;ll be using this in all the examples except for Apple&amp;#39;s newest implementation.&lt;/p&gt;

&lt;h2&gt;1: Pure &lt;del&gt;CSS&lt;/del&gt;Sass Animation&lt;/h2&gt;

&lt;p&gt;Did I say CSS? I&amp;#39;m way too lazy for that, let&amp;#39;s use Sass.&lt;/p&gt;

&lt;p&gt;The current versions of all desktop browsers, except IE, &lt;a href="http://caniuse.com/#feat=css-animation"&gt;support CSS3 Animations&lt;/a&gt;. The syntax for this in CSS looks like the following (you&amp;#39;ll need to add your own vendor prefixes):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@keyframes animate-particle {
  0%   { opacity: 0; }
  100% { opacity: 1; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will define a simple fadeIn animation which you can control on each element which implements it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#my-particle {
  width: 104px;
  height: 124px;
  background: url(particle-hover_04_00000.png);
  animation-duration: 1s;
  animation-iteration-count: infinite;
  animation-name: animate-particle;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will run the 1 second animation infinitely.&lt;/p&gt;

&lt;p&gt;So, how can we use this to animate our Sprite Sheet? We&amp;#39;ll simply animate the background-position offset of the element 1 frame at a time. If you opened &lt;a href="/projects/sequence/particle-hover-frames.jpg"&gt;the Sprite Sheet&lt;/a&gt;, you&amp;#39;ll remember we&amp;#39;ve stacked all 60 frames vertically. So our keyframes would look something like: &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@keyframes animate-particle {
  0%    { background-position: 0 0; }
  1.69% { background-position: 0 -124px; }
  3.39% { background-position: 0 -248px; }
  ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We need to animate across 60 frames over the 100% range of the animation, which means each frame is 1.695%. This could get nasty and verbose very quickly. Let&amp;#39;s use Sass:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@keyframes animate-particle {
  @for $i from 0 through 59 {
    $s: ($i * 100) / 59 + &amp;quot;%&amp;quot;;
    #{$s} { background-position: 0 ($i * -124px); }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can see &lt;a href="https://gist.github.com/2002296"&gt;the entire output here&lt;/a&gt;. Now, let&amp;#39;s reference that on our element. We&amp;#39;ve double checked with our designer that the animation is at 30fps, so that means our 60 frames should last 2 seconds.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#my-particle {
  width: 104px;
  height: 124px;
  background: url(particle-hover-frames.jpg);
  animation-duration: 2s;
  animation-iteration-count: infinite;
  animation-timing-function: step-start;
  animation-name: animate-particle;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There is one piece of special sauce above and that is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;animation-timing-function: step-start;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Normally, CSS animations will attempt to tween between states, which is great for smooth transitions in opacity or scale, but we need the animate to jump immediately from frame to frame. That is what &lt;code&gt;step-start&lt;/code&gt; does.&lt;/p&gt;

&lt;h4&gt;&lt;a href="/projects/sequence/css.html"&gt;View the Pure CSS Animation Image Sequence Demo&lt;/a&gt;.&lt;br&gt;&lt;br&gt;&lt;/h4&gt;

&lt;h2&gt;2: Canvas Animation&lt;/h2&gt;

&lt;p&gt;The Canvas element is just a blank slate you can draw pixels on to. Drawing image data from individual files or sprite sheets is very easy. We&amp;#39;ll use the same Sprite Sheet from above.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function drawFrame(ctx, image, width, height, num) {
  var offsetX = 0,
      offsetY = num * height;

  ctx.drawImage(image, 
    offsetX, offsetY, 
    width, height, 
    0, 0, 
    width, height);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above function will take a Canvas context, an Image object, the dimensions of each frame and the frame to draw. We&amp;#39;ll use &lt;a href="http://paulirish.com/2011/requestanimationframe-for-smart-animating/"&gt;requestAnimationFrame&lt;/a&gt; for smooth animations.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var fps          = 30,
    currentFrame = 0,
    totalFrames  = 60,
    img          = document.getElementById(&amp;quot;frames&amp;quot;),
    canvas       = document.getElementById(&amp;quot;canvas&amp;quot;),
    ctx          = canvas.getContext(&amp;quot;2d&amp;quot;),
    currentTime  = new Date().getTime();

(function animloop(time){
  var delta = (time - currentTime) / 1000;

  currentFrame += (delta * fps);

  var frameNum = Math.floor(currentFrame);

  if (frameNum &amp;gt;= totalFrames) {
    currentFrame = frameNum = 0;
  }

  requestAnimationFrame(animloop);

  drawFrame(ctx, img, 104, 124, frameNum);
  currentTime = time;
})(currentTime);
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;&lt;a href="/projects/sequence/canvas.html"&gt;View the Canvas Animation Image Sequence Demo&lt;/a&gt;.&lt;br&gt;&lt;br&gt;&lt;/h4&gt;

&lt;h2&gt;3: Javascript DOM Animation&lt;/h2&gt;

&lt;p&gt;The next solution is to implement the CSS version in Javascript. We&amp;#39;ll use the exact same approach. Take a div element, animate its background image. The advantage here is that this will work in every browser (assuming you have the &lt;a href="http://paulirish.com/2011/requestanimationframe-for-smart-animating/"&gt;requestAnimationFrame polyfill&lt;/a&gt;).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#my-particle2 {
  width: 104px;
  height: 124px;
  background: url(particle-hover-frames.jpg);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Similar CSS, minus the CSS Animation code. Now for the JS (which is similar to the Canvas implementation): &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var fps          = 30,
    currentFrame = 0,
    totalFrames  = 60,
    elem         = document.getElementById(&amp;quot;my-particle2&amp;quot;),
    currentTime  = new Date().getTime();

(function animloop(time){
  var delta = (time - currentTime) / 1000;

  currentFrame += (delta * fps);

  var frameNum = Math.floor(currentFrame);

  if (frameNum &amp;gt;= totalFrames) {
    currentFrame = frameNum = 0;
  }

  requestAnimationFrame(animloop);

  elem.style.backgroundPosition = &amp;quot;0 -&amp;quot; + (frameNum * 124) + &amp;quot;px&amp;quot;;

  currentTime = time;
})(currentTime);
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;&lt;a href="/projects/sequence/elem.html"&gt;View the Javascript DOM Animation Image Sequence Demo&lt;/a&gt;.&lt;br&gt;&lt;br&gt;&lt;/h4&gt;

&lt;h2&gt;4: Apple-style IMG Animation&lt;/h2&gt;

&lt;p&gt;Finally, let&amp;#39;s take a look at Apple&amp;#39;s implementation. They actually use the more straightforward approach. The preload the individual images, and directly set the chosen frame on a normal Image element. Simple, eh?&lt;/p&gt;

&lt;p&gt;Traditionally, this approach has been considered too slow to smoothly animate, but it looks like the combination of requestAnimationFrame, Webkit&amp;#39;s incredible speed, Apple&amp;#39;s ability to target Safari and the decline of older IE versions has made this technique &amp;quot;fast enough&amp;quot;.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s an implementation:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var fps          = 30,
    currentFrame = 0,
    totalFrames  = 60,
    img          = document.getElementById(&amp;quot;myImage&amp;quot;),
    currentTime  = new Date().getTime();

(function animloop(time){
  var delta = (time - currentTime) / 1000;

  currentFrame += (delta * fps);

  var frameNum = Math.floor(currentFrame);

  if (frameNum &amp;gt;= totalFrames) {
    currentFrame = frameNum = 0;
  }

  requestAnimationFrame(animloop);

  img.src = &amp;quot;/projects/sequence/particle-hover/particle_hover_04_000&amp;quot; +
    (frameNum &amp;lt; 10 ? &amp;quot;0&amp;quot; : &amp;quot;&amp;quot;) + frameNum + &amp;quot;.png&amp;quot;;

  currentTime = time;
})(currentTime);
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;&lt;a href="/projects/sequence/apple.html"&gt;View the Apple-style Animation Image Sequence Demo&lt;/a&gt;.&lt;br&gt;&lt;br&gt;&lt;/h4&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Each of the above techniques has a specific use-case. &lt;/p&gt;

&lt;p&gt;Pure CSS &lt;em&gt;should&lt;/em&gt; be GPU accelerated and lets you keep all your animations together in CSS. The downside is that you have to generate all the frame percentages in CSS (or Sass) and that it only works in modern browsers. I&amp;#39;ve also encountered performance issues where the CSS method is causing redraw/repaint events which slow other animations on the screen.&lt;/p&gt;

&lt;p&gt;The Canvas implementation is great for games, where you&amp;#39;ll be drawing most of your components directly to the canvas.&lt;/p&gt;

&lt;p&gt;The Javascript DOM method works best when you want to load the large Sprite Sheet and avoid too many HTTP requests.&lt;/p&gt;

&lt;p&gt;The Apple-style method will probably become very popular. You can start the animation after the page loads and use it as a form of progressive enhancement.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Best Albums of the Year: 2011</title>
    <link rel="alternate" href="/2012/01/07/best-albums-of-the-year-2011.html"/>
    <id>/2012/01/07/best-albums-of-the-year-2011.html</id>
    <published>2012-01-07T00:00:00-08:00</published>
    <updated>2012-01-07T00:00:00-08:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;I almost didn&amp;#39;t write this article because I was so disappointed in 2011. Here it is anyways for posterity, I couldn&amp;#39;t even manage to find 10 albums I like enough to list.&lt;/p&gt;

&lt;h2&gt;Top 7:&lt;/h2&gt;

&lt;ul class="albums"&gt;
  &lt;li&gt;
    &lt;div class='cover'&gt;
</summary>
    <content type="html">&lt;p&gt;I almost didn&amp;#39;t write this article because I was so disappointed in 2011. Here it is anyways for posterity, I couldn&amp;#39;t even manage to find 10 albums I like enough to list.&lt;/p&gt;

&lt;h2&gt;Top 7:&lt;/h2&gt;

&lt;ul class="albums"&gt;
  &lt;li&gt;
    &lt;div class='cover'&gt;
      &lt;img src='/albums/2011/7.jpg' /&gt;&lt;div&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class='content'&gt;
      &lt;h6&gt;The Dear Hunter&lt;/h6&gt;
      &lt;h4&gt;The Color Spectrum&lt;/h4&gt;
      &lt;p&gt;Progressive rockers decided to take a "small" break in the middle of their 6 concept album cycle to write a 9 concept album cycle. The Color Spectrum is 9 EPs, each representing a color on the spectrum, containing 36 total songs clocking in at 2.5hrs of music. And yet, it's listenable all the way through. I particularly like the straight rock of Red and the hopeful feeling in the closing White.&lt;/p&gt;
    &lt;/div&gt;
    &lt;div class='player'&gt;
      &lt;h6&gt;#7&lt;/h6&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;div class='cover'&gt;
      &lt;img src='/albums/2011/6.jpg' /&gt;&lt;div&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class='content'&gt;
      &lt;h6&gt;Glassjaw&lt;/h6&gt;
      &lt;h4&gt;Coloring Book / Our Color Green&lt;/h4&gt;
      &lt;p&gt;Glassjaw reemerged with 2 EPs to satisfy fans along with a handful of music videos and promises that a full-length is coming soon. Glassjaw is much darker, heavier and crushing in both theses EPs. I'm loving the direction.&lt;/p&gt;
    &lt;/div&gt;
    &lt;div class='player'&gt;
      &lt;h6&gt;#6&lt;/h6&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;div class='cover'&gt;
      &lt;img src='/albums/2011/5.png' /&gt;&lt;div&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class='content'&gt;
      &lt;h6&gt;Pianos Become The Teet&lt;/h6&gt;
      &lt;h4&gt;The Lack Long After&lt;/h4&gt;
      &lt;p&gt;Caught somewhere between post-rock and post-hardcore, Pianos Become The Teeth continued to refine their sounds: beautiful interludes punctuated by explosive vocals.&lt;/p&gt;
    &lt;/div&gt;
    &lt;div class='player'&gt;
      &lt;h6&gt;#5&lt;/h6&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;div class='cover'&gt;
      &lt;img src='/albums/2011/4.jpg' /&gt;&lt;div&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class='content'&gt;
      &lt;h6&gt;Portugal. The Man&lt;/h6&gt;
      &lt;h4&gt;In The Mountain In The Cloud&lt;/h4&gt;
      &lt;p&gt;Another year, another Portugal. The Man album. This year they released their "big label" debut which feels less free and more produced than past work. However, it doesn't really matter because the songs continue to be great and always fresh.&lt;/p&gt;
    &lt;/div&gt;
    &lt;div class='player'&gt;
      &lt;h6&gt;#4&lt;/h6&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;div class='cover'&gt;
      &lt;img src='/albums/2011/3.jpg' /&gt;&lt;div&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class='content'&gt;
      &lt;h6&gt;Touch&amp;eacute; Amor&amp;eacute;&lt;/h6&gt;
      &lt;h4&gt;Parting The Sea Between Brightness And Me&lt;/h4&gt;
      &lt;p&gt;Hardcore songs are short and fast. Touch&amp;eacute; Amor&amp;eacute; decided that 3 minutes was still too long and condensed everything on this album to less than 2 minutes, some only 60-70 seconds long. The result is pure energy that leaves you wanting to restart the album after it's 20 minute play-time.&lt;/p&gt;
    &lt;/div&gt;
    &lt;div class='player'&gt;
      &lt;h6&gt;#3&lt;/h6&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;div class='cover'&gt;
      &lt;img src='/albums/2011/2.jpg' /&gt;&lt;div&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class='content'&gt;
      &lt;h6&gt;Trey Parker, Matt Stone &amp;amp; Company&lt;/h6&gt;
      &lt;h4&gt;The Book of Mormon Soundtrack&lt;/h4&gt;
      &lt;p&gt;Matt &amp;amp; Trey are very good at musicals. Cannibal the Musical is great and they wrote that with no budget in college. The South Park musical is exceptional, way better than that shitty Phil Collins' Tarzan soundtrack. The Book of Mormon blows both those away, along with a lot of the other musical theater classics. I can't wait to see the thing live.&lt;/p&gt;
    &lt;/div&gt;
    &lt;div class='player'&gt;
      &lt;h6&gt;#2&lt;/h6&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li class="last"&gt;
    &lt;div class='cover'&gt;
      &lt;img src='/albums/2011/1.jpg' /&gt;&lt;div&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class='content'&gt;
      &lt;h6&gt;Bomb The Music Industry!&lt;/h6&gt;
      &lt;h4&gt;Vacation&lt;/h4&gt;
      &lt;p&gt;I'm going to echo a million other reviews, this is punk rock's Pet Sounds.&lt;/p&gt;
    &lt;/div&gt;
    &lt;div class='player'&gt;
      &lt;h6&gt;#1&lt;/h6&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Middleman 3.0 Beta</title>
    <link rel="alternate" href="/2012/01/03/middleman-3-beta.html"/>
    <id>/2012/01/03/middleman-3-beta.html</id>
    <published>2012-01-03T00:00:00-08:00</published>
    <updated>2012-01-03T00:00:00-08:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;Middleman is a small tool for developing stand-alone, static websites. It&amp;#39;s great for separating frontend development from the backend, developing blazingly fast static websites or quickly creating prototypes. Middleman brings all of the power of Rails to provide an incredibly powerful development environment with access to:&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;Middleman is a small tool for developing stand-alone, static websites. It&amp;#39;s great for separating frontend development from the backend, developing blazingly fast static websites or quickly creating prototypes. Middleman brings all of the power of Rails to provide an incredibly powerful development environment with access to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Templating engines and layouts (ERb, Slim, Haml, anything supported by Tilt)&lt;/li&gt;
&lt;li&gt;Preprocessors (CoffeeScript, Sass, Less, Stylus, etc)&lt;/li&gt;
&lt;li&gt;Compression (Minify CSS, JS and images)&lt;/li&gt;
&lt;li&gt;Post-compile callbacks for deployment&lt;/li&gt;
&lt;li&gt;And lots of new stuff in 3.0&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Install the Beta&lt;/h3&gt;

&lt;p&gt;Before getting in to all the new features, here&amp;#39;s how you can install the beta:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gem install middleman --pre
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Remember:&lt;/strong&gt; This is a beta and there are bound to be bugs and possible regressions. 3.0 should be fully backwards compatible with 2.x. Please submit any issues you run into on &lt;a href="https://github.com/middleman/middleman/issues"&gt;the Github issue tracker&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;New Features&lt;/h3&gt;

&lt;p&gt;Let&amp;#39;s dive in.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;h4&gt;middleman-core &amp;amp; middleman-more&lt;/h4&gt;

&lt;p&gt;The middleman gem has been split into 2 smaller gems. middleman-core contains everything you need to run a simple Middleman project, but does not include any templating languages other than ERb or any compiled extensions. This means you &lt;em&gt;should&lt;/em&gt; be able to install middleman-core on systems without a compiler. You won&amp;#39;t have access to things like CoffeeScript, Sass, Sprockets or asset compression, but many users don&amp;#39;t need these extra features. The full dependency list for middleman-core is: activesupport, fssm, rack, rack-test, thor &amp;amp; tilt.&lt;/p&gt;

&lt;p&gt;middleman-more contains everything not in middleman-core. Combining the two will work exactly as middleman 2.x did. In fact, this is exactly what installing the middleman gem directly does.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;h4&gt;Direct Preview&lt;/h4&gt;

&lt;p&gt;Sometimes you just want to host a directory of web assets on localhost without doing anything fancy. In 3.0, Middleman will do just this if you run it from a directory with a &lt;code&gt;config.rb&lt;/code&gt; file. For example: &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    # Download the Zurb Foundation: http://foundation.zurb.com/
cd foundation
middleman server
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now the &lt;a href="http://foundation.zurb.com/"&gt;Zurb Foundation&lt;/a&gt; will be available at: http://localhost:4567/&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;h4&gt;Sass, Compass and Sprockets&lt;/h4&gt;

&lt;p&gt;Sass and Scss file now have access to Sprockets dependency management and to CSS located in gems which support the Rails 3.1 Asset Pipeline. Given a &amp;quot;source/stylesheets/main.css.scss&amp;quot;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    /**
 *= require &amp;quot;some_partial&amp;quot;
 *
 * Using Zurb as an example: gem install zurb-foundation
 *= require &amp;quot;foundation/typography&amp;quot;
 */

body {
  /* My code */
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;h4&gt;Nested Layouts&lt;/h4&gt;

&lt;p&gt;As an alternative to partials and content_for blocks, we&amp;#39;ve added something from the Django world. Say I have a template named &amp;quot;source/index.html.erb&amp;quot; and it&amp;#39;s layout is located at &amp;quot;source/layouts/default.erb&amp;quot;. Normally, the contents of the layout will wrap the contents of the template. With nested layouts, I can add the following to the layout and wrap the contents yet again:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;% wrap_layout :admin do %&amp;gt;
  I am the Defaul Layout
  &amp;lt;%= yield %&amp;gt;
&amp;lt;% end %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, the final contents will be the template, wrapped in the default layout, wrapped in the admin layout. This can continue indefinitely.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;h4&gt;The Sitemap&lt;/h4&gt;

&lt;p&gt;The Sitemap is a new, internal cache of all the pages in your project. It can be inspected for building navigation, scraping pages for frontmatter or all manner of metaprogramming. When you add, remove or change a file, the sitemap is automatically updated.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s a quick example for building an index page which displays an automatically updating list of it&amp;#39;s child pages.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;% for page in current_page.children %&amp;gt;
  &amp;lt;%= link_to page.data.title, page.url %&amp;gt;
&amp;lt;% end %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you&amp;#39;ll notice, the page object has access to that page&amp;#39;s frontmatter. This means we can use frontmatter to provide categorization and work with that data. Say we have several pages with the following frontmatter (and several without it):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
category: internal
---
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can select only the pages with that category to display in our list of links:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;h1&amp;gt;Internal&amp;lt;/h1&amp;gt;
&amp;lt;% for page in current_page.children.select { |x| x.data.category == &amp;quot;internal&amp;quot; } %&amp;gt;
  &amp;lt;%= link_to page.data.title, page.url %&amp;gt;
&amp;lt;% end %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;h4&gt;Miscellaneous Changes&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Rewritten to work directly with Rack (Sinatra apps can still be mounted)&lt;/li&gt;
&lt;li&gt;Yard code docs: &lt;a href="http://rubydoc.info/github/middleman/middleman"&gt;http://rubydoc.info/github/middleman/middleman&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;3rd Party Command Line Tools&lt;/li&gt;
&lt;li&gt;Activate mobile html5boilerplate template&lt;/li&gt;
&lt;li&gt;Support for placekitten.com&lt;/li&gt;
&lt;li&gt;Activating extensions can now take an options hash&lt;/li&gt;
&lt;li&gt;Don&amp;#39;t re-minify files with &amp;quot;.min&amp;quot; in their name&lt;/li&gt;
&lt;li&gt;Enable chained templates outside of sprockets (file.html.markdown.erb)&lt;/li&gt;
&lt;li&gt;Removed old 1.x mm- binaries, please use the main &amp;quot;middleman&amp;quot; binary from now on&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Ember.js Live Collections</title>
    <link rel="alternate" href="/2011/12/27/emberjs-collections.html"/>
    <id>/2011/12/27/emberjs-collections.html</id>
    <published>2011-12-27T00:00:00-08:00</published>
    <updated>2011-12-27T00:00:00-08:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;If you&amp;#39;re writing a client-side application, there are two common tasks you can expect to perform. First, modern web applications are expected to show updated information as quickly as possible without a full page reload. (Think about Twitter or Facebook: as you&amp;#39;re reading the updates, newer updates continue to arrive at the top of the page.) Second, you&amp;#39;ll be sending the current user&amp;#39;s updates to everyone else&amp;#39;s streams.&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;If you&amp;#39;re writing a client-side application, there are two common tasks you can expect to perform. First, modern web applications are expected to show updated information as quickly as possible without a full page reload. (Think about Twitter or Facebook: as you&amp;#39;re reading the updates, newer updates continue to arrive at the top of the page.) Second, you&amp;#39;ll be sending the current user&amp;#39;s updates to everyone else&amp;#39;s streams.&lt;/p&gt;

&lt;p&gt;You can probably imagine how often you&amp;#39;ll need to implement these patterns: mail clients, chat rooms; anything that updates, really.&lt;/p&gt;

&lt;p&gt;Over the weekend, my friends at Bocoup &lt;a href="http://weblog.bocoup.com/backbone-live-collections"&gt;posted an article&lt;/a&gt; called &lt;em&gt;Backbone.js Live Collections&lt;/em&gt; which discussed how to use Backbone.js&lt;sup&gt;1&lt;/sup&gt; to poll Twitter for new tweets and update a list of those tweets on the page. &lt;strike&gt;I don&amp;#39;t know their official stance on Backbone.js, so I&amp;#39;m going to assume they used it as an example because it was either code extracted from one of their projects or they simply decided to use Backbone.js because of its popularity.&lt;/strike&gt; &lt;strong&gt;[Edit: Ben Alman of Bocoup has clarified their position saying: &amp;quot;FWIW, we decided to use Backbone after a ton of research and experimentation.&amp;quot;]&lt;/strong&gt; Go ahead and read that article… I&amp;#39;ll wait.&lt;/p&gt;

&lt;p&gt;Back? Good.&lt;/p&gt;

&lt;p&gt;Assuming that Bocoup simply chose Backbone.js for familiarity&amp;#39;s sake, I glibly summed up the article as &amp;quot;In other words, use Ember.js :-p&amp;quot; and ruffled more feathers than I intended. I was invited to write this article to express my point better than a tweet could, so here we go.&lt;/p&gt;

&lt;h2&gt;Ember.js &lt;strike&gt;Amber.js&lt;/strike&gt; &lt;strike&gt;Sproutcore 2.0&lt;/strike&gt;&lt;/h2&gt;

&lt;p&gt;&lt;a href="http://www.emberjs.com/"&gt;Ember.js&lt;/a&gt; is what happened when SproutCore decided to be less Apple Cocoa and more jQuery. The result is a web framework which retains very important high-level concepts such as observers, bindings and state charts, while delivering a concise API. SproutCore started its life as the development framework behind an early client-side email application. Then, Apple used it to build MobileMe (and then iCloud), both of which include email clients. Needless to say, they&amp;#39;ve figured out that collections which update from the server are very important. In my opinion, SproutCore/Ember.js are the best solution for anything needing collections of data rendered into the DOM. Thus my glib tweet above.&lt;/p&gt;

&lt;p&gt;Below, I&amp;#39;ve recreated the Bocoup example using Ember.js. I think it expresses the intent of the initial application more concisely and
understandably. You&amp;#39;ll note that there is no code that interacts with the DOM at all; instead, making in changes in JavaScript causes
the DOM to be updated to reflect the new state automatically.&lt;/p&gt;

&lt;h3&gt;App&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;// Setup a global namespace for our code.
Twitter = Em.Application.create({

  // When everything is loaded.
  ready: function() {

    // Start polling Twitter
    setInterval(function() {
      Twitter.searchResults.refresh();
    }, 2000);

    // The default search is empty, let&amp;#39;s find some cats.
    Twitter.searchResults.set(&amp;quot;query&amp;quot;, &amp;quot;cats&amp;quot;);

    // Call the superclass&amp;#39;s `ready` method.
    this._super();
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The app is the core of any Ember.js project. It provides a ready event, much like jQuery&amp;#39;s, and sets up event delegation behind the scenes. Its primary use in this example is to namespace all our classes and variables under the &lt;code&gt;Twitter&lt;/code&gt; namespace.&lt;/p&gt;

&lt;h3&gt;Template View&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;script type=&amp;quot;text/x-handlebars&amp;quot;&amp;gt;
  &amp;lt;ul class=&amp;quot;tweets&amp;quot;&amp;gt;
  {{#each Twitter.searchResults}}
    &amp;lt;li class=&amp;quot;tweet&amp;quot;&amp;gt;{{text}}&amp;lt;/li&amp;gt;
  {{/each}}
  &amp;lt;/ul&amp;gt;
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ember.js templates are written in &lt;a href="http://www.handlebarsjs.com/"&gt;Handlebars.js&lt;/a&gt;. You can use a &lt;code&gt;text/x-handlebars&lt;/code&gt; script tag anywhere in your document and it will be replaced with a live-updating View. The above code will watch for a variable called &lt;code&gt;Twitter.searchResults&lt;/code&gt; and when it changes, it will update the list items in the &lt;code&gt;ul&lt;/code&gt;. See what I mean about Ember.js being optimized for collections and lists?&lt;/p&gt;

&lt;h3&gt;Model&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;Twitter.Tweet = Em.Object.extend();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is entirely a naming/convenience issue. We&amp;#39;re not writing any custom code for handling each tweet. We simply take its JSON and use it directly.&lt;/p&gt;

&lt;h3&gt;Controller&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;// An instance of ArrayController which handles collections.
Twitter.searchResults = Em.ArrayController.create({

  // Default collection is an empty array.
  content: [],

  // Default query is blank.
  query: null,

  // Simple id-to-model mapping for searches and duplicate checks.
  _idCache: {},

  // Add a Twitter.Tweet instance to this collection.
  // Most of the work is in the built-in `pushObject` method,
  // but this is where we add our simple duplicate checking.
  addTweet: function(tweet) {
    // The `id` from Twitter&amp;#39;s JSON
    var id = tweet.get(&amp;quot;id&amp;quot;);

    // If we don&amp;#39;t already have an object with this id, add it.
    if (typeof this._idCache[id] === &amp;quot;undefined&amp;quot;) {
      this.pushObject(tweet);
      this._idCache[id] = tweet.id;
    }
  },

  // Public method to fetch more data. Get&amp;#39;s called in the loop
  // above as well as whenever the `query` variable changes (via
  // an observer).
  refresh: function() {
    var query = this.get(&amp;quot;query&amp;quot;);

    // Only fetch if we have a query set.
    if (Em.empty(query)) {
      this.set(&amp;quot;content&amp;quot;, []);
      return;
    }

    // Poll Twitter
    var self = this;
    var url = &amp;quot;http://search.twitter.com/search.json?q=&amp;quot; + query + &amp;quot;&amp;amp;callback=?&amp;quot;;
    $.getJSON(url, function(data) {

      // Make a model for each result and add it to the collection.
      for (var i = 0; i &amp;lt; data.results.length; i++) {
        self.addTweet(Twitter.Tweet.create(data.results[i]));
      }
    });
  }.observes(&amp;quot;query&amp;quot;)
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here&amp;#39;s the meat of the solution. Most of this is simply setting up a nice API and doing the JSON request. The simplest version of the code above would look like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Twitter.searchResults = Em.ArrayController.create();
$.getJSON(&amp;quot;http://search.twitter.com/search.json?q=cats&amp;amp;callback=?&amp;quot;, function(d) {
   Twitter.searchResults.pushObjects(d.results);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Step 3, Profit&lt;/h2&gt;

&lt;p&gt;There is no step three!&lt;/p&gt;

&lt;p&gt;&lt;a href="/projects/emberjs-live-collection.html"&gt;Check out the demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I&amp;#39;m not saying Ember.js is the best solution for every problem, but when it comes to collections updating the DOM, they&amp;#39;ve nailed it.&lt;/p&gt;

&lt;h3&gt;Footnotes&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Backbone.js is a client-side Model-View-Controller framework for Javascript. It is incredibly popular. The &lt;a href="http://peepcode.com/products/backbone-js"&gt;PeepCode screencasts&lt;/a&gt; are a wonderful way to get started.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Thanks to &lt;a href="https://twitter.com/#!/tomdale"&gt;Tom Dale&lt;/a&gt; of the Tilde, and a developer on the Ember.js project, for proofing this article.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
  </entry>
  <entry>
    <title>The Tweets They Are A-Changin'</title>
    <link rel="alternate" href="/2011/12/26/the-tweets-they-are-a-changin.html"/>
    <id>/2011/12/26/the-tweets-they-are-a-changin.html</id>
    <published>2011-12-26T00:00:00-08:00</published>
    <updated>2011-12-26T00:00:00-08:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;How you do add more meaning to 140 characters optimizing for brevity over clarity? You can infer meaning and intention from what you know about the author. If you know the author in real life, often you can hear the way they would have said a certain word or imagine the way their eyes sparkled when turning a clever phrase. Even then, careless writing can confuse even those who know you best. It doesn&amp;#39;t help that we often affect a certain style in our writing that is absent from our speaking.&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;How you do add more meaning to 140 characters optimizing for brevity over clarity? You can infer meaning and intention from what you know about the author. If you know the author in real life, often you can hear the way they would have said a certain word or imagine the way their eyes sparkled when turning a clever phrase. Even then, careless writing can confuse even those who know you best. It doesn&amp;#39;t help that we often affect a certain style in our writing that is absent from our speaking.&lt;/p&gt;

&lt;p&gt;Twitter&amp;#39;s original purpose was to broadcast your short opinions to a selection of people who wanted to hear what you had to say. This small tribe were likely to know you well enough to read between the lines or, if they couldn&amp;#39;t, they would simply to stop following you. &lt;/p&gt;

&lt;p&gt;But Twitter grew up. Rather than providing a way for small, mostly overlapping, groups of people to communicate, they&amp;#39;ve decided to push the idea of one, massive, system-wide conversation organized by Trending Topics. This means a message between friends can find its way in front of thousands of unfriendly eyeballs unwilling to treat a pithy statement as something they does not require a response.&lt;/p&gt;

&lt;p&gt;As Twitter&amp;#39;s growth accelerates, it seems the number of angry conversations I am having on it are increasing as well. For the most part, something I say intended for friends or developers is retweeted and suddenly some Tea Party moron I&amp;#39;ve never met is yelling at me for infringing on his freedoms.&lt;/p&gt;

&lt;p&gt;I guess there isn&amp;#39;t much I can do to fix this situation. The universe tends towards entropy and human conversation tends towards anger, indigence and a lack of basic respect for others&amp;#39; opinions. That said, I have developed my own kind of &amp;quot;emotional inference style guide&amp;quot; and I&amp;#39;m going to tell you about it.&lt;/p&gt;

&lt;h2&gt;Personal Opinion, Expressed Anger &amp;amp; Direct Attack&lt;/h2&gt;

&lt;p&gt;Let&amp;#39;s say my iPhone crashed. Here are three ways I might tweet about it. Each has its own meaning to me, though others may read them all identically.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&amp;quot;My iPhone just crashed. Fuck &lt;strong&gt;Apple&lt;/strong&gt;.&amp;quot;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&amp;quot;My iPhone just crashed. Fuck &lt;strong&gt;@Apple&lt;/strong&gt;.&amp;quot;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&amp;quot;My iPhone just crashed. Fuck &lt;strong&gt;@apple&lt;em&gt;store&lt;/em&gt;emplyoee&lt;em&gt;john&lt;/em&gt;doe&lt;/strong&gt;.&amp;quot;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the first case, I am complaining out loud about a mass corporation who I would never expect to give a damn. I can say whatever I want, it&amp;#39;s venting plain and simple.&lt;/p&gt;

&lt;p&gt;In the second case, I&amp;#39;m complaining directly to an account for that company. Likely this will be a Customer Relations person and there is an off chance they will respond. I&amp;#39;ve seen organizations like Comcast doing actual troubleshooting and refunds over their official Twitter accounts.&lt;/p&gt;

&lt;p&gt;In the third case, I am directly attacking a human being with a Twitter account. They should take this personally and I wouldn&amp;#39;t be surprised if they fight back.&lt;/p&gt;

&lt;h3&gt;The Example Prompting This Article&lt;/h3&gt;

&lt;p&gt;Earlier today I had a similar issue. @BoazSender, a friend who I&amp;#39;ve met at several conferences, retweeted a blog article from his company&amp;#39;s official account. I chose to express my opinion at the company @Bocoup account because I wanted to attribute the original tweet, but I also didn&amp;#39;t want to address the author himself because that would be too confrontational.&lt;/p&gt;

&lt;p&gt;Needless to say, nobody but myself knows my own internal logic so my  glib opinion landed as an insult instead. Even worse, since all the employees follow their official account, they all took it personally. Twitter multiplexed my opinion into a dozen tiny insults. Whoops. Sorry guys.&lt;/p&gt;

&lt;h3&gt;Auto-Searches and Passing Along Hate&lt;/h3&gt;

&lt;p&gt;The above example is probably my fault. I tried to fix it as quickly as possible. However, there are even worse ways in which my system fails. In my first example, I did not reference a real Twitter account and assumed that a real human would not read or respond to it. It turns out that I am very wrong. Many people seem to be running automatic searches for their names on Twitter and then responding to anyone who mentions them. This seems like a good way to go crazy unless you are universally loved.&lt;/p&gt;

&lt;p&gt;Now my first, and least insulting, example has suddenly jumped to the most insulting level. Still, if you&amp;#39;re searching for people talking about you, you deserve what you get. All I can say is, I have opinions and I will express them and I did not intend to be confrontational.&lt;/p&gt;

&lt;p&gt;Finally, there are toadies who follow me even when the recipient of my opinion does not. I know big wigs don&amp;#39;t follow my little account, so I feel safe to call them out on things. But then a fan of whoever I insult reads my tweet and passes it along to the target. Whereas my original statement was vaguely directed, the retweet basically says &amp;quot;Hey X, so and so thinks you suck.&amp;quot; It&amp;#39;s hard to recover from that kind of introduction.&lt;/p&gt;

&lt;h2&gt;Conclusion (Poor John Gruber)&lt;/h2&gt;

&lt;p&gt;All I can say is, everyone should try to assume opinions are just opinions and take disagreements as gracefully as possible.&lt;/p&gt;

&lt;p&gt;That said, I&amp;#39;m starting to feel back for John Gruber. John writes the incredibly popular &lt;a href="http://daringfireball.net"&gt;Daring Fireball&lt;/a&gt; blog. He has a @daringfireball work account and a @gruber personal account. He has strong opinions and tweets them from his personal account. His blog and that account are usually well-reasoned and researched.&lt;/p&gt;

&lt;p&gt;And yet, he receives tons of directly targeted hate tweets. The internet is a mean place. It was nice when it was in the Youtube Comment Ghetto, but really sucks when it spills over into your personal communication.&lt;/p&gt;

&lt;p&gt;Most of these assholes (fuck those guys) message @gruber directly with some raw hate about his blog. In my system I wouldn&amp;#39;t feel bad saying &amp;quot;I think John Gruber is wrong,&amp;quot; if I felt that way. If an article needed a correction, I&amp;#39;d message @daringfireball. But never would I say mean things to @gruber for something he wrote on @daringfireball.&lt;/p&gt;

&lt;p&gt;Twitter is becoming the defacto source for Ad Hominem attacks.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Kindle Dots</title>
    <link rel="alternate" href="/2011/12/25/kindle-dots.html"/>
    <id>/2011/12/25/kindle-dots.html</id>
    <published>2011-12-25T00:00:00-08:00</published>
    <updated>2011-12-25T00:00:00-08:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;I used to tear through several books at a time. I&amp;#39;d collect and organize as many as I could get my hands on and keep them in as pristine condition as possible.&lt;/p&gt;

&lt;p&gt;My dad loved comics and sci-fi, so I started there. Then, I became interested in pop-science biology and cosmology. In school, I studied computer science and comparative religion. At some point after college, I exhausted the genres I was interested in.&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;I used to tear through several books at a time. I&amp;#39;d collect and organize as many as I could get my hands on and keep them in as pristine condition as possible.&lt;/p&gt;

&lt;p&gt;My dad loved comics and sci-fi, so I started there. Then, I became interested in pop-science biology and cosmology. In school, I studied computer science and comparative religion. At some point after college, I exhausted the genres I was interested in.&lt;/p&gt;

&lt;p&gt;Not having something to read was frustrating, but nothing I picked up would hold my interest. Eventually, I got tired of lugging dozens of boxes of books around and sold them all back to Amazon. &lt;/p&gt;

&lt;p&gt;Last Christmas, I got a 3rd generation Kindle from my wife. Suddenly my library was infinite and accessible anywhere. I started reading the &lt;em&gt;Song of Ice and Fire&lt;/em&gt; books in preparation for the HBO series and discovered something rather amazing about the Kindle. Because the Kindle allows different font face and size settings, it does keep a page count, rather it shows your relative position in the book with highlighted dots. This means the 1200 page fantasy novel that I would have found daunting and awkward to carry around is suddenly small and portable. The mental weight of all those pages was reduced to &amp;quot;do I want to read the next page.&amp;quot;&lt;/p&gt;

&lt;p&gt;I read a lot of long books this year, mostly fantasy, some sci-fi and some steampunk. I decided to check Amazon for the actual printed page lengths of these books.&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Title&lt;/th&gt;
&lt;th&gt;Pages&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;A Storm of Swords&lt;/td&gt;
&lt;td&gt;1216&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;A Feast for Crows&lt;/td&gt;
&lt;td&gt;784&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;A Dance with Dragons&lt;/td&gt;
&lt;td&gt;1040&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;The Windup Girl&lt;/td&gt;
&lt;td&gt;300&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;The Half-Made World&lt;/td&gt;
&lt;td&gt;480&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;The Magicians&lt;/td&gt;
&lt;td&gt;416&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;The Magician King&lt;/td&gt;
&lt;td&gt;416&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;The Black Company&lt;/td&gt;
&lt;td&gt;320&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Shadows Linger&lt;/td&gt;
&lt;td&gt;319&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;The White Rose&lt;/td&gt;
&lt;td&gt;320&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;The Name of the Wind&lt;/td&gt;
&lt;td&gt;672&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;The Dresden Files: Storm Front&lt;/td&gt;
&lt;td&gt;384&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Old Man&amp;#39;s War&lt;/td&gt;
&lt;td&gt;320&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Wise Man&amp;#39;s Fear&lt;/td&gt;
&lt;td&gt;993&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;The Hunger Games&lt;/td&gt;
&lt;td&gt;384&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Catching Fire&lt;/td&gt;
&lt;td&gt;391&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;ul&gt;
&lt;li&gt;Total Pages: &lt;strong&gt;8755&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Average Pages per Day: &lt;strong&gt;23.9&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Experiment: Particle Rider</title>
    <link rel="alternate" href="/2011/11/30/particle-rider-experiment.html"/>
    <id>/2011/11/30/particle-rider-experiment.html</id>
    <published>2011-11-30T00:00:00-08:00</published>
    <updated>2011-11-30T00:00:00-08:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;Here&amp;#39;s a little particle system I built to experiment with &lt;a href="http://paperjs.org/"&gt;Paper.js&lt;/a&gt;. Move the mouse to draw a path and watch as the particles follow it. Trapping the particles in infinite loops is fun.&lt;/p&gt;

&lt;p&gt;&lt;a href="/projects/particle-rider.html"&gt;&lt;img src="http://src.sencha.io/-30/http://awardwinningfjords.com/projects/particle-rider/particle-rider.png"&gt;&lt;/a&gt;&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;Here&amp;#39;s a little particle system I built to experiment with &lt;a href="http://paperjs.org/"&gt;Paper.js&lt;/a&gt;. Move the mouse to draw a path and watch as the particles follow it. Trapping the particles in infinite loops is fun.&lt;/p&gt;

&lt;p&gt;&lt;a href="/projects/particle-rider.html"&gt;&lt;img src="http://src.sencha.io/-30/http://awardwinningfjords.com/projects/particle-rider/particle-rider.png"&gt;&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Just Launched: The License Lab</title>
    <link rel="alternate" href="/2011/11/03/just-launched-thelicenselab.html"/>
    <id>/2011/11/03/just-launched-thelicenselab.html</id>
    <published>2011-11-03T00:00:00-08:00</published>
    <updated>2011-11-03T00:00:00-08:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;My first project, that I can talk about, with &lt;a href="http://weareinstrument.com"&gt;Instrument&lt;/a&gt; has just launched. &lt;a href="http://licenselab.com"&gt;The License Lab&lt;/a&gt; is a searchable, music catalog which can be licensed for a variety of uses. Vistors can browse and preview hundreds of available songs. Registered users can organize songs into playlists and share them with others.&lt;/p&gt;

&lt;p&gt;As the focus is on the songs, the heart of the website is the music search functionality which includes: type-ahead autocomplete search, graphical tuning knobs and filtering by genre and instruments.&lt;/p&gt;

&lt;p&gt;Go ahead and check it out!&lt;/p&gt;

&lt;p&gt;&lt;a href="http://licenselab.com/search/"&gt;&lt;img src="http://src.sencha.io/-30/http://awardwinningfjords.com/images/licenselab.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;</summary>
    <content type="html">&lt;p&gt;My first project, that I can talk about, with &lt;a href="http://weareinstrument.com"&gt;Instrument&lt;/a&gt; has just launched. &lt;a href="http://licenselab.com"&gt;The License Lab&lt;/a&gt; is a searchable, music catalog which can be licensed for a variety of uses. Vistors can browse and preview hundreds of available songs. Registered users can organize songs into playlists and share them with others.&lt;/p&gt;

&lt;p&gt;As the focus is on the songs, the heart of the website is the music search functionality which includes: type-ahead autocomplete search, graphical tuning knobs and filtering by genre and instruments.&lt;/p&gt;

&lt;p&gt;Go ahead and check it out!&lt;/p&gt;

&lt;p&gt;&lt;a href="http://licenselab.com/search/"&gt;&lt;img src="http://src.sencha.io/-30/http://awardwinningfjords.com/images/licenselab.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Many thanks to the following open-source projects:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://flask.pocoo.org/"&gt;Flask&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sproutcore/sproutcore20"&gt;Sproutcore 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://jplayer.org/"&gt;jPlayer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/balupton/History.js/"&gt;History.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Just Launched: Metalab Design v4</title>
    <link rel="alternate" href="/2011/09/11/just-launched-metalab-v4.html"/>
    <id>/2011/09/11/just-launched-metalab-v4.html</id>
    <published>2011-09-11T00:00:00-08:00</published>
    <updated>2011-09-11T00:00:00-08:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;I&amp;#39;m happy to announce the latest version of the Metalab Design website is live! I worked on the initial development, interaction and code. Then &lt;a href="http://twitter.com/#!/alibosworth"&gt;Ali Bosworth&lt;/a&gt; and &lt;a href="http://twitter.com/#!/jasonswebster"&gt;Jason Webster&lt;/a&gt;, of &lt;a href="http://www.getflow.com/"&gt;Flow&lt;/a&gt; fame, did the hard work of polishing the animations and getting things looking great cross-browser.&lt;/p&gt;

&lt;p&gt;Check it out!&lt;/p&gt;

&lt;p&gt;&lt;a href="http://metalabdesign.com"&gt;&lt;img src="http://src.sencha.io/-30/http://awardwinningfjords.com/images/metalab.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;</summary>
    <content type="html">&lt;p&gt;I&amp;#39;m happy to announce the latest version of the Metalab Design website is live! I worked on the initial development, interaction and code. Then &lt;a href="http://twitter.com/#!/alibosworth"&gt;Ali Bosworth&lt;/a&gt; and &lt;a href="http://twitter.com/#!/jasonswebster"&gt;Jason Webster&lt;/a&gt;, of &lt;a href="http://www.getflow.com/"&gt;Flow&lt;/a&gt; fame, did the hard work of polishing the animations and getting things looking great cross-browser.&lt;/p&gt;

&lt;p&gt;Check it out!&lt;/p&gt;

&lt;p&gt;&lt;a href="http://metalabdesign.com"&gt;&lt;img src="http://src.sencha.io/-30/http://awardwinningfjords.com/images/metalab.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2&gt;Colophon&lt;/h2&gt;

&lt;p&gt;A lot of technology went into building this site. Here&amp;#39;s a quick rundown:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://middlemanapp.com"&gt;Middleman&lt;/a&gt; - Static development framework&lt;/li&gt;
&lt;li&gt;&lt;a href="http://slim-lang.com/"&gt;Slim&lt;/a&gt; - Whitespace-aware templating language&lt;/li&gt;
&lt;li&gt;&lt;a href="http://jashkenas.github.com/coffee-script/"&gt;CoffeeScript&lt;/a&gt; - Whitespace-aware Javascript&lt;/li&gt;
&lt;li&gt;&lt;a href="http://compass-style.org/"&gt;Sass and Compass&lt;/a&gt; - Whitespace-aware CSS preprocessor&lt;/li&gt;
&lt;li&gt;&lt;a href="http://transformjs.strobeapp.com/"&gt;TransformJS&lt;/a&gt; - jQuery CSS3 Transforms&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Middleman 2.0</title>
    <link rel="alternate" href="/2011/08/08/middleman-2-0.html"/>
    <id>/2011/08/08/middleman-2-0.html</id>
    <published>2011-08-08T00:00:00-08:00</published>
    <updated>2011-08-08T00:00:00-08:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;Middleman 2.0 is a huge release featuring a refactored core, a unified source folder, a unified command line, tons of new features and a &lt;a href="http://middlemanapp.com"&gt;full documentation website&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As always, install via RubyGems:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gem install middleman
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For more information, read the &lt;a href="http://middlemanapp.com/guides/getting-started"&gt;Getting Started&lt;/a&gt; guide.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s an overview of everything that&amp;#39;s changed.&lt;/p&gt;

&lt;p&gt;</summary>
    <content type="html">&lt;p&gt;Middleman 2.0 is a huge release featuring a refactored core, a unified source folder, a unified command line, tons of new features and a &lt;a href="http://middlemanapp.com"&gt;full documentation website&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As always, install via RubyGems:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gem install middleman
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For more information, read the &lt;a href="http://middlemanapp.com/guides/getting-started"&gt;Getting Started&lt;/a&gt; guide.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s an overview of everything that&amp;#39;s changed.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2&gt;Unified Source Folder&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;public&lt;/code&gt; and &lt;code&gt;views&lt;/code&gt; folders have been combined into a single &lt;code&gt;source&lt;/code&gt; folder which contains all of your files. Use the &lt;a href="http://middlemanapp.com/guides/migrating"&gt;migration tool&lt;/a&gt; to quickly update your folder structure, or manually combine the folders.&lt;/p&gt;

&lt;h2&gt;Unified Command&lt;/h2&gt;

&lt;p&gt;The old commands, &lt;code&gt;mm-init&lt;/code&gt;, &lt;code&gt;mm-server&lt;/code&gt; and &lt;code&gt;mm-build&lt;/code&gt;, have been combined into a single &lt;code&gt;middleman&lt;/code&gt; command with the following subcommands:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;middleman init&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;middleman server&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;middleman build&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;New Features&lt;/h2&gt;

&lt;p&gt;Here are the most interesting new features of Middleman 2.0.&lt;/p&gt;

&lt;h3&gt;Sprockets&lt;/h3&gt;

&lt;p&gt;Sprockets is a tool for Javascript dependency management. Using Sprockets you can include other Javascript and CoffeeScript files into your scripts. &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//= require &amp;quot;another_file&amp;quot;

function my_javascript() {

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Read more in the &lt;a href="http://middlemanapp.com/guides/coffeescript-sprockets"&gt;Javascript, CoffeeScript and Sprockets&lt;/a&gt; guide.&lt;/p&gt;

&lt;h3&gt;Dynamic Pages&lt;/h3&gt;

&lt;p&gt;Dynamic pages allow you to generate HTML for files which share a single template. &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[&amp;quot;tom&amp;quot;, &amp;quot;dick&amp;quot;, &amp;quot;harry&amp;quot;].each do |name|
  page &amp;quot;/about/#{name}.html&amp;quot;, :proxy =&amp;gt; &amp;quot;/about/template.html&amp;quot; do
    @person_name = name
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Read more in the &lt;a href="http://middlemanapp.com/guides/dynamic-pages"&gt;Dynamic Pages&lt;/a&gt; guide.&lt;/p&gt;

&lt;h3&gt;Pretty URLs&lt;/h3&gt;

&lt;p&gt;Pretty URLs (aka Directory Indexes) let you generate folders for each HTML file in your project which results in a pretty, extension-less URL in common web-servers.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;activate :directory_indexes
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now &lt;code&gt;source/my-page.html&lt;/code&gt; will generate &lt;code&gt;build/my-page/index.html&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Read more in the &lt;a href="http://middlemanapp.com/guides/pretty-urls"&gt;Pretty URLs&lt;/a&gt; guide.&lt;/p&gt;

&lt;h3&gt;YAML Frontmatter&lt;/h3&gt;

&lt;p&gt;YAML Frontmatter lets you add in-template variables at the top of a page, which are also available in the layout, and to configure which layout the page uses.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
layout: &amp;quot;login&amp;quot;
page_name: &amp;quot;Login&amp;quot;
---

&amp;lt;h1&amp;gt;&amp;lt;%= data.page.page_name %&amp;gt;&amp;lt;/h1&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above &lt;code&gt;login.html.erb&lt;/code&gt; file will be rendered using the &lt;code&gt;login.erb&lt;/code&gt; layout file.&lt;/p&gt;

&lt;p&gt;Read more in the &lt;a href="http://middlemanapp.com/guides/individual-page-configuration"&gt;Individual Page Configuration&lt;/a&gt; guide.&lt;/p&gt;

&lt;h3&gt;LiveReload&lt;/h3&gt;

&lt;p&gt;By default, LiveReload will monitor your &lt;code&gt;config.rb&lt;/code&gt; file and automatically restart the Middleman server if it changes. This means, activating new features no longer requires a server restart.&lt;/p&gt;

&lt;p&gt;In addition, you can have LiveReload monitor your project files as well and instruct the web-browser to reload when they change using the &lt;a href="https://github.com/mockko/livereload#readme"&gt;LiveReload Extension&lt;/a&gt; and the &lt;code&gt;--livereload&lt;/code&gt; flag.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;middleman server --livereload
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Migrating to 2.0&lt;/h2&gt;

&lt;p&gt;Updating old projects to Middleman 2.0 is very easy. Simply use the new &lt;code&gt;migrate&lt;/code&gt; command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;middleman migrate
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Read more about the migration edge cases in the &lt;a href="http://middlemanapp.com/guides/migrating"&gt;Migrating to Middleman 2.0&lt;/a&gt; guide.&lt;/p&gt;

&lt;h2&gt;Support&lt;/h2&gt;

&lt;p&gt;If there are any issues or regressions, please log bugs on the &lt;a href="https://github.com/middleman/middleman/issues"&gt;Github Issue Tracker&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>CoffeeScript-specific Style Guide</title>
    <link rel="alternate" href="/2011/05/13/coffeescript-specific-style-guide.html"/>
    <id>/2011/05/13/coffeescript-specific-style-guide.html</id>
    <published>2011-05-13T00:00:00-08:00</published>
    <updated>2011-05-13T00:00:00-08:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;First, go buy &lt;a href="http://twitter.com/topfunky"&gt;@topfunky&lt;/a&gt;&amp;#39;s new &lt;a href="https://peepcode.com/products/coffeescript"&gt;CoffeeScript PeepCode screencast&lt;/a&gt;. It&amp;#39;s wonderful. All done? Okay.&lt;/p&gt;

&lt;p&gt;One of the most interesting pieces of information to me, as someone who&amp;#39;s been writing a lot of CoffeeScript and has written a ton of Javascript in the past, is the subtle tweaks to style in CoffeeScript. Here are some quick preferred styles.&lt;/p&gt;

&lt;p&gt;</summary>
    <content type="html">&lt;p&gt;First, go buy &lt;a href="http://twitter.com/topfunky"&gt;@topfunky&lt;/a&gt;&amp;#39;s new &lt;a href="https://peepcode.com/products/coffeescript"&gt;CoffeeScript PeepCode screencast&lt;/a&gt;. It&amp;#39;s wonderful. All done? Okay.&lt;/p&gt;

&lt;p&gt;One of the most interesting pieces of information to me, as someone who&amp;#39;s been writing a lot of CoffeeScript and has written a ton of Javascript in the past, is the subtle tweaks to style in CoffeeScript. Here are some quick preferred styles.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s a simple piece of jQuery and a test case in plain Javascript.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var elem = $(&amp;quot;#myselector&amp;quot;).addClass(&amp;quot;testing&amp;quot;);
expect(elem.id).toEqual(&amp;quot;myselector&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Naive Conversion to CoffeeScript:&lt;/h2&gt;

&lt;p&gt;Simply removing semi-colons and the &lt;tt&gt;var&lt;/tt&gt; keyword isn&amp;#39;t really enough.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;elem = $(&amp;quot;#myselector&amp;quot;).addClass(&amp;quot;testing&amp;quot;)
expect(elem.id).toEqual(&amp;quot;myselector&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Lisp-y Function Grouping/Calling &amp;amp; Omitting Final parentheses&lt;/h2&gt;

&lt;p&gt;First, remember that CoffeeScript doesn&amp;#39;t require parentheses when calling functions. These two lines are rendered identically:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;myfunc(&amp;quot;string&amp;quot;)
myfunc &amp;quot;string&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The second version, without parentheses, is the preferred style. The general rule is: &lt;strong&gt;the final method call in a chain should omit the parentheses&lt;/strong&gt;. The original, naive conversion can become:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;elem = $(&amp;quot;#myselector&amp;quot;).addClass &amp;quot;testing&amp;quot;
expect(elem.id).toEqual &amp;quot;myselector&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, CoffeeScript prefers to use parentheses to group methods, rather than group method parameters. This subtle difference is best illustrated by the final code. I think seeing the jQuery &lt;tt&gt;$&lt;/tt&gt; without a parenthesis was off-putting at first, but I&amp;#39;m slowly learning to like it. The resulting code feels more math-y (or Lisp-y).&lt;/p&gt;

&lt;h2&gt;Preferred Style&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;elem = ($ &amp;quot;#myselector&amp;quot;).addClass &amp;quot;testing&amp;quot;
(expect elem.id).toEqual &amp;quot;myselector&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
</content>
  </entry>
  <entry>
    <title>Javascript Microframeworks and The Future</title>
    <link rel="alternate" href="/2011/05/09/javascript-microframeworks-and-the-future.html"/>
    <id>/2011/05/09/javascript-microframeworks-and-the-future.html</id>
    <published>2011-05-09T00:00:00-08:00</published>
    <updated>2011-05-09T00:00:00-08:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;Last week at &lt;a href="http://2011.jsconf.us/"&gt;jsconf&lt;/a&gt;, &lt;a href="http://mir.aculo.us/"&gt;Thomas Fuchs&lt;/a&gt; continued his argument for small frameworks with the release of &lt;a href="http://microjs.com/"&gt;MicroJS&lt;/a&gt; which acts as a listing of tiny, single-purpose libraries. The idea being that freedom and choice, combined with optimizing for size will result in a better product than using a larger, monolithic &amp;quot;framework.&amp;quot;&lt;/p&gt;

&lt;p&gt;But what are we talking about when we say &amp;quot;framework&amp;quot; and what kind of applications can be built with microframeworks?  &lt;/p&gt;

&lt;p&gt;</summary>
    <content type="html">&lt;p&gt;Last week at &lt;a href="http://2011.jsconf.us/"&gt;jsconf&lt;/a&gt;, &lt;a href="http://mir.aculo.us/"&gt;Thomas Fuchs&lt;/a&gt; continued his argument for small frameworks with the release of &lt;a href="http://microjs.com/"&gt;MicroJS&lt;/a&gt; which acts as a listing of tiny, single-purpose libraries. The idea being that freedom and choice, combined with optimizing for size will result in a better product than using a larger, monolithic &amp;quot;framework.&amp;quot;&lt;/p&gt;

&lt;p&gt;But what are we talking about when we say &amp;quot;framework&amp;quot; and what kind of applications can be built with microframeworks?  &lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2&gt;The Two Types of HTML Applications&lt;/h2&gt;

&lt;p&gt;It is useful to denominate the two kinds of web applications that exist on the web. First, there is the traditional &amp;quot;Progressive Enhancement&amp;quot; apps. These use Javascript to bring additional interaction, animation and life to static HTML/CSS. The benefit is that even if the client has problems with Javascript due to some esoteric IE bug, or their phone doesn&amp;#39;t support Javascript, that they can still interact with the site normally. The majority of large sites using jQuery act in this way. They output HTML from the backend and then jQuery adds interaction.&lt;/p&gt;

&lt;p&gt;The second type is the MVC application. These frameworks start from a blank slate and use their own Views (templates) to build up the components of an app. This view layer certainly adds complexity (and lines of code) to the framework, but the result is usually a more Desktop-like user experience. The big frameworks of this type are &lt;a href="http://blog.sproutcore.com/"&gt;Sproutcore&lt;/a&gt;, &lt;a href="http://cappuccino.org/"&gt;Cappuccino&lt;/a&gt; and to a lesser degree, &lt;a href="http://documentcloud.github.com/backbone/"&gt;Backbone.js&lt;/a&gt;. &lt;a href="http://skilldrick.co.uk/2011/05/javascript-and-the-end-of-progressive-enhancement/comment-page-1/"&gt;Nick Morgan argues that these types of app are the future&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We&amp;#39;ll need to keep in mind both types of applications as we think about optimization. What benefits one might not benefit the other and it&amp;#39;s important to figure out the kind of app a person is talking about when they are discussing &amp;quot;microframeworks.&amp;quot;&lt;/p&gt;

&lt;h2&gt;The Problem&lt;/h2&gt;

&lt;p&gt;On the web, speed is king. Yahoo and Amazon have shown that every additional millisecond it takes to load your page has a direct result in decreasing sales. Right now, the biggest bottleneck is the way javascript loading blocks rendering in the browser. The modern web craves javascript. The browser is just an empty shell until it is scripted to life. This means the entire stack of web interactivity has to be written in Javascript and it has to be transferred to every single client who views the site. There are 3 solutions to this problem:&lt;/p&gt;

&lt;h3&gt;The Great Cache in the Sky&lt;/h3&gt;

&lt;p&gt;jQuery is now present on about 44% of websites. jQuery also weighs about 130k (before minification and gzipping). Which means after just a little casual browsing, you&amp;#39;ve probably downloaded jQuery several times. Browsers cache Javascript based on which domain it was downloaded from, which means your browser is actually storing 1 copy of jQuery for every site you visited that used it. And, even though you have a dozen copies already, it&amp;#39;s going to download it again when you change to a new site.&lt;/p&gt;

&lt;p&gt;The jQuery project and Google both offer to serve jQuery from their respective CDNs. These CDNs are heavily optimized to get clients a copy of jQuery as quickly as possible and they have the added bonus of using a consistent URL. That means if domaina.com and domainb.com both point to Google&amp;#39;s copy of jQuery, then they will share the same file in the cache. This means domainb.com and all subsequent domains you visit using the Google CDN copy of jQuery won&amp;#39;t have to be delayed waiting for jQuery to download, it will already be in the cache.&lt;/p&gt;

&lt;p&gt;This is a great idea. With jQuery on 44% of the web, it&amp;#39;s time to admit that it is the &amp;quot;standard library&amp;quot; of the web. Personally, I think Google Chrome should ship with the last dozen versions of jQuery embedded and have an option to prefer the local copies over downloading a new one. The standard library should ship with the language (in the browser). I think this will happen some day, but until then...&lt;/p&gt;

&lt;h3&gt;Load Asynchronously&lt;/h3&gt;

&lt;p&gt;There are a handful of popular new tools for loading your Javascript without blocking such as LABjs, RequireJS, StealJS, yepnope and script.js. Of course, these tools are themselves written in Javascript and must be first loaded in a blocking fashion. However, they are usually small enough that this isn&amp;#39;t a real issue. Once the script loader is ready, it will begin pulling in your other Javascript files.&lt;/p&gt;

&lt;p&gt;Asynchronous script loading works great for apps using &amp;quot;progressive enhancement&amp;quot;, you can off-load almost all the Javascript, including jQuery, until later and when it finally loads the page simply gets a little nicer and interactive. However, to the user it looks like the page is loaded and they can begin interacting immediately.&lt;/p&gt;

&lt;p&gt;&amp;quot;MVC Applications&amp;quot; require more complicated organization and packaging to work asynchronously. They need to know which parts of the app can be loaded later and which are needed immediately. The larger frameworks, like &lt;a href="http://blog.sproutcore.com/"&gt;Sproutcore&lt;/a&gt; and &lt;a href="http://javascriptmvc.com/"&gt;JavascriptMVC&lt;/a&gt;, have already solved this problem, but it does add some conceptual overhead.&lt;/p&gt;

&lt;h3&gt;Use Less Code&lt;/h3&gt;

&lt;p&gt;Simply put: send less data to the client. Sounds easy? Remember that jQuery is 130k before you even start writing your own code. This is where Thomas Fuchs (and &lt;a href="http://microjs.com/"&gt;MicroJS&lt;/a&gt;) come in. He argues that &amp;quot;frameworks&amp;quot; are too big and include stuff that you probably don&amp;#39;t need. He, and others, seem purposefully vague about which framework they are rebelling against, but let&amp;#39;s be honest: it&amp;#39;s jQuery.&lt;/p&gt;

&lt;p&gt;I&amp;#39;ve built some large applications of both the Progressive Enhancement and MVC varieties and initially I couldn&amp;#39;t understand how a seasoned developer could possibly argue that glueing a dozen plugins together is better than a consistent application framework. Tom Dale, of the Sproutcore team, &lt;a href="http://tomdale.net/2011/04/imagine-a-beowulf-cluster-of-javascript-frameworks/"&gt;was similarly flabbergasted&lt;/a&gt;. While I agree with everything Tom writes in that article, I think he got hung up on terminology. Thomas Fuchs isn&amp;#39;t arguing against Sproutcore, he is covertly arguing against jQuery. I, Thomas Reynolds (let&amp;#39;s call this the Mexican Standoff of Javacript Toms), personally love Sproutcore and so I&amp;#39;ll spend the rest of this article talking about replacing jQuery for Progressively Enhanced apps.&lt;/p&gt;

&lt;h2&gt;Replacing jQuery Piece by Piece&lt;/h2&gt;

&lt;p&gt;What is jQuery? Do most developers use everything available? Here are the core functions and their current file sizes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Selector Engine (33k)&lt;/li&gt;
&lt;li&gt;DOM Manipulation (21k)&lt;/li&gt;
&lt;li&gt;DOM Attributes (16k)&lt;/li&gt;
&lt;li&gt;DOM Data Storage (9k)&lt;/li&gt;
&lt;li&gt;Core Helpers and Plugin Framework: $.each, $.extend, etc (23k)&lt;/li&gt;
&lt;li&gt;CSS reading/writing/animating (26k)&lt;/li&gt;
&lt;li&gt;AJAX (26k)&lt;/li&gt;
&lt;li&gt;Events (32k)&lt;/li&gt;
&lt;li&gt;Deferreds (5k)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Take a look at that list and then take a look at &lt;a href="http://microjs.com/"&gt;MicroJS&lt;/a&gt;. Look familiar? The majority of these micro libraries take aim at a specific portion of jQuery and attempt to do it in a smaller file size. Sound great? If you&amp;#39;re optimizing for size it does, but let me issue a word of warning.&lt;/p&gt;

&lt;p&gt;jQuery is used on 44% of the web. It is better tested, has more users and has better browser support than any other framework. It is a very well organized project which is continuing to improve and increase performance on every release. I agree with Yehuda Katz, the most important piece of any framework is the size, age and knowledge of its community. Therefore, I believe these new micro libraries will be forced to re-learn the same lessons (whether it be browser support or speed optimization) that jQuery has already solved.&lt;/p&gt;

&lt;h2&gt;Enter Ender.js&lt;/h2&gt;

&lt;p&gt;&lt;a href="http://ender.no.de/"&gt;Ender.js&lt;/a&gt; is a framework framework. It attempts to provide a scaffold roughly shaped like jQuery with places to plugin micro libraries of your choice to fill in the features. Then Ender.js will glue those parts together and produce either a single output file or a file which loads each component asynchronously.&lt;/p&gt;

&lt;p&gt;The default jQuery-like bundle is called &amp;quot;jeesh&amp;quot; and includes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Selector Engine (Qwery)&lt;/li&gt;
&lt;li&gt;DOM Manipulation (Bonzo)&lt;/li&gt;
&lt;li&gt;DOM Attributes (Bonzo)&lt;/li&gt;
&lt;li&gt;DOM Data Storage (Bonzo)&lt;/li&gt;
&lt;li&gt;Core Helpers and Plugin Framework: $.each, $.extend, etc (Underscore &amp;amp; Klass)&lt;/li&gt;
&lt;li&gt;CSS reading/writing/animating (Émile)&lt;/li&gt;
&lt;li&gt;AJAX (Reqwest)&lt;/li&gt;
&lt;li&gt;Events (Bean)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These pieces fit together nicely and create an almost drop-in replacement for jQuery. The edges are a little rough and you will have to rewrite some code to use it. &lt;a href="http://www.dustindiaz.com/"&gt;Dustin Diaz&lt;/a&gt; wrote almost all of theses default libraries, so atleast there is some consistency. As Ender.js gets more popular and more libraries are integrated which weren&amp;#39;t written by Dustin, I expect the API will get more and more awkward. As I said above, while Dustin is a very smart person (and he&amp;#39;s had help from Thomas Fuchs as well), neither can match jQuery&amp;#39;s maturity, test suite and institutional knowledge.&lt;/p&gt;

&lt;p&gt;Still, if you&amp;#39;re optimizing for size on a Progressively Enhanced app, Ender.js is a nice fit. If you&amp;#39;re optimizing for consistency and the ability to hire and bring new developers up-to-speed quickly, then you should probably stick with jQuery.  &lt;/p&gt;

&lt;h3&gt;Anecdotal &amp;quot;Evidence&amp;quot;&lt;/h3&gt;

&lt;p&gt;I&amp;#39;m working on a small Progressively Enhanced portfolio site. I&amp;#39;ve completed the homepage, which uses 2 &amp;quot;plugins&amp;quot; for some slideshows and some helper functions. The initial build was with jQuery and the jQueryUI widget factory. Minified: &lt;u&gt;109k&lt;/u&gt;, the majority of that being jQuery which I wasn&amp;#39;t really using that many features of.&lt;/p&gt;

&lt;p&gt;Next, I ported the site to JavascriptMVC which has a very nice dependency management system and only pulls in the pieces you need (and jQuery). The coding-style was nicer, the code modularized and the minified output was: &lt;u&gt;110k&lt;/u&gt;. Makes sense, it has all of jQuery plus a 1k of glue code (Class system + Controllers). I&amp;#39;d really like to see JavascriptMVC (and Sproutcore too), break up jQuery into it&amp;#39;s components and rely on those directly. Their dependency management systems can handle this and it should reduce the file system for relatively simple apps.&lt;/p&gt;

&lt;p&gt;Finally, I used Ender with Bonzo, Émile, Bean, Qwery and &lt;a href="http://extralogical.net/projects/firmin/"&gt;Firmin&lt;/a&gt;. I had to change some stuff around and basically invent a micro controller system, but the minified output was only: &lt;u&gt;38k&lt;/u&gt;.&lt;/p&gt;

&lt;p&gt;So, not a surprise, when competing purely on size, microframeworks and Ender.js win. I didn&amp;#39;t really love the code I had to write for the Ender.js version and I don&amp;#39;t appreciate opening 4 different documentation pages to figure out the methods. Still, I&amp;#39;ll probably stick with it because the project has only a single developer, doesn&amp;#39;t require great IE compatibility and my primary goal is speed.&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;People are going to keep talking about microframeworks, but I don&amp;#39;t see jQuery&amp;#39;s usage decreasing at all. Developer Happiness should be the primary goal, but we can&amp;#39;t work on that until these technical issues of memory, cpu usage, gpu usage and blocking scripts are solved. They will be solved and looking back, these will feel like the dark ages.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s what I&amp;#39;m looking forward to in the &amp;quot;future.&amp;quot; I&amp;#39;d like to see an end-to-end framework written in CoffeeScript. Models, Views and Controllers are the same code and the decision whether to execute code on the client or the server can be optimized. Doing the same database requests? Optimize and cache it on the backend. Rendering the same views? Do it on the backend. I&amp;#39;d like to see the client open a connection to the node.js backend and pipeline scripts and data as needed. If something would be faster on the client side, build it into a module and pipe it to the client on demand.&lt;/p&gt;

&lt;p&gt;Honestly, I don&amp;#39;t think we&amp;#39;ll be waiting too much longer for such a system. A first step can be seen in Shopify&amp;#39;s &lt;a href="http://batmanjs.org/"&gt;batman.js&lt;/a&gt; which made a huge splash at jsconf. Property binding is huge (also at the heart of Sproutcore) and reduces the need for jQuery&amp;#39;s DOM manipulation hammer. Can&amp;#39;t wait to play with it!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Trigger CSS3 Animations with jQuery</title>
    <link rel="alternate" href="/2011/05/06/trigger-css3-animations-with-jquery.html"/>
    <id>/2011/05/06/trigger-css3-animations-with-jquery.html</id>
    <published>2011-05-06T00:00:00-08:00</published>
    <updated>2011-05-06T00:00:00-08:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;Did you know that jQuery 1.4.3 added a system for adding custom css attributes? For example, any normal style can be applied like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(elem).css({ background: &amp;#39;red&amp;#39; })
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But what about more complicated styles? Complicated polyfills and vendor-prefixed styles? What if you could add a custom handler for &lt;tt&gt;border-radius&lt;/tt&gt;? It&amp;#39;s pretty simple and I&amp;#39;ll show you a strawman example.&lt;/p&gt;

&lt;p&gt;</summary>
    <content type="html">&lt;p&gt;Did you know that jQuery 1.4.3 added a system for adding custom css attributes? For example, any normal style can be applied like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(elem).css({ background: &amp;#39;red&amp;#39; })
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But what about more complicated styles? Complicated polyfills and vendor-prefixed styles? What if you could add a custom handler for &lt;tt&gt;border-radius&lt;/tt&gt;? It&amp;#39;s pretty simple and I&amp;#39;ll show you a strawman example.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$.cssHooks[&amp;#39;pirateBackground&amp;#39;] = {
  get: function(elem, computed, extra) {
    return &amp;quot;yaarrr&amp;quot;;
  },
  set: function(elem, value) {
    elem.style.background = value + &amp;quot; url(pirates.png)&amp;quot;;
  }
};

$(elem).css({ pirateBackground: &amp;#39;red&amp;#39; });
// elem now has a red background and the pirates.png pattern

$(elem).css(&amp;#39;pirateBackground&amp;#39;) == &amp;quot;yaarrr&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Included in David DeSandro&amp;#39;s excellent &lt;a href="http://isotope.metafizzy.co/"&gt;Isotope&lt;/a&gt; library are &lt;a href="https://github.com/desandro/isotope/blob/a2a238968347199842dd7e2d552741d5a63c90b9/jquery.isotope.js"&gt;csshooks for CSS3 scale and translate&lt;/a&gt;. These hooks correctly use the fast 3d-transforms if available. I&amp;#39;ve included the full implementation below, but the important part is that you can include the following gist and use it like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Double the size using CSS3 transform scale 
$(elem).css({ scale: [2] })

// Move the element 100px right and 200px down
$(elem).css({ translate: [ 100, 200 ] })
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Demo&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$(&amp;#39;.2x&amp;#39;).click(function() {
  $(&amp;#39;.square&amp;#39;).css({ scale: [2] })
});

$(&amp;#39;.1x&amp;#39;).click(function() {
  $(&amp;#39;.square&amp;#39;).css({ scale: [1] })
});

$(&amp;#39;.right&amp;#39;).click(function() {
  $(&amp;#39;.square&amp;#39;).css({ translate: [150, 0] })
});

$(&amp;#39;.left&amp;#39;).click(function() {
  $(&amp;#39;.square&amp;#39;).css({ translate: [25, 0] })
});
&lt;/code&gt;&lt;/pre&gt;

&lt;iframe width="300" height="450" src="/images/iso/demo.html"&gt;&lt;/iframe&gt;

&lt;h2&gt;Full Implementation&lt;/h2&gt;

&lt;p&gt;Download: &lt;a href="https://gist.github.com/959860"&gt;https://gist.github.com/959860&lt;/a&gt;&lt;/p&gt;

&lt;script src="https://gist.github.com/959860.js?file=isoTransform.js"&gt;&lt;/script&gt;
</content>
  </entry>
  <entry>
    <title>jQuery.Deferred Image Preloader</title>
    <link rel="alternate" href="/2011/05/03/jquerydeferred-image-preloader.html"/>
    <id>/2011/05/03/jquerydeferred-image-preloader.html</id>
    <published>2011-05-03T00:00:00-08:00</published>
    <updated>2011-05-03T00:00:00-08:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;A little wrapper around &lt;tt&gt;&lt;a href="http://api.jquery.com/category/deferred-object/"&gt;jQuery.Deferred&lt;/a&gt;&lt;/tt&gt; for an image preloader.&lt;/p&gt;

&lt;p&gt;</summary>
    <content type="html">&lt;p&gt;A little wrapper around &lt;tt&gt;&lt;a href="http://api.jquery.com/category/deferred-object/"&gt;jQuery.Deferred&lt;/a&gt;&lt;/tt&gt; for an image preloader.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var loadImageCache = {}
var loadImage = function(imageSrc) {
  if (typeof loadImageCache[imageSrc] === &amp;quot;undefined&amp;quot;) {
    deferred = $.Deferred();

    preloader         = new Image();
    preloader.onload  = function() { deferred.resolve(this.src) };
    preloader.onerror = function() { deferred.reject(this.src)  };
    preloader.src     = imageSrc;

    loadImageCache[imageSrc] = deferred;
  }

  return loadImageCache[imageSrc];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Requires jQuery 1.5 or newer:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;loadImage(&amp;quot;http://my/image.jpg&amp;quot;).then(function(url) {
  alert(url + &amp;#39; is preloaded&amp;#39;);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The code will only preload each url once, you can reuse the deferred object and add additional &lt;tt&gt;then&lt;/tt&gt; callbacks to that object anywhere in your code.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Just Launched: PixelUnion v2</title>
    <link rel="alternate" href="/2011/04/26/just-launched-pixelunion-v2.html"/>
    <id>/2011/04/26/just-launched-pixelunion-v2.html</id>
    <published>2011-04-26T00:00:00-08:00</published>
    <updated>2011-04-26T00:00:00-08:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;A project I&amp;#39;ve been working on has just launched. Check out the release post from the Metalab blog below:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;iframe src="http://player.vimeo.com/video/22873653" width="500" height="281" frameborder="0"&gt;&lt;/iframe&gt;&lt;br /&gt;&lt;br /&gt;
About a year ago, we teamed up with &lt;a href="http://www.45royale.com/"&gt;45royale&lt;/a&gt; to create &lt;a href="http://pixelunion.net"&gt;Pixel Union&lt;/a&gt;, a premium Tumblr theme marketplace showcasing designs by some of the world’s best designers. It’s been immensely successful. What began as four themes dedicated to better showcasing photographs and videos has rapidly turned into a library of nearly twenty, multipurpose themes. &lt;br /&gt;&lt;br /&gt;
</summary>
    <content type="html">&lt;p&gt;A project I&amp;#39;ve been working on has just launched. Check out the release post from the Metalab blog below:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;iframe src="http://player.vimeo.com/video/22873653" width="500" height="281" frameborder="0"&gt;&lt;/iframe&gt;&lt;br /&gt;&lt;br /&gt;
About a year ago, we teamed up with &lt;a href="http://www.45royale.com/"&gt;45royale&lt;/a&gt; to create &lt;a href="http://pixelunion.net"&gt;Pixel Union&lt;/a&gt;, a premium Tumblr theme marketplace showcasing designs by some of the world’s best designers. It’s been immensely successful. What began as four themes dedicated to better showcasing photographs and videos has rapidly turned into a library of nearly twenty, multipurpose themes. &lt;br /&gt;&lt;br /&gt;
It’s with a whole lot of pride that we announce today the launch of Pixel Union 2.0. We’ve redesigned the site, we’ve packed it full of new themes and, over the next two months, we’re going to be releasing one new theme each week. Check out &lt;a href="http://pixelunion.net/"&gt;the new site&lt;/a&gt; and stay tuned by following Pixel Union &lt;a href="http://twitter.com/pixelunion"&gt;on Twitter&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;
&lt;strong&gt;- &lt;a href="http://blog.metalabdesign.com/post/4966260447/introducing-pixel-union-2-0-about-a-year-ago-we"&gt;Metalab Blog&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
  </entry>
  <entry>
    <title>Just Give a Damn About Something</title>
    <link rel="alternate" href="/2011/04/26/just-give-a-damn-about-something.html"/>
    <id>/2011/04/26/just-give-a-damn-about-something.html</id>
    <published>2011-04-26T00:00:00-08:00</published>
    <updated>2011-04-26T00:00:00-08:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;I just want everyone to care about something. [...] I just think it&amp;#39;s sad when people seem to have no passion in life.
&lt;strong&gt;- Marco Arment&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</summary>
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;I just want everyone to care about something. [...] I just think it&amp;#39;s sad when people seem to have no passion in life.
&lt;strong&gt;- Marco Arment&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
  </entry>
  <entry>
    <title>CrossFit is for Nerds</title>
    <link rel="alternate" href="/2011/04/24/crossfit-is-for-nerds.html"/>
    <id>/2011/04/24/crossfit-is-for-nerds.html</id>
    <published>2011-04-24T00:00:00-08:00</published>
    <updated>2011-04-24T00:00:00-08:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;Yesterday I competed in the CrossFit Games Open WOD 11.5 at CrossFit HEL (in Portland, Oregon). To the majority of my readers, those words mean absolutely nothing. So, let&amp;#39;s start at the beginning.&lt;/p&gt;

&lt;h2&gt;What is CrossFit?&lt;/h2&gt;

&lt;p&gt;CrossFit is an fitness program that attempts to improve your skill in the broadest range of physical abilities possible. Here is a short list of activities a random CrossFit workout might contain:&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;Yesterday I competed in the CrossFit Games Open WOD 11.5 at CrossFit HEL (in Portland, Oregon). To the majority of my readers, those words mean absolutely nothing. So, let&amp;#39;s start at the beginning.&lt;/p&gt;

&lt;h2&gt;What is CrossFit?&lt;/h2&gt;

&lt;p&gt;CrossFit is an fitness program that attempts to improve your skill in the broadest range of physical abilities possible. Here is a short list of activities a random CrossFit workout might contain:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Bodyweight Exercises (Pullups, pushups, etc)&lt;/li&gt;
&lt;li&gt;Olympic Weightlifting (Snatch, Clean &amp;amp; Jerk) &lt;/li&gt;
&lt;li&gt;Cardio/Metabolic Conditioning (Rowing, sprinting, jump rope)&lt;/li&gt;
&lt;li&gt;Gymnastic Movements (Handstands, gymnastics rings)&lt;/li&gt;
&lt;li&gt;Strongman Lifting (Flipping tires, Atlas stones)&lt;/li&gt;
&lt;li&gt;Strength Training (Heavy squats, benchpress)&lt;/li&gt;
&lt;li&gt;Russian Kettlebell Training&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here&amp;#39;s the catch. A typical CrossFit workout (or WOD) is very short (10-15 minutes on average) and combines the above in the most devious ways possible. For example, try running as hard as you can until you&amp;#39;re mind is fatigued, and THEN attempt a complex and technical movement like the Olympic Snatch.&lt;/p&gt;

&lt;h2&gt;Where do I CrossFit?&lt;/h2&gt;

&lt;p&gt;CrossFit is essentially a start-up incubator for Gyms. The main website posts a new workout every day. If you workout from home, you can do it in your garage and share your score in the comments. Over the past 5 years, thousands of small CrossFit gyms have popped up around the world. Most of these were founded by people who were working out in their garage and then decided to quit their boring job and run their own business. Initially, they and their new clients can follow the CrossFit.com workouts, but eventually they will start creating their own.&lt;/p&gt;

&lt;p&gt;Most of these gyms are run in small, garage-like buildings filled with barbells and weights. The limited space encourages small communities and direct interaction between the clients and the owners. They are the ultimate startup. Small, focused, unable to afford fancy offices, but dedicated to their small (but growing) group of users. It&amp;#39;s hard to describe the incredibly tight sense of community at every CrossFit gym (or &amp;quot;box&amp;quot;) I&amp;#39;ve visited. &lt;/p&gt;

&lt;p&gt;Interestingly, these gyms/communities follow &lt;a href="http://en.wikipedia.org/wiki/Dunbar&amp;#x27;s_number"&gt;Dunbar&amp;#39;s number&lt;/a&gt; pretty closely. About the time a gym nears 150 members, usually some segment will break off and start another gym to return the community to a smaller, more focused state.&lt;/p&gt;

&lt;h2&gt;Stats, Charts &amp;amp; Data-points&lt;/h2&gt;

&lt;p&gt;Finally, here is the reason why CrossFit is for Nerds. Every workout has a score and participants are encouraged to track every possible metric. And because there are so many possible workouts and combinations of exercises, there are a dizzying number of data-points. It also provides a sense of progress. If you&amp;#39;re trying to diet or hitting the treadmill at the gym, how do you know it&amp;#39;s working? Does anyone try to speed-up their running or do they just set the timer for 1 hour and wait it out? With CrossFit you can say &amp;quot;this week I lifted 110 pounds and last week it was only 100 pounds.&amp;quot; That&amp;#39;s a 10% increase in a week! And I personally love looking at all the little improvements.&lt;/p&gt;

&lt;p&gt;Which brings me to the CrossFit Games and the Open WODs. Every year, CrossFitters around the world compete to discover who is the &amp;quot;fittest.&amp;quot; Usually, there are formalized competitions in each region and eventually these boil down to a single multi-day competition in California somewhere. I highly suggest &lt;a href="http://games2010.crossfit.com/blog/videos/2010/"&gt;taking a look at the videos from last year&lt;/a&gt;, which were recorded in HD and streamed live over the 3-day competition (CrossFit has a very solid IT team).&lt;/p&gt;

&lt;p&gt;This year, there were nearly 30,000 registered athletes, so HQ (the folks who run CrossFit) decided that the first round of competition would take place were CrossFit is strongest: in the garage, in the box, and in the gyms. This year, there are 6 WODs (1 per week) and competitors can either complete them in a CrossFit gym (any CrossFit gym in the world) or anywhere they have access to a video camera. Athletes can record their workout and upload to the site for judging (I told you their IT team was badass).&lt;/p&gt;

&lt;p&gt;First, this further enhances the community by creating thousands of mini-competitions. Second, this is all happening live on the &lt;a href="http://games.crossfit.com/"&gt;CrossFit Games website&lt;/a&gt;, which means there is a metric fuckton of data. Check it out:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://games.crossfit.com/content/scoreboard-men"&gt;&lt;img src="http://src.sencha.io/-30/http://awardwinningfjords.com/images/scoreboard.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, I&amp;#39;m not a statistician, but &lt;a href="http://xfit2011.blogspot.com/"&gt;this guy is&lt;/a&gt;. Drink in the data:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://xfit2011.blogspot.com/2011/04/womens-body-weight-performances-wk1-and.html"&gt;Women&amp;#39;s body weight and it&amp;#39;s effect on rank&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://xfit2011.blogspot.com/2011/04/ideal-crossfit-weight-for-men.html"&gt;Ideal men&amp;#39;s weight&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://xfit2011.blogspot.com/2011/04/age-and-crossfit-open-performance.html"&gt;Age vs Performance&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;In my opinion, working out isn&amp;#39;t about being some roided-out Jersey Shore reject. It&amp;#39;s about improving yourself one little data-point at a time. It can &lt;a href="http://www.uclahealth.org/body.cfm?id=502&amp;amp;action=detail&amp;amp;ref=134"&gt;increase productivity, while decreasing stress&lt;/a&gt;. It provides a sense of community and it will slowly give you more and more &amp;quot;dumb human tricks&amp;quot; like handstands.&lt;/p&gt;

&lt;h2&gt;Footnotes&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Speaking of fitness nerds, I highly recommend Tim Ferriss&amp;#39; &lt;a href="http://www.fourhourbody.com/"&gt;The 4-Hour Body&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;I&amp;#39;m currently one of the 15 worst CrossFitters in the Northwest, according to my current place in the competition. No worries, it&amp;#39;s not about winning. I&amp;#39;m getting higher scores of workouts and exercises than I ever had before!&lt;/li&gt;
&lt;li&gt;I ran into &lt;a href="https://twitter.com/#!/justin_lewis"&gt;Justin Lewis&lt;/a&gt;, a principle at &lt;a href="http://www.weareinstrument.com/"&gt;Instrument&lt;/a&gt;, at my last WOD. He remarked on how badass it was that I was competing in my jQuery Conference shirt :)&lt;/li&gt;
&lt;li&gt;Here are some other nerds I CrossFit with:

&lt;ul&gt;
&lt;li&gt;&lt;a href="Designer/Dev"&gt;@pixelmatrix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="Flash%20Guru"&gt;@heavilyinvolved&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="iOS%20Master"&gt;@matt_tuzzolo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="iOS%20dude,%20Clean%20&amp;amp;%20Jerk%20monster"&gt;@cschep&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Branching Out, Opening Up and Publishing More</title>
    <link rel="alternate" href="/2011/04/23/branching-out-opening-up-and-publishing-more.html"/>
    <id>/2011/04/23/branching-out-opening-up-and-publishing-more.html</id>
    <published>2011-04-23T00:00:00-08:00</published>
    <updated>2011-04-23T00:00:00-08:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;It&amp;#39;s been 2 years and 1 month since I started writing seriously here. I&amp;#39;ve enjoyed it very much, but I&amp;#39;ve also focused almost exclusively on technical articles and the promotion of my own open source software. While I am proud of these articles, it can get a bit dry, can&amp;#39;t it?&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;It&amp;#39;s been 2 years and 1 month since I started writing seriously here. I&amp;#39;ve enjoyed it very much, but I&amp;#39;ve also focused almost exclusively on technical articles and the promotion of my own open source software. While I am proud of these articles, it can get a bit dry, can&amp;#39;t it?&lt;/p&gt;

&lt;p&gt;Over the same time span, I&amp;#39;ve watched &lt;a href="http://marco.org"&gt;Marco Arment&lt;/a&gt; slowly branch out from a similarly technical (or Apple news focused) blog. These days his blog has a few personal stories, lots of quick links &amp;amp; quotes, his thoughts on the current news articles and longer researched posts.&lt;/p&gt;

&lt;p&gt;That has inspired me a lot. I often get discouraged when I discover I am not the first person to do or write about something. If a topic or thought is in Google, why should I repeat the common opinion? But you know what? This is my site. It is (and will be) a catalog of my opinions, work and thoughts. So from now on, this blog becomes personal. Expect a lot more one-line posts linking to other sites. Expect some off-topic posts about things I love, like mixing cocktails or Crossfit. Expect my, probably redundant, voice echoing the thoughts of the day. Don&amp;#39;t expect comments, I&amp;#39;ll probably turn those off on everything expect open source projects I need to do support for. Expect a more personal voice.&lt;/p&gt;

&lt;p&gt;See you soon,&lt;/p&gt;

&lt;p&gt;-Thomas Reynolds&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Middleman v1.1</title>
    <link rel="alternate" href="/2011/04/15/middleman-v11.html"/>
    <id>/2011/04/15/middleman-v11.html</id>
    <published>2011-04-15T00:00:00-08:00</published>
    <updated>2011-04-15T00:00:00-08:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;&lt;strong&gt;Update: &lt;a href="/2011/08/08/middleman-2-0.html"&gt;Middleman version 2.0 has been released&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It&amp;#39;s been a long time since &lt;a href="/2009/10/22/middleman"&gt;I introduced Middleman on this blog&lt;/a&gt; in 2009. Since then, RubyGems reports that there have been 27,518 downloads, &lt;a href="https://github.com/middleman/middleman/contributors"&gt;several great contributors&lt;/a&gt; to the source code and even a mention in a printed book.&lt;/p&gt;

&lt;p&gt;I&amp;#39;ve been working hard on documentation as it was the most requested feature from the &lt;a href="/2011/02/06/future-of-middleman-survey"&gt;&amp;quot;Future of Middleman Survey&amp;quot;&lt;/a&gt;. I&amp;#39;m a developer and I&amp;#39;m sorry to admit that my first documentation target is the code and generated documentation. Available at: &lt;a href="http://middlemanapp.com/"&gt;&lt;a href="http://middlemanapp.com/"&gt;http://middlemanapp.com/&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I know, I need better, more tutorial-style written documentation for actual people. I&amp;#39;ll be working on it as time permits, but I&amp;#39;d also love any assistance.&lt;/p&gt;

&lt;p&gt;So, let&amp;#39;s talk about the version 1.1. Originally, I planned to make 1.1 a simple update to use the latest features from Sass 3.1. However, as Sass took forever to actually ship, I tweaked, massaged and added a lot more stuff to the platform. Now, I&amp;#39;m releasing even though Sass 3.1 isn&amp;#39;t out. &lt;i&gt;C&amp;#39;est la vie&lt;/i&gt;. So, here&amp;#39;s what&amp;#39;s new:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Now running on Sinatra 1.2&lt;/li&gt;
&lt;li&gt;Sass 3.1 beta &amp;amp; Compass 0.11 beta&lt;/li&gt;
&lt;li&gt;Feature/Extension API (&lt;a href="#features"&gt;see below&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Simple YAML-based data for reusable content (&lt;a href="#yaml"&gt;see below&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;mm-build &amp;amp; mm-init now use Thor for templating&lt;/li&gt;
&lt;li&gt;Lorem Ipsum &amp;amp; placehold.it helpers (&lt;a href="#lorem"&gt;see below&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;mm-init templates, including HTML5 Boilerplate (&lt;a href="#boilerplate"&gt;see below&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Built-in Rack config.ru for easy running on Heroku or under Pow (see below)&lt;/li&gt;
&lt;li&gt;Experimental JRuby support&lt;/li&gt;
&lt;li&gt;RubyGems-test support&lt;/li&gt;
&lt;li&gt;Using Bundler for packaging&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;</summary>
    <content type="html">&lt;p&gt;&lt;strong&gt;Update: &lt;a href="/2011/08/08/middleman-2-0.html"&gt;Middleman version 2.0 has been released&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It&amp;#39;s been a long time since &lt;a href="/2009/10/22/middleman"&gt;I introduced Middleman on this blog&lt;/a&gt; in 2009. Since then, RubyGems reports that there have been 27,518 downloads, &lt;a href="https://github.com/middleman/middleman/contributors"&gt;several great contributors&lt;/a&gt; to the source code and even a mention in a printed book.&lt;/p&gt;

&lt;p&gt;I&amp;#39;ve been working hard on documentation as it was the most requested feature from the &lt;a href="/2011/02/06/future-of-middleman-survey"&gt;&amp;quot;Future of Middleman Survey&amp;quot;&lt;/a&gt;. I&amp;#39;m a developer and I&amp;#39;m sorry to admit that my first documentation target is the code and generated documentation. Available at: &lt;a href="http://middlemanapp.com/"&gt;&lt;a href="http://middlemanapp.com/"&gt;http://middlemanapp.com/&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I know, I need better, more tutorial-style written documentation for actual people. I&amp;#39;ll be working on it as time permits, but I&amp;#39;d also love any assistance.&lt;/p&gt;

&lt;p&gt;So, let&amp;#39;s talk about the version 1.1. Originally, I planned to make 1.1 a simple update to use the latest features from Sass 3.1. However, as Sass took forever to actually ship, I tweaked, massaged and added a lot more stuff to the platform. Now, I&amp;#39;m releasing even though Sass 3.1 isn&amp;#39;t out. &lt;i&gt;C&amp;#39;est la vie&lt;/i&gt;. So, here&amp;#39;s what&amp;#39;s new:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Now running on Sinatra 1.2&lt;/li&gt;
&lt;li&gt;Sass 3.1 beta &amp;amp; Compass 0.11 beta&lt;/li&gt;
&lt;li&gt;Feature/Extension API (&lt;a href="#features"&gt;see below&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Simple YAML-based data for reusable content (&lt;a href="#yaml"&gt;see below&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;mm-build &amp;amp; mm-init now use Thor for templating&lt;/li&gt;
&lt;li&gt;Lorem Ipsum &amp;amp; placehold.it helpers (&lt;a href="#lorem"&gt;see below&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;mm-init templates, including HTML5 Boilerplate (&lt;a href="#boilerplate"&gt;see below&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Built-in Rack config.ru for easy running on Heroku or under Pow (see below)&lt;/li&gt;
&lt;li&gt;Experimental JRuby support&lt;/li&gt;
&lt;li&gt;RubyGems-test support&lt;/li&gt;
&lt;li&gt;Using Bundler for packaging&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s take a look at some of these in depth.&lt;/p&gt;

&lt;p&gt;&lt;a name="features"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Feature/Extension API&lt;/h2&gt;

&lt;p&gt;All the &amp;quot;features&amp;quot; of Middleman can be enabled or disabled from your &lt;tt&gt;config.rb&lt;/tt&gt; file. These features are now all using the Sinatra extension API which means it is very easy to add your own features or include features from other RubyGems. Here is an example Feature:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# In your config.rb or an external file/gem required in config.rb
module MyMiddlemanFeature
  class &amp;lt;&amp;lt; self
    def registered(app)
      app.helpers MyMiddlemanFeature::Helpers
    end
    alias :included :registered
  end

  module Helpers
    def my_custom_helper
      &amp;quot;Hello World&amp;quot;
    end
  end
end

# In config.rb
activate MyMiddlemanFeature
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above extension will add some helpers to your project. Of course, there is already the shortcut &lt;tt&gt;helpers&lt;/tt&gt; block available in &lt;tt&gt;config.rb&lt;/tt&gt;, but this extension could live anywhere. If you have some reusable components or business logic, you can place those in a gem, share it within your company and include it in &lt;tt&gt;config.rb&lt;/tt&gt;. I use this for a custom grid-system I reuse on a lot of projects.&lt;/p&gt;

&lt;p&gt;Of course, existing Sinatra extensions should work too. &lt;a href="http://www.sinatrarb.com/extensions-wild.html"&gt;See more here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a name="yaml"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;YAML Data API&lt;/h2&gt;

&lt;p&gt;Heavier static systems like Nanoc have a robust system for separating data from your HTML. This is great for sharing content across pages or having simpler files which content-focused co-workers can update without touching HTML. It&amp;#39;s not documented, but because Middleman runs on Sinatra, it&amp;#39;s possible to open database connections and pull data in that way already, but that&amp;#39;s a bit must. Middleman 1.1 comes with a simple data API. Here&amp;#39;s how it works:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a folder in the root of your project named &lt;tt&gt;data&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;Create as many &lt;tt&gt;.yml&lt;/tt&gt; YAML files as you want&lt;/li&gt;
&lt;li&gt;Their contents will be made available in your templates as &lt;tt&gt;data[&amp;quot;filename&amp;quot;]&lt;/tt&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// In PROJECT_ROOT/data/people.yml
friends:
  - tom
  - dick
  - harry

// In my template
%h1 Friends
%ul
  - data.people.friends.each do |f|
    %li= f
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a name="lorem"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Lorem Ipsum &amp;amp; Placehold.it helpers&lt;/h2&gt;

&lt;p&gt;The &lt;a href="https://github.com/blahed/frank"&gt;Frank project&lt;/a&gt;, a static tool also inspired by Sinatra, has a wonderful set of helpers for generating random text content and placeholder images. I&amp;#39;m adapted this code for Middleman (god bless the MIT license). The API is as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;lorem.sentence      # returns a single sentence
lorem.words 5       # returns 5 individual words
lorem.word
lorem.paragraphs 10 # returns 10 paragraphs 
lorem.paragraph
lorem.date          # accepts a strftime format argument
lorem.name
lorem.first_name
lorem.last_name
lorem.email
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And to use placeholder images:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;lorem.image(&amp;#39;300x400&amp;#39;)
#=&amp;gt; http://placehold.it/300x400

lorem.image(&amp;#39;300x400&amp;#39;, :background_color =&amp;gt; &amp;#39;333&amp;#39;, :color =&amp;gt; &amp;#39;fff&amp;#39;)
#=&amp;gt; http://placehold.it/300x400/333/fff

lorem.image(&amp;#39;300x400&amp;#39;, :random_color =&amp;gt; true)
#=&amp;gt; http://placehold.it/300x400/f47av7/9fbc34d

lorem.image(&amp;#39;300x400&amp;#39;, :text =&amp;gt; &amp;#39;blah&amp;#39;)
#=&amp;gt; http://placehold.it/300x400&amp;amp;text=blah
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a name="boilerplate"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;New Project Templates (HTML5 Boilerplate)&lt;/h2&gt;

&lt;p&gt;I&amp;#39;ve abstracted the templates used in &lt;tt&gt;mm-init&lt;/tt&gt; so that it is easy to add new ones, but right now those templates have to live in the Middleman gem to work. In the future, I&amp;#39;ll add support for extra templates in external gems or somewhere on the local machine like &lt;tt&gt;~/.middleman&lt;/tt&gt;. For now, enjoy the new template option, the wonderful &lt;a href="http://html5boilerplate.com/"&gt;HTML5 Boilerplate&lt;/a&gt;. It is used like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mm-init my_boilerplate_project --template=html5
    create  my_boilerplate_project/config.rb
    create  my_boilerplate_project/public
    create  my_boilerplate_project/public/404.html
    create  my_boilerplate_project/public/apple-touch-icon.png
    create  my_boilerplate_project/public/crossdomain.xml
    create  my_boilerplate_project/public/css/handheld.css
    create  my_boilerplate_project/public/css/style.css
    create  my_boilerplate_project/public/favicon.ico
    create  my_boilerplate_project/public/humans.txt
    create  my_boilerplate_project/public/images/.gitignore
    create  my_boilerplate_project/public/index.html
    create  my_boilerplate_project/public/js/libs/dd_belatedpng.js
    create  my_boilerplate_project/public/js/libs/jquery-1.5.0.js
    create  my_boilerplate_project/public/js/libs/jquery-1.5.0.min.js
    create  my_boilerplate_project/public/js/libs/modernizr-1.6.min.js
    create  my_boilerplate_project/public/js/mylibs/.gitignore
    create  my_boilerplate_project/public/js/plugins.js
    create  my_boilerplate_project/public/js/script.js
    create  my_boilerplate_project/public/robots.txt
    create  my_boilerplate_project/views
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Rack-support by Default&lt;/h2&gt;

&lt;p&gt;Finally, a very simple Rack &lt;tt&gt;config.ru&lt;/tt&gt; file is included in the default template. It&amp;#39;s contents are:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;require &amp;#39;rubygems&amp;#39;
require &amp;#39;middleman&amp;#39;

run Middleman::Server
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This allows Middleman to easily run on a Heroku instance or under 37Signal&amp;#39;s new &lt;a href="http://pow.cx/"&gt;Pow webserver&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Installation&lt;/h2&gt;

&lt;p&gt;As easy as ever:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gem install middleman
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Please direct all questions and bugs to Github:
&lt;a href="https://github.com/middleman/middleman"&gt;&lt;a href="https://github.com/middleman/middleman"&gt;https://github.com/middleman/middleman&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Adjustable Animations with Sliders</title>
    <link rel="alternate" href="/2011/04/13/adjustable-animations-with-sliders.html"/>
    <id>/2011/04/13/adjustable-animations-with-sliders.html</id>
    <published>2011-04-13T00:00:00-08:00</published>
    <updated>2011-04-13T00:00:00-08:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;Quick question? What is the perfect amount of time to animate an element on a page? jQuery defaults to 400ms, which sounds short, but ends up being pretty perfect for most occasions. It gets the job done and then it gets out of the way. &lt;/p&gt;

&lt;p&gt;However, it shouldn&amp;#39;t surprise you that designers have opinions on motion and we&amp;#39;re just now reaching the point where motion is becoming important on the web. </summary>
    <content type="html">&lt;p&gt;Quick question? What is the perfect amount of time to animate an element on a page? jQuery defaults to 400ms, which sounds short, but ends up being pretty perfect for most occasions. It gets the job done and then it gets out of the way. &lt;/p&gt;

&lt;p&gt;However, it shouldn&amp;#39;t surprise you that designers have opinions on motion and we&amp;#39;re just now reaching the point where motion is becoming important on the web.  Back in the day, 37Signals would just set the background of an element to yellow and call it a day. If you take a look at &lt;a href="http://getflow.com"&gt;Flow&lt;/a&gt;, you&amp;#39;ll see some very designed motion. Closing a task results in the checkbox animating to a state, then it picks up and animates along an arc to drop into the &amp;quot;completed&amp;quot; box in your sidebar.&lt;/p&gt;

&lt;p&gt;Okay, so, what&amp;#39;s the perfect timing for that animation? There are tools for prototyping motion, most notably Adobe Flash, but usually you&amp;#39;re designer is going to want to look over your shoulder and tweak the animation until it &amp;quot;feels right.&amp;quot;&lt;/p&gt;

&lt;p&gt;The solution is something I&amp;#39;ve seen friends in the old-school OpenGL motion build into their dev workflow. Every time they&amp;#39;ve got a motion variable (duration, size, color, wobble, randomness, etc), they setup a control to adjust the variable. Who wants to change integers in OpenGL and recompile? Like so many things, it&amp;#39;s time to re-learn tricks from the desktop world if we&amp;#39;re going to move forward.&lt;/p&gt;

&lt;p&gt;Here, below is the most basic example. I have a square that is animating back and forth and changing width and height. In a more complicated example, it might arc or have several animations queued up. I&amp;#39;ve used a shiny new HTML5 &lt;tt&gt;range&lt;/tt&gt; element and each time the animation loops, it checks the value to define it&amp;#39;s duration.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!-- Ranges from 0-4000, with integer steps. Defaults to 400 --&amp;gt;
&amp;lt;input type=&amp;quot;range&amp;quot; min=&amp;quot;0&amp;quot; max=&amp;quot;4000&amp;quot; step=&amp;quot;1&amp;quot; value=&amp;quot;400&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The animation looks like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$elem.animate({ left: 480, width: 100, height: 100 }, {
  duration: $(&amp;quot;input[type=range]&amp;quot;).val()
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Simple enough. If I were implementing an animation, vaguely defined in a PSD, I&amp;#39;d setup something like this and then let the designer have a field day. Developers love round numbers and math, but the &amp;quot;best&amp;quot; timing may actually be the combination of an esoteric easing function and a duration of 962.&lt;/p&gt;

&lt;p&gt;This gets even more interesting if you&amp;#39;re using something like WebGL, Three.js or Box2d.js. Adjust physics engines on the fly makes finding the perfect balance a cinch.&lt;/p&gt;

&lt;h1&gt;Demo&lt;/h1&gt;

&lt;p&gt;Here we have a little animating square, a slider to control the duration and a bunch of easing options. Go ahead, play around and find the &amp;quot;sweet spot.&amp;quot;&lt;/p&gt;

&lt;script src="http://ajax.googleapis.com/ajax/libs/jquery/1.5.2/jquery.min.js"&gt;&lt;/script&gt;
&lt;script&gt;
  $.getScript("/javascripts/jquery.easing.1.3.js", function() {

    $(function($) {
      $(".range").change(function() {
        $(".speed").text($(this).val());
      }).change();

      function getEasing() {
        return $(".easing").val();
      }

      function getSliderValue() {
        return parseInt($(".range").val(), 10);
      }

      function animateRight() {
        $(".box").stop().animate({ left: 380, width: 100, height: 100 }, {
          duration: getSliderValue(), 
          easing:   getEasing(),
          complete: function() {
            setTimeout(animateLeft, 750);
          }
        });
      }

      function animateLeft() {
        $(".box").stop().animate({ left: 0, width: 50, height: 50 }, {
          duration: getSliderValue(), 
          easing:   getEasing(),
          complete: function() {
            setTimeout(animateRight, 750);
          }
        });
      }

      animateRight();
    });
  });
&lt;/script&gt;

&lt;div class="demo" style="width: 600px; height: 300px; position: relative; overflow: hidden;"&gt;
  Duration: &lt;span class="speed"&gt;&lt;/span&gt;&lt;br /&gt;
  &lt;input class="range" type="range" min="0" max="4000" step="1" value="1400" style="width: 300;" /&gt;&lt;br /&gt;
  Easing: &lt;select class="easing"&gt;
    &lt;option&gt;swing&lt;/option&gt;
    &lt;option&gt;easeInQuad&lt;/option&gt;
    &lt;option&gt;easeOutQuad&lt;/option&gt;
    &lt;option&gt;easeInOutQuad&lt;/option&gt;
    &lt;option&gt;easeInCubic&lt;/option&gt;
    &lt;option&gt;easeOutCubic&lt;/option&gt;
    &lt;option&gt;easeInOutCubic&lt;/option&gt;
    &lt;option&gt;easeInQuart&lt;/option&gt;
    &lt;option&gt;easeOutQuart&lt;/option&gt;
    &lt;option&gt;easeInOutQuart&lt;/option&gt;
    &lt;option&gt;easeInQuint&lt;/option&gt;
    &lt;option&gt;easeOutQuint&lt;/option&gt;
    &lt;option&gt;easeInOutQuint&lt;/option&gt;
    &lt;option&gt;easeInSine&lt;/option&gt;
    &lt;option&gt;easeOutSine&lt;/option&gt;
    &lt;option&gt;easeInOutSine&lt;/option&gt;
    &lt;option&gt;easeInExpo&lt;/option&gt;
    &lt;option&gt;easeOutExpo&lt;/option&gt;
    &lt;option&gt;easeInOutExpo&lt;/option&gt;
    &lt;option&gt;easeInCirc&lt;/option&gt;
    &lt;option&gt;easeOutCirc&lt;/option&gt;
    &lt;option&gt;easeInOutCirc&lt;/option&gt;
    &lt;option&gt;easeInElastic&lt;/option&gt;
    &lt;option&gt;easeOutElastic&lt;/option&gt;
    &lt;option&gt;easeInOutElastic&lt;/option&gt;
    &lt;option&gt;easeInBack&lt;/option&gt;
    &lt;option&gt;easeOutBack&lt;/option&gt;
    &lt;option&gt;easeInOutBack&lt;/option&gt;
    &lt;option&gt;easeInBounce&lt;/option&gt;
    &lt;option selected&gt;easeOutBounce&lt;/option&gt;
    &lt;option&gt;easeInOutBounce&lt;/option&gt;
  &lt;/select&gt;&lt;br /&gt;

  &lt;div class="box" style="width: 50px; height: 50px; background: red; position: absolute; top: 75px; left: 10px;"&gt;&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry>
    <title>Announcing: WouldHire.com</title>
    <link rel="alternate" href="/2011/04/08/announcing-wouldhirecom.html"/>
    <id>/2011/04/08/announcing-wouldhirecom.html</id>
    <published>2011-04-08T00:00:00-08:00</published>
    <updated>2011-04-08T00:00:00-08:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;This year at SXSW I was either involved in or overheard the same conversation several times. &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Person A: So where do you work now?
Person B: Just started a new job at Company X.
Person A: Ah, man, you should have told me you were looking. 
          I&amp;#39;d love to work with you.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Somehow, despite all of our constant communication and over-sharing on Twitter, we still like to avoid &amp;quot;serious&amp;quot; conversations about jobs, salaries and what it would take to get your friend/buddy/idol to work with you. So, to scratch this itch, &lt;a href="http://pixelmatrixdesign.com/"&gt;Josh Pyles&lt;/a&gt; and I spent the last weekend putting together &lt;a href="http://wouldhire.com"&gt;WouldHire.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;</summary>
    <content type="html">&lt;p&gt;This year at SXSW I was either involved in or overheard the same conversation several times. &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Person A: So where do you work now?
Person B: Just started a new job at Company X.
Person A: Ah, man, you should have told me you were looking. 
          I&amp;#39;d love to work with you.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Somehow, despite all of our constant communication and over-sharing on Twitter, we still like to avoid &amp;quot;serious&amp;quot; conversations about jobs, salaries and what it would take to get your friend/buddy/idol to work with you. So, to scratch this itch, &lt;a href="http://pixelmatrixdesign.com/"&gt;Josh Pyles&lt;/a&gt; and I spent the last weekend putting together &lt;a href="http://wouldhire.com"&gt;WouldHire.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;The site is very simple. Go to the homepage, enter your twitter username and see if anyone has expressed interest in working with you. If they have and you&amp;#39;re looking for a new gig, it&amp;#39;s up to you two to figure it out.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://wouldhire.com"&gt;&lt;img src="http://src.sencha.io/-30/http://awardwinningfjords.com/images/WouldHire-homepage.png" alt="Homepage"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://who.wouldhire.com/pixelmatrix"&gt;&lt;img src="http://src.sencha.io/-30/http://awardwinningfjords.com/images/WouldHire-who.png" alt="Who WouldHire @pixelmatrix"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, if you&amp;#39;re looking to let someone know that you&amp;#39;re interested, simply login (using Twitter) and add some Twitter usernames to your &amp;quot;dream team.&amp;quot;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://src.sencha.io/-30/http://awardwinningfjords.com/images/WouldHire-admin.png" alt="WouldHire Admin"&gt;&lt;/p&gt;

&lt;p&gt;Pretty cool, eh? Please check it out, email me your ideas/comments and hopefully this will help someone, somewhere end up with their dream job.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Model and Data Store: JavascriptMVC</title>
    <link rel="alternate" href="/2011/02/18/model-and-data-store-javascriptmvc.html"/>
    <id>/2011/02/18/model-and-data-store-javascriptmvc.html</id>
    <published>2011-02-18T00:00:00-08:00</published>
    <updated>2011-02-18T00:00:00-08:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;Last time, &lt;a href="http://awardwinningfjords.com/2011/01/25/client-side-mvcs-part-1-the-model-and-data-store.html"&gt;I wrote about client-side models&lt;/a&gt; in an abstract way using plain Javascript. Understanding the purpose of models and encapulating model-specific functionality is important for code organization, but you will end up having to write a bunch of code to support your models. For example, converting and parsing JSON values, figuring out how and when to push changes to the server and client-side validations.&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;Last time, &lt;a href="http://awardwinningfjords.com/2011/01/25/client-side-mvcs-part-1-the-model-and-data-store.html"&gt;I wrote about client-side models&lt;/a&gt; in an abstract way using plain Javascript. Understanding the purpose of models and encapulating model-specific functionality is important for code organization, but you will end up having to write a bunch of code to support your models. For example, converting and parsing JSON values, figuring out how and when to push changes to the server and client-side validations.&lt;/p&gt;

&lt;p&gt;Now, you might think you are a very smart developer and you could write Twitter in a weekend and that frameworks and libraries are bloat that you&amp;mdash;oh perfect developer&amp;mdash;don&amp;#39;t need. Well, you&amp;#39;re wrong.&lt;/p&gt;

&lt;p&gt;There is serious value in frameworks which have been around and in use for several years. The accumulated knowledge of hundreds of esoteric browser bugs and issues will save your ass when it&amp;#39;s down to the wire and suddenly your site isn&amp;#39;t working in IE8 on Windows XP with Cleartype disabled.&lt;/p&gt;

&lt;h2&gt;JavascriptMVC $.Model&lt;/h2&gt;

&lt;p&gt;Compared to the Sencha and Sproutcore&amp;#39;s robust data packages, JavascriptMVC&amp;#39;s is somewhat simple. It embraces jQuery&amp;#39;s AJAX methods and even places its classes on the jQuery &amp;quot;$&amp;quot; object. First, let&amp;#39;s take a look at a model who&amp;#39;s only goal is to represent a client-side object. We&amp;#39;ll use it for organizing data and generating DOM elements, but save backend connectivity for later.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Setup the model definition
$.Model.extend(&amp;quot;Project&amp;quot;,
{
  // Static methods.
  // The following will appear as Project.fooBar()
  fooBar: function() {
    // Do something;
  }
},
{
  // Instance methods
  // The following will appear as myProject.similarProjects()
  similarProjects: function() {
    // Loop over all projects and find similar ones
  }
});

// Create an instance
var myProject = new Project({ 
  name:  &amp;quot;Project 1&amp;quot;,
  owner: &amp;quot;me&amp;quot;
});

// Get some values
console.debug(&amp;quot;My name is: &amp;quot; + myProject.name);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, the attributes defined on the model are relatively free-form. Simply pass them into the constructor and they&amp;#39;ll be accessible in the model instance and to your instance methods. However, if you want to use some additional magic such an custom getters, setters and attribute conversions, you&amp;#39;re going to need to use a jQuery-style proxy method to get and set attributes. Unsurprisingly, that method is called &lt;tt&gt;attr&lt;/tt&gt;. Let&amp;#39;s look at the same model, but with a helper method added.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$.Model.extend(&amp;quot;Project&amp;quot;,
{
},
{
  setTitle: function(newTitle) {
    // Optionally set some other attribute at the same time,
    // like a subtitle.

    // Makes sure the title is always uppercase.
    return newTitle.toUpperCase();
  }
});

var myProject = new Project();
myProject.attr(&amp;quot;title&amp;quot;, &amp;quot;my title&amp;quot;);
console.debug(&amp;quot;My title is: &amp;quot; + myProject.attr(&amp;quot;title&amp;quot;)); // MY TITLE
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, whenever you use the &lt;tt&gt;attr&lt;/tt&gt; helper to get or set the title, it will run through the &lt;tt&gt;setTitle&lt;/tt&gt; method first. Alternatively, you could setup this conversion at the class level.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$.Model.extend(&amp;quot;Project&amp;quot;,
{
  attributes: {
    title: &amp;#39;uppercase&amp;#39;
  },
  convert: function(original) {
    return original.toUpperCase();
  }
},
{
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In JavascriptMVC, you can bind models to DOM nodes. What this let&amp;#39;s us do is to accept a click on a button, find the model it corresponds to and perform an action easily. I&amp;#39;ll go into this more when talking about the JavascriptMVC view layer.&lt;/p&gt;

&lt;h2&gt;$.Model with JSON APIs&lt;/h2&gt;

&lt;p&gt;Unless you&amp;#39;re app uses something like LocalStorage to keep all the client data in the visitor&amp;#39;s browser, you&amp;#39;ll probably want to pull model data from a backend server. $.Model makes this shockingly easy in the basic case. Behold:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$.Model.extend(&amp;#39;Project&amp;#39;,
{ 
  findAll: &amp;quot;projects&amp;quot;, 
  findOne: &amp;quot;projects/{id}&amp;quot;, 
  create:  &amp;quot;projects&amp;quot;, 
  destroy: &amp;quot;projects/{id}&amp;quot;, 
  update:  &amp;quot;projects/{id}&amp;quot; 
},
{
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you can interact with your server-side models very easily. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Let&amp;#39;s assume this returns the following JSON from &amp;quot;/projects&amp;quot;:
// [{ id: 1, name: &amp;quot;My Project&amp;quot; }]
Project.findAll({ }, function(allProjects) {
  // An array of Project models
  allProjects;
});

// Let&amp;#39;s assume this returns the following JSON from &amp;quot;/projects/1&amp;quot;:
// { id: 1, name: &amp;quot;My Project&amp;quot; }
Project.findOne({ id: 1 }, function(myProject) {
  // Returns &amp;quot;My Project
  myProject.attr(&amp;#39;name&amp;#39;);

  // Triggers HTTP PUT to &amp;quot;projects/1&amp;quot;
  myProject.update(&amp;#39;name&amp;#39;, &amp;#39;New name&amp;#39;);

  // Triggers HTTP DELETE to &amp;quot;projects/1&amp;quot;
  myProject.destroy();
});

// Create new instance
var newProject = new Project({ name: &amp;quot;New Project&amp;quot; });

// Triggers HTTP POST to &amp;quot;/projects&amp;quot;
newProject.save();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Awesomely simple. Keep in mind that the &lt;tt&gt;findAll&lt;/tt&gt;, &lt;tt&gt;findOne&lt;/tt&gt;, &lt;tt&gt;create&lt;/tt&gt;, &lt;tt&gt;destroy&lt;/tt&gt; and &lt;tt&gt;update&lt;/tt&gt; class methods can be defined by you to handle any kind of backend service. If you need to parse XML or work with a bizarre API you don&amp;#39;t control, this is where you&amp;#39;d do it.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Aaron Quint on Javascript Hash URLs</title>
    <link rel="alternate" href="/2011/02/11/aaron-quint-on-javascript-hash-urls.html"/>
    <id>/2011/02/11/aaron-quint-on-javascript-hash-urls.html</id>
    <published>2011-02-11T00:00:00-08:00</published>
    <updated>2011-02-11T00:00:00-08:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Sammy and the ‘#’ are for applications. It provides a way to maintain state in a world where you can require JavaScript and even require the presence of certain browsers. If you’re an application, that requires login/signup you can make a number of demands of your users. You also probably dont even want the crawlability. You’re using ‘#’ to maintain state for a specific user in a specific session.&lt;/p&gt;
</summary>
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;Sammy and the ‘#’ are for applications. It provides a way to maintain state in a world where you can require JavaScript and even require the presence of certain browsers. If you’re an application, that requires login/signup you can make a number of demands of your users. You also probably dont even want the crawlability. You’re using ‘#’ to maintain state for a specific user in a specific session.&lt;/p&gt;

&lt;p&gt;Outside of the world of the ‘application’ you really, really shouldn’t rely on JavaScript being there for your site to work (at least at a basic level).&lt;br /&gt;
&lt;strong&gt;- Aaron Quint&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Checkout the &lt;a href="http://www.quirkey.com/blog/2011/02/10/ish/"&gt;full article&lt;/a&gt; on &lt;a href="http://twitter.com/aq"&gt;@aq&lt;/a&gt;&amp;#39;s blog.&lt;/p&gt;

&lt;p&gt;I&amp;#39;m definitely a fan of dynamic javascript applications which utilize the #! method to support the back-button and deep linking. I wrote a &lt;a href="http://secondstory.github.com/secondstoryjs-router/"&gt;Sammy-inspired Javascript URL router for JavascriptMVC&lt;/a&gt; and I agree with Aaron. Dynamic URLs for applications, static sites for traditional content. Where Gawker went wrong with their redesign is by confusing the two.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Andy Rutledge on Kickstarter</title>
    <link rel="alternate" href="/2011/02/08/andy-rutledge-on-kickstarter.html"/>
    <id>/2011/02/08/andy-rutledge-on-kickstarter.html</id>
    <published>2011-02-08T00:00:00-08:00</published>
    <updated>2011-02-08T00:00:00-08:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;By taking the professional-to-client approach for what should be a merchant-to-customer context, Mr. Chimero has abdicated ownership of his idea/genius and the results that will come of it. Having bought and paid for it, the collective investors now own his genius in this project. By selling out first before he created the product he promises, he’s now working for the investors instead of working for himself.&lt;br /&gt;
</summary>
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;By taking the professional-to-client approach for what should be a merchant-to-customer context, Mr. Chimero has abdicated ownership of his idea/genius and the results that will come of it. Having bought and paid for it, the collective investors now own his genius in this project. By selling out first before he created the product he promises, he’s now working for the investors instead of working for himself.&lt;br /&gt;
&lt;strong&gt;- Andy Rutledge&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="http://www.andyrutledge.com/profit-lies-theft-and-idiocy.php"&gt;Read the full article&lt;/a&gt;, it&amp;#39;s great. I agree with Andy, but let me say that I&amp;#39;m a huge fan of Frank&amp;#39;s. I love his writing and am very happy he&amp;#39;ll have the opportunity to focus on a project he loves. My opinions about Kickstarter revolve around it&amp;#39;s model, not the artists who are able to follow their dreams because of it.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Future of Middleman Survey</title>
    <link rel="alternate" href="/2011/02/06/future-of-middleman-survey.html"/>
    <id>/2011/02/06/future-of-middleman-survey.html</id>
    <published>2011-02-06T00:00:00-08:00</published>
    <updated>2011-02-06T00:00:00-08:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;I&amp;#39;ve created a brief survey about &lt;a href="http://middlemanapp.com"&gt;Middleman&lt;/a&gt;. If you&amp;#39;ve used the project, I would love your input. Thanks!&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.surveymonkey.com/s/5P9B92Q"&gt;&lt;a href="http://www.surveymonkey.com/s/5P9B92Q"&gt;http://www.surveymonkey.com/s/5P9B92Q&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;I&amp;#39;ve created a brief survey about &lt;a href="http://middlemanapp.com"&gt;Middleman&lt;/a&gt;. If you&amp;#39;ve used the project, I would love your input. Thanks!&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.surveymonkey.com/s/5P9B92Q"&gt;&lt;a href="http://www.surveymonkey.com/s/5P9B92Q"&gt;http://www.surveymonkey.com/s/5P9B92Q&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Model and Data Store: Sencha</title>
    <link rel="alternate" href="/2011/01/28/model-and-data-store-sencha.html"/>
    <id>/2011/01/28/model-and-data-store-sencha.html</id>
    <published>2011-01-28T00:00:00-08:00</published>
    <updated>2011-01-28T00:00:00-08:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;I&amp;#39;m in the process of writing up how the Model and Data Store works in JavascriptMVC and Sproutcore. In the mean-time, check out Ed Spencer&amp;#39;s fantastic article about the ExtJS/Sencha Data Package on the official Sencha blog.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.sencha.com/blog/ext-js-4-anatomy-of-a-model/"&gt;http://www.sencha.com/blog/ext-js-4-anatomy-of-a-model/&lt;/a&gt;&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;I&amp;#39;m in the process of writing up how the Model and Data Store works in JavascriptMVC and Sproutcore. In the mean-time, check out Ed Spencer&amp;#39;s fantastic article about the ExtJS/Sencha Data Package on the official Sencha blog.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.sencha.com/blog/ext-js-4-anatomy-of-a-model/"&gt;http://www.sencha.com/blog/ext-js-4-anatomy-of-a-model/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://src.sencha.io/-30/http://www.sencha.com/assets/images/20110126-model.png" style="padding: 0; border: 0; box-shadow: white 0 0 0; -webkit-box-shadow: white 0 0 0; -moz-box-shadow: white 0 0 0; -o-box-shadow: white 0 0 0;" width=580 /&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Client-side MVC+S Part 1: The Model and Data Store</title>
    <link rel="alternate" href="/2011/01/25/client-side-mvcs-part-1-the-model-and-data-store.html"/>
    <id>/2011/01/25/client-side-mvcs-part-1-the-model-and-data-store.html</id>
    <published>2011-01-25T00:00:00-08:00</published>
    <updated>2011-01-25T00:00:00-08:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;Like it or not, the Apple iPhone and iPad have changed people&amp;rsquo;s expectations for how apps and even websites should behave. As designers begin porting native application concepts to the web, we front-end developers have got to become more organized and application-oriented to survive. More and more, websites should be categorized as &amp;quot;simple applications.&amp;quot; Building sites as a collection of jQuery plugins is a bad idea in this new, complex web-application world.&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;Like it or not, the Apple iPhone and iPad have changed people&amp;rsquo;s expectations for how apps and even websites should behave. As designers begin porting native application concepts to the web, we front-end developers have got to become more organized and application-oriented to survive. More and more, websites should be categorized as &amp;quot;simple applications.&amp;quot; Building sites as a collection of jQuery plugins is a bad idea in this new, complex web-application world.&lt;/p&gt;

&lt;p&gt;Maybe you&amp;rsquo;ve heard about &lt;a href="http://www.sproutcore.com/"&gt;Sproutcore&lt;/a&gt;, &lt;a href="http://cappuccino.org/"&gt;Capuccino&lt;/a&gt;, &lt;a href="http://www.sencha.com/products/touch/"&gt;Sencha Touch&lt;/a&gt;,  &lt;a href="http://javascriptmvc.com/"&gt;JavascriptMVC&lt;/a&gt; or &lt;a href="http://documentcloud.github.com/backbone/"&gt;Backbone&lt;/a&gt;. These frameworks provide a full application stack for the web and they are all based on the Model-View-Controller pattern. Please note, if you are familiar with server-side MVC, you should be aware that client-side MVC is slightly different. Even if you aren&amp;rsquo;t interested in learning a whole new framework, you will definitely need the MVC pattern to build modern web sites so I&amp;rsquo;m going to talk about what each piece of the pattern looks like on the client-side.&lt;/p&gt;

&lt;h2&gt;Model&lt;/h2&gt;

&lt;p&gt;Client-side models have two important pieces. First is the traditional model which has some attributes (like name, date updated, etc) and allows you to update those attributes. The generic Javascript object handles this role perfectly. If you&amp;rsquo;re getting data from JSON, you&amp;rsquo;re getting a JavaScript Object Model (JSOM?) of the data. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{ name: &amp;quot;Object 1&amp;quot;, updated_at: &amp;quot;2011/01/25&amp;quot; }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At some point you will want to have some helper functions that are related to each model. Maybe you want to get the name in all caps. A simple Javascript Class for this model would look like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var Project = function(attrs) {
  this.name = attrs.name;
}

Project.prototype.allCapsName = function() {
  return this.name.toUpperCase();
}

var myProject = new Project(&amp;quot;mine&amp;quot;);
myProject.allCapsName() =&amp;gt; &amp;quot;MINE&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So far, so good and we&amp;rsquo;re still entirely in the realm of plain old Javascript. Each of the popular frameworks mentioned above take the approach of wrapping a data object in a class to allow custom methods, but if all you need is a way of organizing your code without a library, this should be good enough.&lt;/p&gt;

&lt;h2&gt;Data Store&lt;/h2&gt;

&lt;p&gt;The second part of the Model is the Data Store/Source. At some point, you will need a way of getting models from a server, working with a list of models and sending updates to the server. If you have each model handle communication with the server itself, you will end up with a lot of duplication. So let&amp;rsquo;s make a data store that gets a list of project using a plain javascript model from above. I&amp;rsquo;m going to use jQuery for the AJAX portion because &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var ProjectList = {
  all: [],
  fetch: function(myCallback) {
    var self = this;
    $.get(&amp;quot;/projects.json&amp;quot;, function(data) {
      for (var i = 0; i &amp;lt; data.length; i++) {
        var model = new Project(data[i]);
        self.all.push(model);
      }
      myCallback &amp;amp;&amp;amp; myCallback(self.all);
    });
  }
};

ProjectList.all =&amp;gt; []
ProjectList.fetch(function(data) { 
  console.debug(&amp;quot;Got a list of Project models&amp;quot;);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Basically, we have a Javascript object which stores a list of our models. When we call &lt;tt&gt;ProjectList.fetch&lt;/tt&gt;, jQuery gets JSON representing a bunch of projects which we iterate over and add to &lt;tt&gt;ProjectList.all&lt;/tt&gt; which is an array. If you wanted, you could also write some kind of &lt;tt&gt;ProjectList.sync&lt;/tt&gt; function which would push data to the backend.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.sproutcore.com/"&gt;Sproutcore&lt;/a&gt; and &lt;a href="http://www.sencha.com/products/touch/"&gt;Sencha Touch&lt;/a&gt; provide robust data source libraries for interacting with a wide variety of backends such as REST, XML, JSON or YQL. Their model systems also track which attributes have changed on each object and can intelligently sync with the backend. Still, even without using a framework, this abstraction is very useful.&lt;/p&gt;

&lt;p&gt;Ed Spencer has &lt;a href="http://www.sencha.com/blog/2011/01/21/countdown-to-ext-js-4-data-package/"&gt;a great write-up of the Sencha/ExtJS Data Package&lt;/a&gt;. I highly suggest reading it if only to get a grasp on the importance of having solid client-side models.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>SecondStoryJS State Machine now has a documentation website</title>
    <link rel="alternate" href="/2010/12/31/secondstoryjs-state-machine-now-has-a-documentation-website.html"/>
    <id>/2010/12/31/secondstoryjs-state-machine-now-has-a-documentation-website.html</id>
    <published>2010-12-31T00:00:00-08:00</published>
    <updated>2010-12-31T00:00:00-08:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;You can now learn everything you wanted to know about the JavascriptMVC3 state machine on the project website at:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://secondstory.github.com/secondstoryjs-router/"&gt;&lt;a href="http://secondstory.github.com/secondstoryjs-statemachine/"&gt;http://secondstory.github.com/secondstoryjs-statemachine/&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;You can now learn everything you wanted to know about the JavascriptMVC3 state machine on the project website at:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://secondstory.github.com/secondstoryjs-router/"&gt;&lt;a href="http://secondstory.github.com/secondstoryjs-statemachine/"&gt;http://secondstory.github.com/secondstoryjs-statemachine/&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://src.sencha.io/-30/http://awardwinningfjords.com/images/SecondStoryJS-StateMachine.png" alt="SecondStoryJS State Machine" /&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Best Albums of the Year: 2010</title>
    <link rel="alternate" href="/2010/12/09/best-albums-of-the-year-2010.html"/>
    <id>/2010/12/09/best-albums-of-the-year-2010.html</id>
    <published>2010-12-09T00:00:00-08:00</published>
    <updated>2010-12-09T00:00:00-08:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;It&amp;#39;s that time of year again! I don&amp;#39;t want a personal live journal all year, but damnit this is the one exception. I document my opinions because I think it will be really fun to look back and see what I was listening to in Ye Olde 2010. I suppose this should be a &amp;quot;Top 14&amp;quot; list, but instead it&amp;#39;s &amp;quot;Top 10&amp;quot; and some honorable mentions. Let&amp;#39;s  get started.&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;It&amp;#39;s that time of year again! I don&amp;#39;t want a personal live journal all year, but damnit this is the one exception. I document my opinions because I think it will be really fun to look back and see what I was listening to in Ye Olde 2010. I suppose this should be a &amp;quot;Top 14&amp;quot; list, but instead it&amp;#39;s &amp;quot;Top 10&amp;quot; and some honorable mentions. Let&amp;#39;s  get started.&lt;/p&gt;

&lt;h2&gt;Top 10:&lt;/h2&gt;

&lt;ul class="albums"&gt;
  &lt;li&gt;
    &lt;div class='cover'&gt;
      &lt;img src='http://awardwinningfjords.com/albums/2010/10.jpg' /&gt;&lt;div&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class='content'&gt;
      &lt;h6&gt;United Nations&lt;/h6&gt;
      &lt;h4&gt;Nevermind The Bombings, Here's Your Six Figures&lt;/h4&gt;
      &lt;p&gt;This hardcore supergroup creates loud, in-your-face music that you survive until the album is over. This EP is short, but it's a great palette cleanser after hearing some bullshit Glee single.&lt;/p&gt;
    &lt;/div&gt;
    &lt;div class='player'&gt;
      &lt;h6&gt;#10&lt;/h6&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;div class='cover'&gt;
      &lt;img src='http://awardwinningfjords.com/albums/2010/9.jpg' /&gt;&lt;div&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class='content'&gt;
      &lt;h6&gt;Envy&lt;/h6&gt;
      &lt;h4&gt;Recitation&lt;/h4&gt;
      &lt;p&gt;This classic Japanese hardcore band has slowly become more melodic, trading in hardcore-riffs for post-rock landscapes. The one thing that hasn't changed are the vocals. The interaction between the absolutely beatiful music and the tortured vocals works amazingly. The vocals don't grate because the music is inspiring, but the post-rock doesn't get slow, boring and repetitive because at any moment the peace could be broken by screams.&lt;/p&gt;
    &lt;/div&gt;
    &lt;div class='player'&gt;
      &lt;h6&gt;#9&lt;/h6&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;div class='cover'&gt;
      &lt;img src='http://awardwinningfjords.com/albums/2010/8.jpg' /&gt;&lt;div&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class='content'&gt;
      &lt;h6&gt;Portugal. The Man&lt;/h6&gt;
      &lt;h4&gt;American Ghetto&lt;/h4&gt;
      &lt;p&gt;Another year, another great Portugal. The Man album. The psychadelic sounds of last year's album are still present, but the edges are rougher. More guitars, more big rock moments and yet another perfectly sized record. The album is exactly as long as it should be, no filler.&lt;/p&gt;
    &lt;/div&gt;
    &lt;div class='player'&gt;
      &lt;h6&gt;#8&lt;/h6&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;div class='cover'&gt;
      &lt;img src='http://awardwinningfjords.com/albums/2010/7.jpg' /&gt;&lt;div&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class='content'&gt;
      &lt;h6&gt;B.o.B&lt;/h6&gt;
      &lt;h4&gt;B.o.B Presents: The Adventures of Bobby Ray &lt;/h4&gt;
      &lt;p&gt;Lots of hip hop on my list this year. B.o.B came out of nowhere and released a very radio-friendly album with some great guest appearances, a glimpse of his skills as an MC and a lot of really clever lyrics. I put B.o.B in the same bucket as Lupe Fiasco. These guys are smart, eloquent and know what they want to say. There isn't any fake drug game bravado or wasted breaths. The songs have a purpose and it is focused rather than the scattershot someone like Lil Wayne excretes.&lt;/p&gt;
    &lt;/div&gt;
    &lt;div class='player'&gt;
      &lt;h6&gt;#7&lt;/h6&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;div class='cover'&gt;
      &lt;img src='http://awardwinningfjords.com/albums/2010/6.jpg' /&gt;&lt;div&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class='content'&gt;
      &lt;h6&gt;Cee Lo Green&lt;/h6&gt;
      &lt;h4&gt;The Lady Killer&lt;/h4&gt;
      &lt;p&gt;Cee Lo finally let loose, brought the energy over from the first Gnarls Barkley album and created an incredibly fun, modern soul record. Thankfully the huge single "Fuck You" isn't the only highlight. You can tell Cee Lo wanted to have fun, croon his heart out and just do what he wants, even if the result is a heavily censored music video (and appearance on Glee).&lt;/p&gt;
    &lt;/div&gt;
    &lt;div class='player'&gt;
      &lt;h6&gt;#6&lt;/h6&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;div class='cover'&gt;
      &lt;img src='http://awardwinningfjords.com/albums/2010/5.jpg' /&gt;&lt;div&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class='content'&gt;
      &lt;h6&gt;Big Boi&lt;/h6&gt;
      &lt;h4&gt;Sir Lucious Left Foot: The Son of Chico Dusty&lt;/h4&gt;
      &lt;p&gt;This is the best hip hop album in a long while. Kanye doesn't count, he did something entirely different. No, this is a classic hip hop album. Lots of range in both the production and Big Boi's styles, but obviously the product of the Dirty South and one of the most talented rappers alive. Too bad the label removed the songs featuring Andre 3000 due to the boys of Outkast being signed to separate labels.&lt;/p&gt;
    &lt;/div&gt;
    &lt;div class='player'&gt;
      &lt;h6&gt;#5&lt;/h6&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;div class='cover'&gt;
      &lt;img src='http://awardwinningfjords.com/albums/2010/4.jpg' /&gt;&lt;div&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class='content'&gt;
      &lt;h6&gt;Girl Talk&lt;/h6&gt;
      &lt;h4&gt;All Day&lt;/h4&gt;
      &lt;p&gt;Did anyone even know this album was coming out this year? It took me all of 2 days to fall in love with the most recent "best mashup album ever." Of course, it took the title again. Check out &lt;a href="http://mashupbreakdown.com/"&gt;this visual player&lt;/a&gt; and it's easy to be amazed by the complexity of the album.&lt;/p&gt;
    &lt;/div&gt;
    &lt;div class='player'&gt;
      &lt;h6&gt;#4&lt;/h6&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;div class='cover'&gt;
      &lt;img src='http://awardwinningfjords.com/albums/2010/3.jpg' /&gt;&lt;div&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class='content'&gt;
      &lt;h6&gt;Fang Island&lt;/h6&gt;
      &lt;h4&gt;Fang Island&lt;/h4&gt;
      &lt;p&gt;Last year I listened to a lot of Post Rock and eventually I hit the end of my interest in the same atmosphere of dread. Fang Island flips is all around and has created a fantastically fun instrumental album which a suprising amount of complexity for something you can nod-along to. I saw the band live and the 5! guitars were pretty impressive.&lt;/p&gt;
    &lt;/div&gt;
    &lt;div class='player'&gt;
      &lt;h6&gt;#3&lt;/h6&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;div class='cover'&gt;
      &lt;img src='http://awardwinningfjords.com/albums/2010/2.jpg' /&gt;&lt;div&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class='content'&gt;
      &lt;h6&gt;Kanye West&lt;/h6&gt;
      &lt;h4&gt;My Beautiful Dark Twisted Fantasy &lt;/h4&gt;
      &lt;p&gt;This album is the culmination of everything Kanye is, everything he has been through and everything he has been working on. Who is Kanye? He's a super popular rapper, he changing the speed and pitch of female vocalists to sounds somewhat whiny, he produced songs for Jay Z, he has had public women problems, his mother passed away, he played with drum machines and auto-tune, he loves fashion and has a flair for the ornate. Take all that, mix it up and you get a perfect album.&lt;/p&gt;
      &lt;p&gt;Emotional, bragging, massive strings, Jay Z twice, 30-minute music videos, still got that pitch shifting, artistic use of auto-tune, cohesive mood and a supreme feeling of confidence. This is not a hip hop album, it's a statement of art. Any portion which works differently than the rest of the album, such as Monster, just shows Kanye's balls in that experimentation. Finally, I love the way Kanye retreats on many songs, letting his music and his guests handle the rest of the song after his initial verse.&lt;/p&gt;
    &lt;/div&gt;
    &lt;div class='player'&gt;
      &lt;h6&gt;#2&lt;/h6&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li class="last"&gt;
    &lt;div class='cover'&gt;
      &lt;img src='http://awardwinningfjords.com/albums/2010/1.jpg' /&gt;&lt;div&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class='content'&gt;
      &lt;h6&gt;Gorillaz&lt;/h6&gt;
      &lt;h4&gt;Plastic Beach&lt;/h4&gt;
      &lt;p&gt;If you had asked me when I began writing this article if Plastic Beach was my favorite album of the year, I would have said no. But during the process of organizing these albums and looking at my Last.fm stats for the past year, it's clear that I listened to this album more often by any other. In fact, I listened to it 200% more than the second most-listened-to album. I love everything on this list, but Plastic Beach definitely has staying power.&lt;/p&gt;
      &lt;p&gt;Also surprising is the fact that I felt the album was a sad departure from the Danger Mouse produced Demon Days, which I loved. Plastic Beach had less interesting songs, a more deliberate pace, weird-ass songs like Superfast Jellyfish and a bit too much electronic influence for me. But you know the way it is, the difficult albums become your favorites. The impenetrable surface gives way to reveal depth. I now consider this album nearly perfect. The primary sign of that is when my iPhone loops back to the beginning of the album after it finishes and I neither notice or become bored by the repetition.&lt;/p&gt;
    &lt;/div&gt;
    &lt;div class='player'&gt;
      &lt;h6&gt;#1&lt;/h6&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Honorable Mentions:&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;div class='cover_small'&gt;
      &lt;img src='http://awardwinningfjords.com/albums/2010/15.jpg' /&gt;&lt;div&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class='content_small'&gt;
      &lt;h6&gt;Amia Venera Landscape&lt;/h6&gt;
      &lt;h4&gt;The Long Procession&lt;/h4&gt;
      &lt;p&gt;Absolutely huge metal album. If it'd been released earlier in the year, it would probably be in my top 10.&lt;/p&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;div class='cover_small'&gt;
      &lt;img src='http://awardwinningfjords.com/albums/2010/14.jpg' /&gt;&lt;div&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class='content_small'&gt;
      &lt;h6&gt;Gogol Bordello&lt;/h6&gt;
      &lt;h4&gt;Trans-Continental Hustle&lt;/h4&gt;
      &lt;p&gt;Most accessible Gogol Bordello album yet.&lt;/p&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;div class='cover_small'&gt;
      &lt;img src='http://awardwinningfjords.com/albums/2010/13.jpg' /&gt;&lt;div&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class='content_small'&gt;
      &lt;h6&gt;Janelle Monáe&lt;/h6&gt;
      &lt;h4&gt;The ArchAndroid&lt;/h4&gt;
      &lt;p&gt;Fantastically inventive hip hop album. It's all over the place and most of it works. Janelle is destined to be a superstar.&lt;/p&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;div class='cover_small'&gt;
      &lt;img src='http://awardwinningfjords.com/albums/2010/12.jpg' /&gt;&lt;div&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class='content_small'&gt;
      &lt;h6&gt;The Black Keys&lt;/h6&gt;
      &lt;h4&gt;Brothers&lt;/h4&gt;
      &lt;p&gt;Another departure from a Danger Mouse produced album I loved, also great.&lt;/p&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li class="last"&gt;
    &lt;div class='cover_small'&gt;
      &lt;img src='http://awardwinningfjords.com/albums/2010/11.jpg' /&gt;&lt;div&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class='content_small'&gt;
      &lt;h6&gt;Broken Bells&lt;/h6&gt;
      &lt;h4&gt;Broken Bells&lt;/h4&gt;
      &lt;p&gt;Danger Mouse gets his due. Abandonded by two of my favorites, but still able to turn out a fantastic album with the help of The Shins' James Mercer.&lt;/p&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>PubSub, Evented Programming and Javascript</title>
    <link rel="alternate" href="/2010/10/27/pubsub-evented-programming-and-javascript.html"/>
    <id>/2010/10/27/pubsub-evented-programming-and-javascript.html</id>
    <published>2010-10-27T00:00:00-08:00</published>
    <updated>2010-10-27T00:00:00-08:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;One of the buzzwords at jQuery Conference 2010 Boston (that mouthful makes Microsoft product names sound elegant), was &amp;quot;PubSub.&amp;quot; At least three speakers referenced the concept in different contexts and I overheard quite a bit of chatter about it in the hallways. I was surprised to see so many people getting their first introduction to the concept, especially given how event-oriented jQuery is. So, let&amp;#39;s take a look at what PubSub means, how you can use it in jQuery and some very naive example code.&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;One of the buzzwords at jQuery Conference 2010 Boston (that mouthful makes Microsoft product names sound elegant), was &amp;quot;PubSub.&amp;quot; At least three speakers referenced the concept in different contexts and I overheard quite a bit of chatter about it in the hallways. I was surprised to see so many people getting their first introduction to the concept, especially given how event-oriented jQuery is. So, let&amp;#39;s take a look at what PubSub means, how you can use it in jQuery and some very naive example code.&lt;/p&gt;

&lt;h2&gt;What is PubSub?&lt;/h2&gt;

&lt;p&gt;PubSub is short for &amp;quot;Publish and Subscribe.&amp;quot; Any piece of code can publish an event, or message, and any other piece of code can listen for that event. This allows code that responds to events to be easily decoupled from the code that creates an event. Here&amp;#39;s an example using jQuery&amp;#39;s &lt;tt&gt;$.ajax&lt;/tt&gt; functionality. Without PubSub you might write an AJAX request like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$.ajax({ 
  url: &amp;quot;/api/login.json&amp;quot;, 
  success: function(data) {
    // Update some HTML classes
    // Show the person who logged in
    // Refresh some lists of data
    // etc.
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Basically, anything that needs to happen when a user logs in must be written in that nested anonymous &amp;quot;success&amp;quot; function. The best solution for maintaining code, writing test cases and avoiding heavily-nested anonymous functions would be to make a function that handles each step of the login success separately.&lt;/p&gt;

&lt;h2&gt;PubSub-enabled AJAX success&lt;/h2&gt;

&lt;p&gt;For this example, we&amp;#39;ll use a very naive version of PubSub. We&amp;#39;ll use &lt;tt&gt;$.fn.trigger&lt;/tt&gt; and &lt;tt&gt;$.fn.bind&lt;/tt&gt; on the root document object. jQuery&amp;#39;s event api already handles the nuts and bolts of allowing multiple anonymous functions to respond to a single event, like &amp;quot;click&amp;quot; or &amp;quot;hover.&amp;quot; Using this technique, we can organize the AJAX success code like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Update some HTML classes
$(document).bind(&amp;quot;userDidLogin&amp;quot;, function(event, data) {
  $(&amp;quot;#loginButton&amp;quot;).hide();
  $(&amp;quot;#logoutButton&amp;quot;).show();
});

// Show the person who logged in
$(document).bind(&amp;quot;userDidLogin&amp;quot;, function(event, data) {
  $(&amp;quot;#header #user&amp;quot;).html(data.username);
});

// Refresh some lists of data
$(document).bind(&amp;quot;userDidLogin&amp;quot;, function(event, data) {
  $.each(data.items, function() {
    $(&amp;quot;#items&amp;quot;).append(this);
  });
});

$.ajax({ 
  url: &amp;quot;/api/login.json&amp;quot;, 
  success: function(data) {
    // Publish the event with the data
    $(document).trigger(&amp;quot;userDidLogin&amp;quot;, data);
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, it may look like we&amp;#39;ve created a lot more code, but now each of those subscribing functions can be placed anywhere. Say, for example, that we have a &lt;tt&gt;header.js&lt;/tt&gt; which handles changes to the header of the page. We could put only the subscribes that relate to the header in there, thus making our code much more organized. We can also being writing test cases for each of the subscribers now that they are decoupled and simplified.&lt;/p&gt;

&lt;h2&gt;PubSub Libraries&lt;/h2&gt;

&lt;p&gt;There are several available libraries for handling PubSub in javascript. The simplest jQuery form is what I&amp;#39;ve used here. &lt;a href="http://weblog.bocoup.com/publishsubscribe-with-jquery-custom-events"&gt;This article on the Bocoup blog&lt;/a&gt; compares the speed of the approach I&amp;#39;ve used above with a dedicated jq.pubsup library. Not surprisingly, anything dealing with the DOM is going to be slower than handling the events in memory.&lt;/p&gt;

&lt;p&gt;I personally use the &lt;a href="http://www.openajax.org/member/wiki/OpenAjax_Hub_1.0_Specification"&gt;OpenAjax Hub implementation&lt;/a&gt; in conjunction with the &lt;a href="http://v3.javascriptmvc.com/index.html#&amp;amp;who=jQuery.Controller"&gt;JavascriptMVC Controller&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Slides from my jQuery Conference Presentation</title>
    <link rel="alternate" href="/2010/10/18/slides-from-my-jquery-conference-presentation.html"/>
    <id>/2010/10/18/slides-from-my-jquery-conference-presentation.html</id>
    <published>2010-10-18T00:00:00-08:00</published>
    <updated>2010-10-18T00:00:00-08:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;Here are the slides which went along with my JavascriptMVC presentation at jQuery Conference Boston. You can avoid the nasty flash widget and &lt;a href="http://dl.dropbox.com/u/102356/organizing-code-with-javascriptmvc.pdf"&gt;download the PDF directly&lt;/a&gt; if you prefer.&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;Here are the slides which went along with my JavascriptMVC presentation at jQuery Conference Boston. You can avoid the nasty flash widget and &lt;a href="http://dl.dropbox.com/u/102356/organizing-code-with-javascriptmvc.pdf"&gt;download the PDF directly&lt;/a&gt; if you prefer.&lt;/p&gt;

&lt;p id="__ss_5467723"&gt;&lt;object id="__sse5467723" width="425" height="355"&gt;&lt;param name="movie" value="http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=jqconf-101017163158-phpapp01&amp;stripped_title=jqconf&amp;userName=tdreyno" /&gt;&lt;param name="allowFullScreen" value="true"/&gt;&lt;param name="allowScriptAccess" value="always"/&gt;&lt;embed name="__sse5467723" src="http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=jqconf-101017163158-phpapp01&amp;stripped_title=jqconf&amp;userName=tdreyno" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" width="425" height="355"&gt;&lt;/embed&gt;&lt;/object&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>SecondStoryJS Router now has a documentation website</title>
    <link rel="alternate" href="/2010/10/11/secondstoryjs-router-now-has-a-documentation-website.html"/>
    <id>/2010/10/11/secondstoryjs-router-now-has-a-documentation-website.html</id>
    <published>2010-10-11T00:00:00-08:00</published>
    <updated>2010-10-11T00:00:00-08:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;Like the title says, you can now learn everything you wanted to know about the JavascriptMVC3 router on the project website at:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://secondstory.github.com/secondstoryjs-router/"&gt;&lt;a href="http://secondstory.github.com/secondstoryjs-router/"&gt;http://secondstory.github.com/secondstoryjs-router/&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;Like the title says, you can now learn everything you wanted to know about the JavascriptMVC3 router on the project website at:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://secondstory.github.com/secondstoryjs-router/"&gt;&lt;a href="http://secondstory.github.com/secondstoryjs-router/"&gt;http://secondstory.github.com/secondstoryjs-router/&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://src.sencha.io/-30/http://awardwinningfjords.com/images/SecondStoryJS-Router.png" alt="SecondStoryJS Router" /&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Middleman Feature: Config.rb can setup Rack middleware</title>
    <link rel="alternate" href="/2010/10/11/middleman-feature-configrb-can-setup-rack-middleware.html"/>
    <id>/2010/10/11/middleman-feature-configrb-can-setup-rack-middleware.html</id>
    <published>2010-10-11T00:00:00-08:00</published>
    <updated>2010-10-11T00:00:00-08:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;Did you know that since &lt;a href="http://middlemanapp.com"&gt;Middleman&lt;/a&gt;&amp;#39;s &lt;tt&gt;config.rb&lt;/tt&gt; is evaluated by Sinatra that it can initialize Rack middleware?&lt;/p&gt;

&lt;p&gt;In the code sample below, I use the &lt;a href="http://github.com/wbzyl/rack-codehighlighter"&gt;rack-codehighlighter&lt;/a&gt; middleware to add syntax highlighting to a Middleman project.&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;Did you know that since &lt;a href="http://middlemanapp.com"&gt;Middleman&lt;/a&gt;&amp;#39;s &lt;tt&gt;config.rb&lt;/tt&gt; is evaluated by Sinatra that it can initialize Rack middleware?&lt;/p&gt;

&lt;p&gt;In the code sample below, I use the &lt;a href="http://github.com/wbzyl/rack-codehighlighter"&gt;rack-codehighlighter&lt;/a&gt; middleware to add syntax highlighting to a Middleman project.&lt;/p&gt;

&lt;script src="http://gist.github.com/621390.js?file=config.rb"&gt;&lt;/script&gt;
</content>
  </entry>
  <entry>
    <title>Handling Touch Events in jQuery Tools Scrollable</title>
    <link rel="alternate" href="/2010/09/22/handling-touch-events-in-jquery-tools-scrollable.html"/>
    <id>/2010/09/22/handling-touch-events-in-jquery-tools-scrollable.html</id>
    <published>2010-09-22T00:00:00-08:00</published>
    <updated>2010-09-22T00:00:00-08:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;&lt;strong&gt;[EDIT]: Looks like jQuery Tools Scrollable will support touch natively in their next release &lt;a href="http://github.com/jquerytools/jquerytools/commit/d63892b54a85e00bb73ce248f8db29acf327d293"&gt;according to this commit&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Today I was trying to optimize the experience of a website for the Apple iPad. One quick win is to respond to touch events on the device which will make your site feel much smoother and avoid the double tapping which Mobile Safari sometimes requires to activate javascript links. Additionally, your very nice paging controls may not be large enough to comfortably tap on the device (the common wisdom is touch targets need to be at least 40px square). A simple swipe can go a long way towards addressing these issues.&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;&lt;strong&gt;[EDIT]: Looks like jQuery Tools Scrollable will support touch natively in their next release &lt;a href="http://github.com/jquerytools/jquerytools/commit/d63892b54a85e00bb73ce248f8db29acf327d293"&gt;according to this commit&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Today I was trying to optimize the experience of a website for the Apple iPad. One quick win is to respond to touch events on the device which will make your site feel much smoother and avoid the double tapping which Mobile Safari sometimes requires to activate javascript links. Additionally, your very nice paging controls may not be large enough to comfortably tap on the device (the common wisdom is touch targets need to be at least 40px square). A simple swipe can go a long way towards addressing these issues.&lt;/p&gt;

&lt;p&gt;So, how can we get the Scrollable widget to handle touch events?&lt;/p&gt;

&lt;p&gt;First, you&amp;#39;ll obviously need the &lt;a href="http://flowplayer.org/tools/scrollable/index.html"&gt;jQuery Tools Scrollable&lt;/a&gt; widget.&lt;/p&gt;

&lt;p&gt;Next, you&amp;#39;ll need Rick Olson&amp;#39;s excellent &lt;a href="http://github.com/technoweenie/jquery.doubletap"&gt;DoubleTap for jQuery&lt;/a&gt; which adds touch events to jQuery&amp;#39;s event system.&lt;/p&gt;

&lt;p&gt;Finally, you&amp;#39;ll need to write the glue:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$.fn.handleSwipes = function() {
  return this.each(function() {
    var api = $(this).data(&amp;quot;scrollable&amp;quot;);

    api.getRoot().addSwipeEvents()
       .bind(&amp;#39;swipeleft&amp;#39;, function() {
         api.next();
       })
       .bind(&amp;#39;swiperight&amp;#39;, function() {
         api.prev();
       });
  });
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once you have all three of these components on a page, initialize them like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(&amp;quot;.scrollable&amp;quot;).scrollable().handleSwipes();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now touch swipes will trigger the next and previous behavious built into the widget. Enjoy.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Speaking at jQuery Conference: Boston 2010</title>
    <link rel="alternate" href="/2010/09/08/speaking-at-jquery-conference-boston-2010.html"/>
    <id>/2010/09/08/speaking-at-jquery-conference-boston-2010.html</id>
    <published>2010-09-08T00:00:00-08:00</published>
    <updated>2010-09-08T00:00:00-08:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;Two big announcements today.&lt;/p&gt;

&lt;p&gt;First, I&amp;#39;ll be speaking at &lt;a href="http://events.jquery.org/2010/boston/"&gt;jQuery Conference: Boston 2010&lt;/a&gt; which is taking place October 16-17. My talk will be on code organization and dependency management with &lt;a href="http://v3.javascriptmvc.com/index.html"&gt;JavascriptMVC 3&lt;/a&gt; and &lt;a href="http://github.com/jupiterjs/steal"&gt;steal&lt;/a&gt; being the two solutions that I&amp;#39;m most fond of.&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;Two big announcements today.&lt;/p&gt;

&lt;p&gt;First, I&amp;#39;ll be speaking at &lt;a href="http://events.jquery.org/2010/boston/"&gt;jQuery Conference: Boston 2010&lt;/a&gt; which is taking place October 16-17. My talk will be on code organization and dependency management with &lt;a href="http://v3.javascriptmvc.com/index.html"&gt;JavascriptMVC 3&lt;/a&gt; and &lt;a href="http://github.com/jupiterjs/steal"&gt;steal&lt;/a&gt; being the two solutions that I&amp;#39;m most fond of.&lt;/p&gt;

&lt;p&gt;Second, I&amp;#39;ve joined the JavascriptMVC Core Team, so I can actually appear to be an authority on the subject I&amp;#39;m presenting :)&lt;/p&gt;

&lt;p&gt;Thanks to the jQuery Conference organizers for accepting my talk and thanks to &lt;a href="http://jupiterjs.com/pages/justin-meyer"&gt;Justin Meyer&lt;/a&gt; and the rest of the JavascriptMVC Core Team for having me. See you all in Boston!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Mustache for JavascriptMVC 3</title>
    <link rel="alternate" href="/2010/08/09/mustache-for-javascriptmvc-3.html"/>
    <id>/2010/08/09/mustache-for-javascriptmvc-3.html</id>
    <published>2010-08-09T00:00:00-08:00</published>
    <updated>2010-08-09T00:00:00-08:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;If you&amp;#39;re a fan of the Mustache templating language, here&amp;#39;s a plugin to integrate it with JavascriptMVC 3.&lt;/p&gt;

&lt;p&gt;There are two ways of grabbing the code. If you have a very recent version of JavascriptMVC 3 you can use the new &lt;tt&gt;getjs&lt;/tt&gt; method of installing plugins. The command, from your project folder, looks like this:&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;If you&amp;#39;re a fan of the Mustache templating language, here&amp;#39;s a plugin to integrate it with JavascriptMVC 3.&lt;/p&gt;

&lt;p&gt;There are two ways of grabbing the code. If you have a very recent version of JavascriptMVC 3 you can use the new &lt;tt&gt;getjs&lt;/tt&gt; method of installing plugins. The command, from your project folder, looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./steal/js steal/getjs mustache
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Alternatively, you can grab the code from &lt;a href="http://github.com/tdreyno/mustache-javascriptmvc"&gt;the Github repository&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone git://github.com/tdreyno/mustache-javascriptmvc.git mustache
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Include it in your app:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;steal.plugins(&amp;quot;mustache&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Create some &lt;tt&gt;.mustache&lt;/tt&gt; files and use them normally:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(&amp;quot;#elem&amp;quot;).html(&amp;quot;//views/template.mustache&amp;quot;, { variable: &amp;quot;Value&amp;quot; })
&lt;/code&gt;&lt;/pre&gt;
</content>
  </entry>
  <entry>
    <title>The jQuery Tools API Pattern</title>
    <link rel="alternate" href="/2010/08/06/the-jquery-tools-api-pattern.html"/>
    <id>/2010/08/06/the-jquery-tools-api-pattern.html</id>
    <published>2010-08-06T00:00:00-08:00</published>
    <updated>2010-08-06T00:00:00-08:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;A common pattern for initializing jQuery plugins is by selecting all the instances of the target in the DOM and running the plugin once. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(&amp;quot;:input&amp;quot;).myPlugin();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But what if you need to inspect the plugin later or are only interested in one instance of the plugin. A friend of mine &lt;a href="http://forum.jquery.com/topic/return-customized-default-values-for-each-in-a-plugin"&gt;recently asked this question&lt;/a&gt; and my suggestion was to look at the way the &lt;a href="http://flowplayer.org/tools/"&gt;jQuery Tools&lt;/a&gt; project does it. For each of their plugins, they build an API object which only interacts with one specific element and they attach it to the element once the plugin has been initialized using the jQuery.data method. This also provides a clean way of checking if the plugin has already been initialized on a specific element.&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;A common pattern for initializing jQuery plugins is by selecting all the instances of the target in the DOM and running the plugin once. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(&amp;quot;:input&amp;quot;).myPlugin();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But what if you need to inspect the plugin later or are only interested in one instance of the plugin. A friend of mine &lt;a href="http://forum.jquery.com/topic/return-customized-default-values-for-each-in-a-plugin"&gt;recently asked this question&lt;/a&gt; and my suggestion was to look at the way the &lt;a href="http://flowplayer.org/tools/"&gt;jQuery Tools&lt;/a&gt; project does it. For each of their plugins, they build an API object which only interacts with one specific element and they attach it to the element once the plugin has been initialized using the jQuery.data method. This also provides a clean way of checking if the plugin has already been initialized on a specific element.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s how they run their scrollable plugin when called by jQuery:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// jQuery plugin implementation
$.fn.scrollable = function(conf) { 

  // already constructed --&amp;gt; return API
  var el = this.data(&amp;quot;scrollable&amp;quot;);
  if (el) { return el; }     

  conf = $.extend({}, $.tools.scrollable.conf, conf); 

  this.each(function() {      
    el = new Scrollable($(this), conf);
    $(this).data(&amp;quot;scrollable&amp;quot;, el); 
  });

  return conf.api ? el: this; 

};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;tt&gt;Scrollable&lt;/tt&gt; function handles plugin initialization on a per-element basis and returns scoped methods for interacting with that object. Its implementation looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function Scrollable(root, conf) {   
  // Setup variables

  // methods
  $.extend(self, {
    getConf: function() {
      return conf;  
    },      
    // et cetera
  });

  // callbacks  
  $.each([&amp;#39;onBeforeSeek&amp;#39;, &amp;#39;onSeek&amp;#39;, &amp;#39;onAddItem&amp;#39;], function(i, name) {

    // configuration
    if ($.isFunction(conf[name])) { 
      $(self).bind(name, conf[name]); 
    }

    self[name] = function(fn) {
      $(self).bind(name, fn);
      return self;
    };
  });  

  // run methods
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, let&amp;#39;s assume we have applied this pattern to our &lt;tt&gt;myPlugin&lt;/tt&gt; plugin. The interaction would look like this.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(&amp;quot;:input&amp;quot;).myPlugin();

var specificInput = $(&amp;quot;#myinput&amp;quot;);
var api = specificInput.data(&amp;quot;myPlugin&amp;quot;);

api.getConf()     // See the original config variables
api.doSomething() // run some code
api.destroy()     // remove the plugin

// Run a callback on this specific instance
api.onClick(function() { 
  // Click handler
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The pattern would also handle accidently running the plugin twice on a single element. For example, in the following script the plugin would only initialize the &lt;tt&gt;#myinput&lt;/tt&gt; element once:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(&amp;quot;#myinput&amp;quot;).myPlugin();
$(&amp;quot;:input&amp;quot;).myPlugin();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;a href="http://flowplayer.org/tools/documentation/scripting.html#api"&gt;full jQuery Tools API documentation&lt;/a&gt; is available on their website.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Style Guides Using Sass @extend</title>
    <link rel="alternate" href="/2010/07/30/style-guides-using-sass-extend.html"/>
    <id>/2010/07/30/style-guides-using-sass-extend.html</id>
    <published>2010-07-30T00:00:00-08:00</published>
    <updated>2010-07-30T00:00:00-08:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;There are some very common front-end development patterns that drive me crazy. CSS with every style related to a specific selector on one line and IE-only stylesheets with conditional comments are both common place and even encouraged by some. But the worst, in my opinion, is breaking our CSS into multiple files in an attempt to make them &amp;quot;themable.&amp;quot; Usually this results in something like a &lt;tt&gt;main.css&lt;/tt&gt; and a &lt;tt&gt;fonts.css&lt;/tt&gt; or &lt;tt&gt;colors.css&lt;/tt&gt;. Having a go-to file for designers to manipulate fonts and colors is very useful, but usually the structure of this secondary file mirrors the primary file and you end up with a lot of repetition. Furthermore, if your DOM structure changes, then you will need to update multiple files (&lt;tt&gt;ie.css&lt;/tt&gt; results in a similar problem).&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;There are some very common front-end development patterns that drive me crazy. CSS with every style related to a specific selector on one line and IE-only stylesheets with conditional comments are both common place and even encouraged by some. But the worst, in my opinion, is breaking our CSS into multiple files in an attempt to make them &amp;quot;themable.&amp;quot; Usually this results in something like a &lt;tt&gt;main.css&lt;/tt&gt; and a &lt;tt&gt;fonts.css&lt;/tt&gt; or &lt;tt&gt;colors.css&lt;/tt&gt;. Having a go-to file for designers to manipulate fonts and colors is very useful, but usually the structure of this secondary file mirrors the primary file and you end up with a lot of repetition. Furthermore, if your DOM structure changes, then you will need to update multiple files (&lt;tt&gt;ie.css&lt;/tt&gt; results in a similar problem).&lt;/p&gt;

&lt;p&gt;Sass&amp;#39; @extend feature allows us to have a &lt;tt&gt;style-guide.sass&lt;/tt&gt; in which designers can run free, but is not dependent on DOM structure. Let&amp;#39;s take a look at how I setup my style guides.&lt;/p&gt;

&lt;h2&gt;The Style Guide&lt;/h2&gt;

&lt;p&gt;The designer on the project has put together a wonderful style guide PDF which I will be implementing in Sass. Here is what it looks like:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://src.sencha.io/-30/http://awardwinningfjords.com/images/style-guide-full.png" /&gt;&lt;/p&gt;

&lt;p&gt;As you can see, each style has a title and some specifics for the text treatment.&lt;/p&gt;

&lt;p&gt;First I setup variables for our color palatte.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$primary-orange:   #fe8a16
$hover-orange:     #f67502
$steel-blue:       #303b41 
$bright-blue:      #4892bc
$dark-grey:        #4b4b48
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next I create some simple mixins to handle usage of custom fonts.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;=custom-font
  font-family: &amp;quot;Droid Sans&amp;quot;
  font-weight: normal

=bold-custom-font
  font-family: &amp;quot;Droid Sans Bold&amp;quot;
  font-weight: bold
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, I start defining the styles as classes. As you can see, I am using @extend to avoid repeating myself. I&amp;#39;m going to omit some of the styles in the guide for the sake of brevity.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.sg-heading-1
  +custom-font
  font-size: 32px
  line-height: 36px
  color: $steel-blue

.sg-heading-2
  @extend .sg-heading-1
  font-size: 20px
  line-height: 28px

.sg-heading-3
  @extend .sg-heading-2
  color: $bright-blue

.sg-main-body
  font-size: 14px
  line-height: 24px
  font-weight: normal
  color: $dark-grey

.sg-secondary-body
  @extend .sg-main-body
  font-size: 12px
  line-height: 18px

.sg-text-link-1
  font-weight: normal
  color: $primary-orange
  text-decoration: none
  &amp;amp;:hover
    color: $hover-orange
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Referencing the Style Guide&lt;/h2&gt;

&lt;p&gt;Now, when I go to implement a specific portion of the site, I can be concise by referencing the style guide. &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.info-box
  h2
    @extend .sg-heading-2
  ul li
    @extend .sg-text-link-1
  p
    @extend .sg-main-body
  dl
    @extend .sg-secondary-body
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here&amp;#39;s the resulting CSS output:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.sg-heading-1, .sg-heading-2, .sg-heading-3, .info-box h2 {
  font-family: &amp;quot;Droid Sans&amp;quot;;
  font-weight: normal;
  font-size: 32px;
  line-height: 36px;
  color: #303b41; }

.sg-heading-2, .sg-heading-3, .info-box h2 {
  font-size: 20px;
  line-height: 28px; }

.sg-heading-3 {
  color: #4892bc; }

.sg-main-body, .sg-secondary-body, .info-box dl, .info-box p {
  font-size: 14px;
  line-height: 24px;
  font-weight: normal;
  color: #4b4b48; }

.sg-secondary-body, .info-box dl {
  font-size: 12px;
  line-height: 18px; }

.sg-text-link-1, .info-box ul li {
  font-weight: normal;
  color: #fe8a16;
  text-decoration: none; }
  .sg-text-link-1:hover, .info-box ul li:hover {
    color: #f67502; }
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I have been incredibly happy with this approach. It has all the independence of the external &lt;tt&gt;fonts-and-colors.css&lt;/tt&gt; method, but is more flexible, uses less code and is more readable in both the Sass and CSS forms.&lt;/p&gt;

&lt;p&gt;I highly suggest getting your designer to build a style guide. It enforces consistency and keeps the randomness out of coding. Why should a site use every font size between 12px and 22px? Just pick a few sizes and standardize on them.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Sass @extend Introduction</title>
    <link rel="alternate" href="/2010/07/27/sass-extend-introduction.html"/>
    <id>/2010/07/27/sass-extend-introduction.html</id>
    <published>2010-07-27T00:00:00-08:00</published>
    <updated>2010-07-27T00:00:00-08:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;Sass (and SCSS) version 3 added support for the @extend directive which provides a means of class inheritance and combats the duplication of CSS which Sass mixins create. The earlier features of Sass were basically macros. They grabbed a piece of CSS from either a mixin definition or an external file and inserted that CSS into the output. @extend actually manipulates the selectors and uses CSS&amp;#39;s own cascading inheritance system simplify code and avoid duplication. Let&amp;#39;s look at some simple examples.&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;Sass (and SCSS) version 3 added support for the @extend directive which provides a means of class inheritance and combats the duplication of CSS which Sass mixins create. The earlier features of Sass were basically macros. They grabbed a piece of CSS from either a mixin definition or an external file and inserted that CSS into the output. @extend actually manipulates the selectors and uses CSS&amp;#39;s own cascading inheritance system simplify code and avoid duplication. Let&amp;#39;s look at some simple examples.&lt;/p&gt;

&lt;h2&gt;Multiple Sidebars and Fighting Class-itis&lt;/h2&gt;

&lt;p&gt;Imagine you have a sidebar with 3 boxes. The first box is logging in, the second box is for an already logged in user and the third box is simply a series of links (a tag cloud, maybe). All three boxes should be styled similarly so let&amp;#39;s start with the basics:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.sidebar-box
  +clearfix
  margin: 0 0 10px 0
  background: #eee
  +border-radius
  padding: 10px
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, any &lt;tt&gt;div&lt;/tt&gt; element we assign a class of &lt;tt&gt;sidebar-box&lt;/tt&gt; will be cleared, have a bottom margin, a background color, rounded-corners and an internal padding. Now let&amp;#39;s develop a login/logout box which has some specifics for form controls.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.sidebar-auth-box
  @extend .sidebar-box
  input[type=text]
    padding: 10px
    border: 1px solid #ccc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, any &lt;tt&gt;div&lt;/tt&gt; element we assign a class of &lt;tt&gt;sidebar-auth-box&lt;/tt&gt; will behave identically to the standard &lt;tt&gt;sidebar-box&lt;/tt&gt;, but will also have custom styling for form inputs. Finally, the logout box will be a darker color to help it stand out. Before @extend, we might have ended up with a tag like this: &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div id=&amp;quot;logout-box&amp;quot; class=&amp;quot;sidebar-box sidebar-auth-box&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, we can keep our HTML simple and continue with another @extend:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#login-box
  @extend .sidebar-auth-box
#logout-box
  @extend .sidebar-auth-box
  background: #bbb
#links-box
  @extend .sidebar-box
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This requires only an &lt;tt&gt;id&lt;/tt&gt; on the three boxes, but we don&amp;#39;t repeat ourselves. You&amp;#39;ll also notice that the plain CSS classes are still available to place on &lt;tt&gt;div&lt;/tt&gt; elements for rapid development or if custom id attributes are not needed. For those who are curious what the output looks like, here it is: &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.sidebar-box, 
.sidebar-auth-box, 
#login-box, 
#logout-box, 
#links-box {
  overflow: hidden;
  display: inline-block;
  margin: 0 0 10px 0;
  background: #eeeeee;
  -moz-border-radius: 5px;
  -webkit-border-radius: 5px;
  -o-border-radius: 5px;
  -ms-border-radius: 5px;
  -khtml-border-radius: 5px;
  border-radius: 5px;
  padding: 10px; }
  .sidebar-box, 
  .sidebar-auth-box, 
  #login-box, 
  #logout-box, 
  #links-box {
    display: block; }

.sidebar-auth-box input[type=text], 
#login-box input[type=text], 
#logout-box input[type=text] {
  padding: 10px;
  border: 1px solid #cccccc; }

#logout-box {
  background: #bbbbbb; }
&lt;/code&gt;&lt;/pre&gt;
</content>
  </entry>
  <entry>
    <title>JavascriptMVC Router</title>
    <link rel="alternate" href="/2010/07/23/javascriptmvc-router.html"/>
    <id>/2010/07/23/javascriptmvc-router.html</id>
    <published>2010-07-23T00:00:00-08:00</published>
    <updated>2010-07-23T00:00:00-08:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;&lt;strong&gt;[Edit]: The SecondStoryJS Router now has a documentation website at &lt;a href="http://secondstory.github.com/secondstoryjs-router/"&gt;&lt;a href="http://secondstory.github.com/secondstoryjs-router/"&gt;http://secondstory.github.com/secondstoryjs-router/&lt;/a&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;&lt;strong&gt;[Edit]: The SecondStoryJS Router now has a documentation website at &lt;a href="http://secondstory.github.com/secondstoryjs-router/"&gt;&lt;a href="http://secondstory.github.com/secondstoryjs-router/"&gt;http://secondstory.github.com/secondstoryjs-router/&lt;/a&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Modern web applications should function as naturally as their static page-based predecessors. As developers, we may need to store state in the location bar, but the user shouldn&amp;#39;t be able to tell the difference, except, hopefully, the Ajaxified version should be faster and smoother.&lt;/p&gt;

&lt;p&gt;To accomplish this, we need to move a lot of the libraries we&amp;#39;ve used on the backend into the world of Javascript. JavascriptMVC handles models, views and controllers, but it doesn&amp;#39;t provide a router. A router takes a string which contains state, such as &lt;tt&gt;/articles/my-first-article&lt;/tt&gt; and activates a specific piece of code which can respond to the request.&lt;/p&gt;

&lt;p&gt;At &lt;a href="http://secondstory.com/"&gt;Secondstory&lt;/a&gt;, we&amp;#39;ve been building upon JavascriptMVC and &lt;a href="http://github.com/joshbuddy/sherpa"&gt;Joshua Hull&amp;#39;s wonderful Sherpa route recognizer&lt;/a&gt;. Originally intended for usage in a NodeJS environment, Sherpa can take complex route definitions (as seen in Ruby on Rails) and map them to a destination while extracting variables from the route.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s a matching example from the Sherpa docs:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Router.add(&amp;#39;/test/:variable&amp;#39;).to(&amp;#39;testing&amp;#39;)
Router.recognize(&amp;#39;/test/iloveyou&amp;#39;) -&amp;gt;
  {
    &amp;quot;destination&amp;quot;: &amp;quot;testing&amp;quot;,
    &amp;quot;params&amp;quot;: {
      &amp;quot;variable&amp;quot;: &amp;quot;iloveyou&amp;quot;
    }
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also generate routes from parameters if you give the route a name:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Router.add(&amp;#39;/test/:variable&amp;#39;).to(&amp;#39;testing&amp;#39;).name(&amp;#39;testRoute&amp;#39;)
Router.generate(&amp;#39;testRoute&amp;#39;, { &amp;quot;variable&amp;quot;: &amp;quot;iloveyou&amp;quot; }) -&amp;gt;
  &amp;quot;/test/iloveyou&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Using in JavascriptMVC&lt;/h2&gt;

&lt;p&gt;First, grab a copy of the Sherpa library and put it in your resources directory. Then, in your JavascriptMVC project file you intialize Sherpa:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;steal.resources(&amp;quot;sherpa&amp;quot;)
     .then(function($) {

  var Router = new Sherpa.Router();
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you have to choose how tightly you want to couple routes and controllers. I&amp;#39;ve approached this in a two different ways.&lt;/p&gt;

&lt;p&gt;First, you can initialize a new controller on the document element when the route is matched:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Router.add(&amp;quot;/articles/:article_name&amp;quot;).to(&amp;quot;project_article&amp;quot;);

var key        = window.location.pathname,
    foundRoute = Router.recognize(key);

if (foundRoute &amp;amp;&amp;amp; $(document)[foundRoute.destination]) {
  $(document)[foundRoute.destination](foundRoute.params);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Alternatively, you could fire an OpenAjax event instead:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Router.add(&amp;quot;/articles/:article_name&amp;quot;).to(&amp;quot;project_article&amp;quot;);

var key        = window.location.pathname,
    foundRoute = Router.recognize(key);

if (foundRoute) {
  OpenAjax.hub.publish(foundRoute.destination, foundRoute.params);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Unfortunately, this will only run once, during the inital load of your project. In reality, you will want to watch the location bar throughout the usage of your application and either run controllers or publish events for each location change. JavascriptMVC provides the &lt;tt&gt;jquery/controller/history&lt;/tt&gt; which publishes &lt;tt&gt;history./current/url&lt;/tt&gt; OpenAjax events when the location changes. You could wire this up on your own, or you could use the class we&amp;#39;ve developed and written tests for.&lt;/p&gt;

&lt;h2&gt;SS.Router&lt;/h2&gt;

&lt;p&gt;The Secondstory router class uses &lt;tt&gt;jquery/controller/history&lt;/tt&gt; to listen to the location change events, then it matches against the Routes you have setup and finally sends a new OpenAjax event containing the value of the &lt;tt&gt;.to()&lt;/tt&gt; method you setup when definition the route. It also contains logic for making sure multiple events aren&amp;#39;t published for the same location if a user clicks the same link twice, for example.&lt;/p&gt;

&lt;p&gt;First, grab the code using JavascriptMVC&amp;#39;s built-in &lt;tt&gt;getjs&lt;/tt&gt; command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./steal/js steal/getjs ss/router
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So let&amp;#39;s go back to our project configuration file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;steal.plugins(&amp;quot;ss/router&amp;quot;)
     .then(function($) {

  Router.add(&amp;quot;/articles/:article_name&amp;quot;).to(&amp;quot;project_article&amp;quot;);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;#39;s it! When &lt;tt&gt;#/articles/my-first-article&lt;/tt&gt; is accessed, OpenAjax will publish a &lt;tt&gt;project&lt;em&gt;article&lt;/tt&gt; event with &amp;quot;my-first-article&amp;quot; as the &amp;quot;article&lt;/em&gt;name&amp;quot; parameter.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>UINavigationController implementation for SenchaTouch</title>
    <link rel="alternate" href="/2010/07/02/uinavigationcontroller-implementation-for-senchatouch.html"/>
    <id>/2010/07/02/uinavigationcontroller-implementation-for-senchatouch.html</id>
    <published>2010-07-02T00:00:00-08:00</published>
    <updated>2010-07-02T00:00:00-08:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;&lt;a href="http://www.sencha.com/products/touch/"&gt;SenchaTouch&lt;/a&gt; is web development framework for building native-looking mobile apps (iOS &amp;amp; Android) using standards-based web technologies such as HTML5 &amp;amp; CSS3. The Sencha website features &lt;a href="http://www.sencha.com/products/touch/demos.php"&gt;several very impressive demos&lt;/a&gt;. However, the framework is still in beta and many useful features are either incomplete or missing entirely.&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;&lt;a href="http://www.sencha.com/products/touch/"&gt;SenchaTouch&lt;/a&gt; is web development framework for building native-looking mobile apps (iOS &amp;amp; Android) using standards-based web technologies such as HTML5 &amp;amp; CSS3. The Sencha website features &lt;a href="http://www.sencha.com/products/touch/demos.php"&gt;several very impressive demos&lt;/a&gt;. However, the framework is still in beta and many useful features are either incomplete or missing entirely.&lt;/p&gt;

&lt;p&gt;One common interaction in iPhone applications is multi-level navigation which places a back button in the toolbar and allows the user to drill down into the data. In a native app, the &lt;tt&gt;UINavigationController&lt;/tt&gt; class manages this&amp;nbsp;hierarchy&amp;nbsp;of views and asks the currently selected view information about itself for display. For example, the current view may have a &lt;tt&gt;navigationTitle&lt;/tt&gt; of &amp;quot;Tier 1&amp;quot; and its child view may have a &lt;tt&gt;navigationTitle&lt;/tt&gt; of &amp;quot;Tier 2.&amp;quot;&amp;nbsp;UINavigationViewController will inspect these&amp;nbsp;views and make sure the correct title is visible in the navigation bar according to the currently selected view. See the diagram below:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://src.sencha.io/-30/http://files.posterous.com/temp-2010-07-02/bwAhfIJeckcGGuGdeEtylgJJanitascAdxyEdziptsBpmmaDGschrlzbyrIx/navigation_interface.jpg?AWSAccessKeyId=1C9REJR1EMRZ83Q7QRG2&amp;Expires=1280251911&amp;Signature=6PnQ/gmFo0jFitRh9D2S3Y2BOZc%3D" /&gt;&lt;/p&gt;

&lt;p&gt;SenchaTouch has something similar with the NestedList class which shows a&amp;nbsp;hierarchy&amp;nbsp;of &lt;tt&gt;Ext.List&lt;/tt&gt; panels. However, it would be nice to have something much more generic that allows any type of panel to be placed in the&amp;nbsp;hierarchy. Below this post is the source code for &lt;tt&gt;PanelStack&lt;/tt&gt; which functions much like&amp;nbsp;&lt;tt&gt;UINavigationController&lt;/tt&gt;. Each panel in the stack can push more panels beneath it or pop itself off the stack (identical to pressing the back button). Additionally, each panel is has an animation property which is run on push and reversed on pop making interactions such as flipping a card over to see its back and then returning to the front very easy to accomplish.&lt;/p&gt;

&lt;h2&gt;How to use PanelStack&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;var bottomLevel = new Ext.Panel({ title: &amp;quot;Start page&amp;quot; });
var firstLevel  = new Ext.Panel({ title: &amp;quot;Tier 1&amp;quot; });
var secondLevel = new Ext.Panel({ title: &amp;quot;Tier 2&amp;quot; });

var controller  = new PanelStack({ items: [bottomLevel] });
// Showing the bottomLevel, a title of &amp;quot;Start page&amp;quot; and no back button

controller.pushPanel(firstLevel);
// Showing the firstLevel, a title of &amp;quot;Tier 1&amp;quot; and a &amp;quot;back&amp;quot; button

controller.pushPanel(secondLevel);
// Showing the secondLevel, a title of &amp;quot;Tier 2&amp;quot; and a &amp;quot;back&amp;quot; button

controller.popPanel();
// Showing the firstLevel, a title of &amp;quot;Tier 1&amp;quot; and a &amp;quot;back&amp;quot; button

// Manually tapping the &amp;quot;back&amp;quot; button
// Showing the bottomLevel, a title of &amp;quot;Start page&amp;quot; and no back button
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;The current code for the class is below.&lt;/h2&gt;

&lt;script src="http://gist.github.com/461744.js"&gt;&lt;/script&gt;
</content>
  </entry>
  <entry>
    <title>State Machine Controller for JavascriptMVC</title>
    <link rel="alternate" href="/2010/05/27/state-machine-controller-for-javascriptmvc.html"/>
    <id>/2010/05/27/state-machine-controller-for-javascriptmvc.html</id>
    <published>2010-05-27T00:00:00-08:00</published>
    <updated>2010-05-27T00:00:00-08:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;&lt;strong&gt;[Updated]: The repository has moved to &lt;a href="http://github.com/secondstory/secondstoryjs-statemachine"&gt;http://github.com/secondstory/secondstoryjs-statemachine&lt;/a&gt;. The main class has been renamed to SS.Controller.StateMachine&lt;/strong&gt;&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;&lt;strong&gt;[Updated]: The repository has moved to &lt;a href="http://github.com/secondstory/secondstoryjs-statemachine"&gt;http://github.com/secondstory/secondstoryjs-statemachine&lt;/a&gt;. The main class has been renamed to SS.Controller.StateMachine&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;[Edit]: The SecondStoryJS State Machine now has a documentation website at &lt;a href="http://secondstory.github.com/secondstoryjs-statemachine/"&gt;&lt;a href="http://secondstory.github.com/secondstoryjs-statemachine/"&gt;http://secondstory.github.com/secondstoryjs-statemachine/&lt;/a&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I&amp;#39;ve been attempting to write this article for a week, but I&amp;#39;ve been unable to justify the usefulness of Finite State Machines in words. I tried written up some typical examples, such as the classic vending machine, but it kept getting very obtuse very quickly. Instead, let me just say, that I love Finite State Machines. I think they are the only technique I learned at school and when I am able to replace dozens of &lt;tt&gt;if&lt;/tt&gt; statements with a Finite State Machine, it makes me very happy and feel secure. Being able to monitor an object&amp;#39;s state, rather than just querying its instance variables, makes testing simpler and helps me find bugs.&lt;/p&gt;

&lt;p&gt;If you need a Finite State Machine for JavascriptMVC, I&amp;#39;ve got one for you. In fact, every controller in my application uses it. The most common use-case is asyncronous loading, rendering and eventually interaction. Here&amp;#39;s an example:&lt;/p&gt;

&lt;h2&gt;Finite State Machine Implementation&lt;/h2&gt;

&lt;p&gt;The goal of the following controller is to have widgets or panels which are made visible by clicking a link. Only one of the widgets may be visible at the same time and if you click the link for the currently open widget, it should toggle off. Each widget also contains a link for closing itself (&lt;tt&gt;a.close&lt;/tt&gt;).&lt;/p&gt;

&lt;p&gt;A state machine can respond to jQuery events, global OpenAjax messages and internal &amp;quot;publishState&amp;quot; commands. The destination states define which state we are moved into on an event. Finally, &amp;quot;onEnter&amp;quot; and &amp;quot;onExit&amp;quot; can point to either instance methods or global OpenAjax messages.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SS.Controller.StateMachine.extend(&amp;quot;MyNavigation&amp;quot;, {}, {
  states: {
    // Any click of the a.close element will close everything
    global:         { &amp;quot;a.close click&amp;quot;:            &amp;quot;initial&amp;quot; },

    // Initial is the default state.
    // It will also represent &amp;quot;all closed&amp;quot;
    initial:        { onEnter:                    &amp;quot;closeDrawers&amp;quot;,
                      &amp;quot;#header-thread a click&amp;quot;:   &amp;quot;threadIsOpen&amp;quot;,
                      &amp;quot;#header-timeline a click&amp;quot;: &amp;quot;timelineIsOpen&amp;quot; },

    threadIsOpen:   { onEnter:                    &amp;quot;drawers.toggle.thread&amp;quot;,
                      &amp;quot;#header-thread a click&amp;quot;:   &amp;quot;initial&amp;quot;,
                      &amp;quot;#header-timeline a click&amp;quot;: &amp;quot;timelineIsOpen&amp;quot; },

    timelineIsOpen: { onEnter:                    &amp;quot;drawers.toggle.timeline&amp;quot;,
                      &amp;quot;#header-timeline a click&amp;quot;: &amp;quot;initial&amp;quot;,
                      &amp;quot;#header-thread a click&amp;quot;:   &amp;quot;threadIsOpen&amp;quot; }
  },

  &amp;quot;drawers.toggle.* subscribe&amp;quot;: function(event_name) {
    this.closeDrawers();
    var elem_name = &amp;quot;#&amp;quot; + event_name.split(&amp;quot;.&amp;quot;).pop();
    $(elem_name).show();
  },

  closeDrawers: function() {
    $(&amp;quot;#thread, #timeline&amp;quot;).hide();
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Clicking on #header-thread, #header-timeline and then #header-timeline again will print the following debug output:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;steal.js INFO: FSM (MyNavigation.instance0): initial -&amp;gt; threadsOpen
steal.js INFO: FSM (MyNavigation.instance0): threadsOpen -&amp;gt; timelineOpen
steal.js INFO: FSM (MyNavigation.instance0): timelineOpen -&amp;gt; initial
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;How Do I Get It?&lt;/h2&gt;

&lt;p&gt;First, get the &lt;a href="http://v3.javascriptmvc.com/index.html"&gt;current version of JavascriptMVC 3 from their site&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Second, grab the code using JavascriptMVC&amp;#39;s built-in &lt;tt&gt;getjs&lt;/tt&gt; command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./steal/js steal/getjs ss/state_machine
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, create a Site and a Controller (see the &lt;a href="http://v3.javascriptmvc.com/index.html#&amp;amp;who=getstarted"&gt;JavascriptMVC Getting Started Guide&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;We need to add our new plugin to the site. In appname.js, add the following to your &lt;tt&gt;steal&lt;/tt&gt; command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.plugins(&amp;quot;ss/controller/state_machine&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you can extend your Controllers from &lt;tt&gt;SS.Controller.StateMachine&lt;/tt&gt;.&lt;/p&gt;

&lt;h2&gt;Other/Better Examples?&lt;/h2&gt;

&lt;p&gt;I would love a chance to show how this works will a less contrived example. If you&amp;#39;ve a complex controller and think something like this would be useful, then please email me and I&amp;#39;ll port your code to using a state machine.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>HTML5 localStorage for JavascriptMVC</title>
    <link rel="alternate" href="/2010/05/21/html5-localstorage-for-javascriptmvc.html"/>
    <id>/2010/05/21/html5-localstorage-for-javascriptmvc.html</id>
    <published>2010-05-21T00:00:00-08:00</published>
    <updated>2010-05-21T00:00:00-08:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;&lt;strong&gt;[Updated]: The new Github repository location is: &lt;a href="http://github.com/secondstory/secondstoryjs-html5storage"&gt;http://github.com/secondstory/secondstoryjs-html5storage&lt;/a&gt;. The new class names are SS.Model.HTML5Store.Local and SS.Model.HTML5Store.Session&lt;/strong&gt;&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;&lt;strong&gt;[Updated]: The new Github repository location is: &lt;a href="http://github.com/secondstory/secondstoryjs-html5storage"&gt;http://github.com/secondstory/secondstoryjs-html5storage&lt;/a&gt;. The new class names are SS.Model.HTML5Store.Local and SS.Model.HTML5Store.Session&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For those who don&amp;#39;t know, JavascriptMVC 3 is a framework for building complex web applications based on jQuery. jQuery is a wonderful tool for manipulating the DOM, but it doesn&amp;#39;t provide any system for dependency resolution, file organization or a separation of concerns. JavascriptMVC 3, which is currently in a very solid alpha form, provides a strong MVC foundation for oragnizing your code.&lt;/p&gt;

&lt;p&gt;The View component supports Ejs (a javascript variant of Erb), Jaml (a javascript templating system inspired by Haml) and a basic template implementation based on &lt;a href="http://ejohn.org/blog/javascript-micro-templating/"&gt;John Resig&amp;#39;s blog post&lt;/a&gt; called Micro.&lt;/p&gt;

&lt;p&gt;The Controller layer is based on responding to events, both normal jQuery DOM events (and special events) as well as OpenAjax events.&lt;/p&gt;

&lt;p&gt;Finally, the Model component is basically just a Class which you can wire into your existing REST API with the help of some plugins and a little code. The Model component comes with a backing data store that can be swapped out. The default is an in-memory object that&amp;#39;s provided as a placeholder for future data stores.&lt;/p&gt;

&lt;p&gt;I suggest reading this &lt;a href="http://jupiterjs.com/pages/javascriptmvc#news/too-enterprisey"&gt;blog post on JavascriptMVC&amp;#39;s impressed unit/functional testing system&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;HTML5 is the new hotness and so I&amp;#39;ve implemented &lt;tt&gt;localStorage&lt;/tt&gt; and &lt;tt&gt;sessionStorage&lt;/tt&gt; backends for the JavascriptMVC 3 Model system. This means that once data is loaded into your model (via Ajax) it can be cached on the local machine until the end of the session or &amp;quot;forever&amp;quot; (until the localStorage cache is cleared). The difference between &lt;tt&gt;sessionStorage&lt;/tt&gt; and browser cookies is that cookies are sent on every request so they are not well suited for storing lots of data. &lt;/p&gt;

&lt;h2&gt;How Do I Use It?&lt;/h2&gt;

&lt;p&gt;First, get the &lt;a href="http://v3.javascriptmvc.com/index.html"&gt;current version of JavascriptMVC 3 from their site&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Second, grab the code using JavascriptMVC&amp;#39;s built-in &lt;tt&gt;getjs&lt;/tt&gt; command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./steal/js steal/getjs ss/model/html5store
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, create a Site and a Model (see the &lt;a href="http://v3.javascriptmvc.com/index.html#&amp;amp;who=getstarted"&gt;JavascriptMVC Getting Started Guide&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;We need to add our new plugin to the site. In appname.js, add the following to your &lt;tt&gt;steal&lt;/tt&gt; command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.plugins(&amp;quot;ss/model/html5store&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Okay, so we have a model and now we need to add the new store system:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jQuery.Model.extend(&amp;quot;MyModel&amp;quot;,
{
  setup: function(){
    // Alternatively, use SS.Model.HTML5Store.Local
    this.storeType = SS.Model.HTML5Store.Session; 
    this._super.apply(this, arguments);
  }
},
{
}
);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, whenever you create a MyModel with a unique id, it will be added to the HTML5 sessionStorage. You&amp;#39;re responsible for updating the store if the model changes and for querying the store to see if it has a copy of the model we&amp;#39;re looking for. Here&amp;#39;s some boilerplate code to do that:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function updateModel(params) {
  MyModel.store.destroy(params.id);
  MyModel.store.create(params);
}

function isInStore(id) {
  return MyModel.store.findOne(id);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using this plugin, I&amp;#39;ve been able to decrease the number of Ajax requests in my data-heavy webapp to 0 after the initial load. You could also preload data in the background using this technique to vastly improve the speed of your site.&lt;/p&gt;

&lt;h2&gt;Browser Support&lt;/h2&gt;

&lt;p&gt;HTML5 localStorage is supported in IE8, Firefox 3.5+, Safari 4+, Chrome 4+ and Opera 10.50+. If localStorage is unavailable, the plugin will degrade to the default in-memory store.&lt;/p&gt;

&lt;h2&gt;jQuery-offline&lt;/h2&gt;

&lt;p&gt;For a framework-agnostic version of this plugin, please take a look at &lt;a href="http://github.com/wycats/jquery-offline"&gt;Yahuda Katz&amp;#39; jquery-offline&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Apple-style Gradient Text Headlines in SCSS/SASS</title>
    <link rel="alternate" href="/2010/04/13/apple-style-gradient-text-headlines-in-scsssass.html"/>
    <id>/2010/04/13/apple-style-gradient-text-headlines-in-scsssass.html</id>
    <published>2010-04-13T00:00:00-08:00</published>
    <updated>2010-04-13T00:00:00-08:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;Apple&amp;#39;s effect looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://src.sencha.io/-30/http://dl.dropbox.com/u/102356/Screenshot.png" /&gt;&lt;/p&gt;

&lt;p&gt;This effect only works in Webkit-based browsers like Safari and Chrome at this time and requires Sass 3 and the most recent version of Compass:&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;Apple&amp;#39;s effect looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://src.sencha.io/-30/http://dl.dropbox.com/u/102356/Screenshot.png" /&gt;&lt;/p&gt;

&lt;p&gt;This effect only works in Webkit-based browsers like Safari and Chrome at this time and requires Sass 3 and the most recent version of Compass:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;h1 {
  @include linear-gradient(color-stops(#999, black));
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or, if you prefer plain CSS:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;h1 {
  background-image: -webkit-gradient(linear, 0% 0%, 0% 100%, 
                    color-stop(0%, #999999), 
                    color-stop(100%, #000000));
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which renders as:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://src.sencha.io/-30/http://dl.dropbox.com/u/102356/Screenshot-1.png" /&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Sass 3 Color Manipulation</title>
    <link rel="alternate" href="/2010/04/12/sass-3-color-manipulation.html"/>
    <id>/2010/04/12/sass-3-color-manipulation.html</id>
    <published>2010-04-12T00:00:00-08:00</published>
    <updated>2010-04-12T00:00:00-08:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;I was going to write about the Compass Colors plugin merging into Sass 3, but it looks like Sass-maintainer Nathan Weizenbaum has already written a great article about it.&lt;/p&gt;

&lt;p&gt;Read about &lt;a href="http://nex-3.com/posts/89-powerful-color-manipulation-with-sass"&gt;Powerful Color Manipulation with Sass&lt;/a&gt; on his blog.&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;I was going to write about the Compass Colors plugin merging into Sass 3, but it looks like Sass-maintainer Nathan Weizenbaum has already written a great article about it.&lt;/p&gt;

&lt;p&gt;Read about &lt;a href="http://nex-3.com/posts/89-powerful-color-manipulation-with-sass"&gt;Powerful Color Manipulation with Sass&lt;/a&gt; on his blog.&lt;/p&gt;

&lt;p&gt;Just for kicks, here is a relavant portion of Sass colors that I use on this blog:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$font-color:         darken(#4e4c49, 5)
$darker-font-color:  #4e4c49
$header-color:       darken($font-color, 10)
$border-color:       #d0d0d0
$link-color:         #af512c

#social
  color: lighten($font-color, 40)

#footer
  background: darken(#603d17, 5)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These functions are also used in &lt;a href="http://brandonmathis.com/projects/fancy-buttons/demo/"&gt;Brandon Mathis&amp;#39; fantastic Fancy Button library&lt;/a&gt;. Brandon and &lt;a href="http://www.oddbird.net/susy/"&gt;Susy&amp;#39;s&lt;/a&gt; Eric Meyer are both &lt;a href="http://chriseppstein.github.com/blog/2010/04/11/compass-core-team/"&gt;Compass core contributors&lt;/a&gt; now. Congratulations to both and thanks for all the fantastic code.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Example SCSS (Sassy CSS) File</title>
    <link rel="alternate" href="/2010/04/09/example-scss-sassy-css-file.html"/>
    <id>/2010/04/09/example-scss-sassy-css-file.html</id>
    <published>2010-04-09T00:00:00-08:00</published>
    <updated>2010-04-09T00:00:00-08:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;I&amp;#39;m working on a new site which will eventually run on PHP5. Going back to raw CSS isn&amp;#39;t really an option because I value my time and sanity. Thankfully there may be a way to run Sass&amp;#39; new format, &lt;a href="http://nex-3.com/posts/96-scss-sass-is-a-css-extension"&gt;SCSS&lt;/a&gt;, under PHP using &lt;a href="http://github.com/anthonyshort/csscaffold"&gt;Anthony Short&amp;#39;s CSScaffold project&lt;/a&gt;. The project provides a CSS preprocessor, like Sass, which runs on PHP. Currently, the project&amp;#39;s syntax is similar, but different, than either Less or SCSS. Thankfully, Anthony has said he is working on bringing CSScaffold in-line with the SCSS syntax.&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;I&amp;#39;m working on a new site which will eventually run on PHP5. Going back to raw CSS isn&amp;#39;t really an option because I value my time and sanity. Thankfully there may be a way to run Sass&amp;#39; new format, &lt;a href="http://nex-3.com/posts/96-scss-sass-is-a-css-extension"&gt;SCSS&lt;/a&gt;, under PHP using &lt;a href="http://github.com/anthonyshort/csscaffold"&gt;Anthony Short&amp;#39;s CSScaffold project&lt;/a&gt;. The project provides a CSS preprocessor, like Sass, which runs on PHP. Currently, the project&amp;#39;s syntax is similar, but different, than either Less or SCSS. Thankfully, Anthony has said he is working on bringing CSScaffold in-line with the SCSS syntax.&lt;/p&gt;

&lt;p&gt;Happy days! I can do the early development in Sass or SCSS using their normal Ruby library and plan for a perfect future where that same stylesheet can run unmodified on the PHP-only server. If I were a Sass diehard, I could write it all in Sass and then use the new &lt;tt&gt;sass-convert&lt;/tt&gt; tool to migrate to SCSS before deployment. However, I&amp;#39;d actually like to give SCSS a spin so I&amp;#39;ve built out the styles in plain old SCSS. The result is include below.&lt;/p&gt;

&lt;p&gt;If anyone has questions or would like some more clarification on the following, &lt;a href="mailto:me@tdreyno.com"&gt;shoot me an email&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;An Example SCSS File&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;@import &amp;quot;compass&amp;quot;;
@import &amp;quot;blueprint&amp;quot;;
@import &amp;quot;blueprint/fancy_type&amp;quot;;

$blueprint-grid-columns:     5;
$blueprint-grid-width:       150px;
$blueprint-grid-margin:      20px;

$blueprint-font-family:      Helvetica Neue, Arial, Helvetica, sans-serif;
$blueprint-fixed-font-family:&amp;#39;andale mono&amp;#39;, &amp;#39;lucida console&amp;#39;, monospace;
$blueprint-font-size:        12px;

$text-color:                 #555555;
$light-text-color:           #a0a0a0;
$quote-text-color:           #f27a00;
$disclosure-text-color:      #ed7c06;

$thick-border:               8px solid black;
$dotted-border:              1px dotted #999999;

$header-background-color:    #f07c05;
$paging-background-color:    black;
$unfocused-background-color: #f1f0ec;
$quote-background-color:     #f1f0ec;

$story-title-color:          #f07c05;

@include global-reset;
@include blueprint-typography;

body {
  background: $unfocused-background-color image_url(&amp;quot;white-bg.jpg&amp;quot;) repeat-y 50% 0;
  color: $text-color;
}

.content_wrapper {
  @include container;
  width: 910px;
}

#header {
  height: 72px;
  background: $header-background-color;
  @include clearfix;

  h1 {
    color: white;
    @include float-left;
    a {
      @include replace-text(&amp;quot;logo.jpg&amp;quot;);
      width: 116px;
      height: 72px;
      display: block;
      text-decoration: none;
    }
  }

  ul {
    @include horizontal-list; 
    padding: 0 0 0 25px;
    li {
      @include incr(18px);
      padding: 0 20px 0 0;
      text-transform: uppercase;
      a { 
        color: #febf0f;
        text-decoration: none;
        width: 100px;
        height: 72px;
        display: block;
      }
      &amp;amp;#header-threads a {
        @include replace-text(&amp;quot;header-threads-text.jpg&amp;quot;);
      }
      &amp;amp;#header-timeline a {
        @include replace-text(&amp;quot;header-timeline-text.jpg&amp;quot;);
      }
    }
  } 
}

#paging {
  background: $paging-background-color;
  height: 33px;
  padding: 15px 0 0 0;

  h6 {
    @include float-left;
    color: #908f8b;
    padding-right: 20px;
    text-transform: uppercase;
    a { 
      color: #f07b07; 
      text-decoration: none;
    }
  }

  ul {
    @include horizontal-list;
    li {
      padding: 3px 4px;
      a { 
        color: #4c4c4c;
        @include replace-text(&amp;quot;thread-paging-inactive-bullet.jpg&amp;quot;);
        width: 10px;
        height: 10px;
        display: block;
      }
      &amp;amp;.active a { 
        color: #f17d06;
        background-image: image_@import &amp;quot;compass&amp;quot;;
      }
    } 
  }
}

#content {
    position: relative;
    #previous {
      position: absolute;
      top: 0;
      left: 0;
      text-align: right;
    }
    #next {
      position: absolute;
      top: 0;
      right: 0;
      text-align: left;
    }
}

#thread {
    @include container;
  width: 910px;
    top: 0px;
    left: 0px;

    @include transition-property(left);
    @include transition-duration(0.5s);
    @include transition-timing-function(ease-in-out);

    @for $i from 0 through 30 {
    &amp;amp;.position#{$i} {
      left: ($i * -910px); 
    }
  }
}

.js {
  #content {
    overflow: hidden;
    width: 100%;
  }

  #thread { 
    padding: 0;
    width: 5000px;
    position: absolute;
  }
}

.story {
  @include float-left;
  width: 810px;
  padding: 0 50px;

  h4.date {
    @include float-right;
    @include span(1);
    background: $unfocused-background-color;
    padding: 10px 20px;
    @include border-radius(3px);
  }

  h1 {
    padding: 40px 0 20px 0;
    border-bottom: $thick-border;
    color: $story-title-color;
    @include incr(30px);
  }

  .artifacts {
    @include column(3);

    .row {
      @include clearfix;
      border-bottom: $dotted-border;
      margin-bottom: $blueprint-grid-margin;
    }

    .artifact {
      color: $light-text-color;
      img {
        margin-bottom: 0.5em;
      }
      a {
        font-weight: bold;
        text-decoration: none;
        color: #0a83e0;
      }
    }

    .threecol { @include column(3); }
    .twocol   { @include column(2); }
    .onecol   { @include column(1); }
    .last     { @include last;      }
  }

  .information {
    @include column(1.6, true);
    border-bottom: $dotted-border;
    margin-left: 40px;

    h2 {
      @include incr(20px, $blueprint-font-size, 35px);
    }

    .textblock p {
      @include incr(13px, $blueprint-font-size, 26px);
    }

    .quote {
      color: $quote-text-color;
      blockquote {
        @include incr(18px, $blueprint-font-size, 30px);
        color: $quote-text-color;
        margin: 0;
        padding: 12px 18px;
        background: $quote-background-color;
        @include border-radius(5px);
      }
      cite {
        display: block;
        padding: 0.5em 18px 1.5em 18px;
      }
    }

    .disclosure {
      border-top: $dotted-border;
      h5 {
        padding: 10px 0;
        margin: 0;
        color: $disclosure-text-color;
      }
      p {
        color: #a8a8a8;
      }
    }
  }
}

#footer {
  @include container;
  background: white;
  width: 810px;
  padding: $blueprint-grid-margin 0;

  .inner {
    border-top: $thick-border;
    padding: 30px 0;
  }

  p {
    @include float-right;
    @include incr(10px);
    color: #b3b3b3;
  }

  ul {
    @include horizontal-list; 

    li {
      padding: 0 30px 0 0;
      a { 
        text-decoration: none;
        color: #ef7a06; 
      }
    } 
  }
}
&lt;/code&gt;&lt;/pre&gt;
</content>
  </entry>
  <entry>
    <title>Sass 3 Syntax</title>
    <link rel="alternate" href="/2010/03/31/sass-3-syntax.html"/>
    <id>/2010/03/31/sass-3-syntax.html</id>
    <published>2010-03-31T00:00:00-08:00</published>
    <updated>2010-03-31T00:00:00-08:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;&lt;strong&gt;Edit: Added section on hyphens and underscores as requested by &lt;a href="http://twitter.com/chriseppstein"&gt;Chris Eppstein&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Today a beta for Sass 3 was released. It comes with some interesting new syntax options so let&amp;#39;s get it installed and dive into the new syntax and directives.&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;&lt;strong&gt;Edit: Added section on hyphens and underscores as requested by &lt;a href="http://twitter.com/chriseppstein"&gt;Chris Eppstein&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Today a beta for Sass 3 was released. It comes with some interesting new syntax options so let&amp;#39;s get it installed and dive into the new syntax and directives.&lt;/p&gt;

&lt;h2&gt;Installation&lt;/h2&gt;

&lt;p&gt;Go ahead and grab the Sass 3 prerelease by running:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gem install haml --pre
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Converting Old Sass Files to New Syntax&lt;/h2&gt;

&lt;p&gt;The old &lt;tt&gt;css2sass&lt;/tt&gt; command line tool has been replaced with &lt;tt&gt;sass-convert&lt;/tt&gt;. Like the old tool, &lt;tt&gt;sass-convert&lt;/tt&gt; can change css files into sass files. It can also convert css files to the new, optional, scss format. Finally, it can convert between scss and sass as well as upgrading old sass files to the new syntax.&lt;/p&gt;

&lt;p&gt;Converting from Sass 2 to Sass 3 is as easy as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sass-convert --in-place --from sass2 style.sass
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There is also a &lt;tt&gt;--to&lt;/tt&gt; flag which Sass 3 is the default. You could also convert &lt;tt&gt;--to scss&lt;/tt&gt; if you wanted to experiment with that format.&lt;/p&gt;

&lt;h2&gt;New Syntax #1: No more equals signs&lt;/h2&gt;

&lt;p&gt;In Sass 2, lines which required parsing, contained functions or math had to begin with an equals sign instead of the normal CSS colon. Sass 3 has removed this requirement and we can all go back to using a colon for separating a style directive and it&amp;#39;s value in CSS, Sass 3 or SCSS.&lt;/p&gt;

&lt;p&gt;Before:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;body
  background= image_url(&amp;quot;background.png&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;body
  background: image_url(&amp;quot;background.png&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;New Syntax #2: Variable prefix&lt;/h2&gt;

&lt;p&gt;Formerly, the way Sass defined variables was using the exclamation point prefix. However, since the exclamation point is already used in CSS (with the !important directive) it always felt a little strange to use the same symbol in two different contexts. In Sass 3, variables are now defined with the dollar sign prefix similar to PHP.&lt;/p&gt;

&lt;p&gt;Before:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;!background_color= #ffffff
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$background_color: #ffffff
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One nice side effect of this change is the ability to mix quoted and unquoted strings on the same line. Something I do often for font declarations and now I no longer need to wrap the whole section in an additional level of quotes.&lt;/p&gt;

&lt;p&gt;Before:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;!font_family= &amp;quot;&amp;#39;Lucida Sans&amp;#39;, &amp;#39;Lucida Grande&amp;#39;, arial, sans-serif&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$font_family: &amp;#39;Lucida Sans&amp;#39;, &amp;#39;Lucida Grande&amp;#39;, arial, sans-serif
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;New Syntax #3: Default variable values&lt;/h2&gt;

&lt;p&gt;Variable assignment used to use the ||= syntax from Ruby to only update a variable when it did not already exist. However, since the equals sign is no longer used in Sass 3, there is now a new, more CSS-like syntax for conditionally assigning a variable. Sass 3 uses a directive similar to !important, called !default, which is placed at the end of the assignment.&lt;/p&gt;

&lt;p&gt;Before:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;!font_size ||= 12px
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$font_size: 12px !default
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;New Syntax #4: Interchangeable underscores and hyphens&lt;/h2&gt;

&lt;p&gt;In the past, variables in Sass would only work with underscores used to separate the different &amp;quot;parts&amp;quot; of the variable name. This format is very Ruby-like, but I personally prefer to use hyphens in my CSS. Sass 3 allows both underscores and hyphens to be used, but there is an interesting twist. Sass 3 will allow their use interchangeably. If the variable is defined with underscores, it can still be called with hyphens. This should save some frustration for those using a Sass framework like &lt;a href="http://compass-style.org/"&gt;Compass&lt;/a&gt; or &lt;a href="http://www.oddbird.net/susy/"&gt;Susy&lt;/a&gt;. You can use whichever form you want and Sass will find the correct variable.&lt;/p&gt;

&lt;p&gt;Before:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;!body_background_color= #000000

body
  background= !body_background_color
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After (either will work):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$body_background_color: #000000
$text-color: #ffffff

body
  background: $body-background-color
  background: $body_background_color
  color: $text-color
  color: $text_color
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;That&amp;#39;s all for now. There are several other nice features in Sass 3 such as the integration of compass-colors, a new mixin definition and inclusion syntax and the SCSS syntax. You can read about these in the &lt;a href="http://beta.sass-lang.com/docs/yardoc/file.SASS_CHANGELOG.html#3-0-0-syntax-changes"&gt;Sass 3 Changelog&lt;/a&gt;. I may write about SCSS later, but I&amp;#39;m not a huge fan and will probably wait and let someone who has a bigger stake in the issue (those using LESS or those who adore single-line CSS) address it. &lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>A Learning Experience. iPhone-style checkboxes in Coffee-Script</title>
    <link rel="alternate" href="/2010/03/01/a-learning-experience-iphone-style-checkboxes-in-coffee-script.html"/>
    <id>/2010/03/01/a-learning-experience-iphone-style-checkboxes-in-coffee-script.html</id>
    <published>2010-03-01T00:00:00-08:00</published>
    <updated>2010-03-01T00:00:00-08:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;According to the &lt;a href="http://jashkenas.github.com/coffee-script/"&gt;Coffee Script website&lt;/a&gt;, &amp;quot;CoffeeScript is a little language that compiles into JavaScript. Think of it as JavaScript&amp;#39;s less ostentatious kid brother — the same genes, roughly the same height, but a different sense of style. Apart from a handful of bonus goodies, statements in CoffeeScript correspond one-to-one with their equivalent in JavaScript, it&amp;#39;s just another way of saying it.&amp;quot;&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;According to the &lt;a href="http://jashkenas.github.com/coffee-script/"&gt;Coffee Script website&lt;/a&gt;, &amp;quot;CoffeeScript is a little language that compiles into JavaScript. Think of it as JavaScript&amp;#39;s less ostentatious kid brother — the same genes, roughly the same height, but a different sense of style. Apart from a handful of bonus goodies, statements in CoffeeScript correspond one-to-one with their equivalent in JavaScript, it&amp;#39;s just another way of saying it.&amp;quot;&lt;/p&gt;

&lt;p&gt;Basically, Coffee Script is compiled into Javascript and attempts to make basic operations simpler and safe. For example, in Ruby you can add a conditional to the end of the current line as a short-hand for a full &lt;tt&gt;if&lt;/tt&gt; statement. In Coffee Script this looks like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;number = -42 if opposite_day
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which compiles to:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if (opposite_day) {
  number = -42;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pretty simple, right? If you&amp;#39;re familiar with Javascript, you&amp;#39;ll recognize Coffee Script&amp;#39;s attempt to fix little annoyances. I dove right in and ported my iPhone-style Checkboxes for jQuery to Coffee Script. &lt;a href="http://github.com/tdreyno/iphone-style-checkboxes/blob/master/coffee/iphone-style-checkboxes.coffee"&gt;The code can be found on GitHub&lt;/a&gt;. Here are a few thoughts and examples I discovered. &lt;/p&gt;

&lt;h2&gt;Basic Features&lt;/h2&gt;

&lt;p&gt;A lot of the convenience of Coffee Script is only really apparent if you&amp;#39;re quite familiar with Javascript. The following three features are fairly common and useful in Ruby, but trying something similar in Javascript requires a bit more error-checking and code. Coffee Script hides this.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Conditional assignments
expensive ||= do_the_math()

# Treating function arguments as a real array
backwards = -&amp;gt;
  alert arguments.reverse()

# Existence conditions
solipsism = true if mind? and not world?
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These are compiled to their Javascript representations.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Conditional assignments
expensive = expensive || do_the_math();

# Treating function arguments as a real array
var backwards;
backwards = function backwards() {
  arguments = Array.prototype.slice.call(arguments, 0);
  return alert(arguments.reverse());
};

# Existence conditions
var solipsism;
if ( (typeof mind !== &amp;quot;undefined&amp;quot; &amp;amp;&amp;amp; mind !== null) &amp;amp;&amp;amp; 
    !(typeof world !== &amp;quot;undefined&amp;quot; &amp;amp;&amp;amp; world !== null)) {
  solipsism = true;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Features I Love #1: Simpler functions, this.attribute &amp;amp; function binding&lt;/h2&gt;

&lt;p&gt;From here on out, I&amp;#39;ll omit the Javascript version. Let&amp;#39;s just look at some cool features and trust they will work when compiled. To begin, function definitions, and anonymous functions, are even simpler in Coffee Script. It&amp;#39;s as simple as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;method_name: (parameter1, parameter1, other_params...) -&amp;gt;
  &amp;quot;Thanks for coming&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The method is defined by a series of parameters, a -&amp;gt; symbol and an indented method body. Unless you specific a return value, the last statement of the method is automatically returned, as in Ruby. The ellipsis parameter is called a Splat, this sucks up the remaining parameters that may have been passed in a groups them into an array.&lt;/p&gt;

&lt;p&gt;A class is just a variation of a function in Javascript. Usually capitalized, it looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Account = (customer, cart) -&amp;gt;
  @customer = customer
  @cart     = cart
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The Account class takes two parameters on it&amp;#39;s constructor. The @ sign is used for accessing instance variables. In raw Javascript, this is usually handled by the &lt;tt&gt;this&lt;/tt&gt; value. Maybe Javascript event libraries allow anonymous functions as callbacks, but the value of &lt;tt&gt;this&lt;/tt&gt; inside these callbacks can be hard to ensure. In Coffee Script, we can force the value of &lt;tt&gt;this&lt;/tt&gt;, called binding, to the current object by using a =&amp;gt; symbol instead of -&amp;gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  $(&amp;#39;.shopping_cart&amp;#39;).bind &amp;#39;click&amp;#39;, (event) =&amp;gt;
    @customer.purchase @cart
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above code, when indented inside the Account class, will make sure the callback method has access to the instance @customer and @cart variables. &lt;a href="http://jashkenas.github.com/coffee-script/#fat_arrow"&gt;Look on the Coffee Script site if you want to see the Javascript version of this code&lt;/a&gt;. It&amp;#39;s a bit rough.&lt;/p&gt;

&lt;h2&gt;Features I Love #2: Pattern Matching&lt;/h2&gt;

&lt;p&gt;Next up is Pattern Matching, also known as Destructuring Assignment in the ECMAScript 4 syntax. Basically, we have an object or array and we want to pull some pieces out and into variables to work with. The simplest example is having a method that returns an array of three items.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;weather_report: (location) -&amp;gt;
  # Make an Ajax request to fetch the weather...
  [location, 72, &amp;quot;Mostly Sunny&amp;quot;]

[city, temp, forecast] = weather_report &amp;quot;Berkeley, CA&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the above example, the weather_report function returns 3 variables which we then assign to three local variables. The structure of the template on the left-hand side mirrors the value on the right-hand side. So in the example above, we have an array of local variables on the left and an array of results from the function on the right.&lt;/p&gt;

&lt;p&gt;Now lets get very complicated. Let&amp;#39;s destructure nested objects. This can be very powerful. Here&amp;#39;s an example nested object:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;futurists: {
  sculptor: &amp;quot;Umberto Boccioni&amp;quot;
  painter:  &amp;quot;Vladimir Burliuk&amp;quot;
  poet: {
    name:   &amp;quot;F.T. Marinetti&amp;quot;
    address: [
      &amp;quot;Via Roma 42R&amp;quot;
      &amp;quot;Bellagio, Italy 22021&amp;quot;
    ]
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, we&amp;#39;ll pull out the pieces we want into local variables:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{poet: {name: poet_name, address: [street, city]}} = futurists
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This results in poet_name=&amp;quot;F.T. Marinetti&amp;quot;, street=&amp;quot;Via Roma 42R&amp;quot; and city=&amp;quot;Bellagio, Italy 22021&amp;quot;&lt;/p&gt;

&lt;p&gt;I admit, I&amp;#39;m not used to thinking about data structures in this way, so there are probably some very cool applications which I haven&amp;#39;t even thought of yet.&lt;/p&gt;

&lt;h2&gt;Features I Love #3: Indentation-aware Heredocs&lt;/h2&gt;

&lt;p&gt;The triple quote (from Python, I think?) starts a block of text which will be turned into a single string which has the indentation you&amp;#39;d expect rather than including all of the prefixed whitespace. &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;html: &amp;#39;&amp;#39;&amp;#39;
      &amp;lt;strong&amp;gt;
        cup of coffeescript
      &amp;lt;/strong&amp;gt;
      &amp;#39;&amp;#39;&amp;#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Compiles to:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var html;
html = &amp;quot;&amp;lt;strong&amp;gt;\n  cup of coffeescript\n&amp;lt;/strong&amp;gt;&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;That&amp;#39;s all I can think of right now. Make sure to check out the &lt;a href="http://jashkenas.github.com/coffee-script/"&gt;Coffee Script docs&lt;/a&gt;, look at &lt;a href="http://github.com/tdreyno/iphone-style-checkboxes/blob/master/coffee/iphone-style-checkboxes.coffee"&gt;my port of iPhone-style Checkboxes&lt;/a&gt; and invest a little time in this new language.&lt;/p&gt;

&lt;h2&gt;Welcome to the Year 2010, it&amp;#39;s ASCII art time!&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;        {                   
     }   }   {              
    {   {  }  }             
     }   }{  {               
    {  }{  }  }                    _____       __  __           
   ( }{ }{  { )                   / ____|     / _|/ _|          
 .- { { }  { }} -.               | |     ___ | |_| |_ ___  ___ 
(  ( } { } { } }  )              | |    / _ \|  _|  _/ _ \/ _ \ 
|`-..________ ..-&amp;#39;|              | |___| (_) | | | ||  __/  __/ 
|                 |               \_____\___/|_| |_| \___|\___|
|                 ;--.           
|                (__  \            _____           _       _   
|                 | )  )          / ____|         (_)     | |  
|                 |/  /          | (___   ___ _ __ _ _ __ | |_ 
|                 (  /            \___ \ / __| &amp;#39;__| | &amp;#39;_ \| __|
|                 |/              ____) | (__| |  | | |_) | |_ 
|                 |              |_____/ \___|_|  |_| .__/ \__|
 `-.._________..-&amp;#39;                                  | |        
                                                    |_|
&lt;/code&gt;&lt;/pre&gt;
</content>
  </entry>
  <entry>
    <title>Using RVM to Manage Multiple Ruby Interpreters</title>
    <link rel="alternate" href="/2010/02/17/using-rvm-to-manage-multiple-ruby-interpreters.html"/>
    <id>/2010/02/17/using-rvm-to-manage-multiple-ruby-interpreters.html</id>
    <published>2010-02-17T00:00:00-08:00</published>
    <updated>2010-02-17T00:00:00-08:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;I&amp;#39;ve been hearing a bit of buzz about the &lt;a href="http://rvm.beginrescueend.com/rvm/install/"&gt;Ruby Version Manager&lt;/a&gt; project on Twitter and from other Rubyists I know. Basically, the project provides a command-line tool which can download and compile a large number of Ruby implementations and swap between the active implementation on a per-terminal basis.&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;I&amp;#39;ve been hearing a bit of buzz about the &lt;a href="http://rvm.beginrescueend.com/rvm/install/"&gt;Ruby Version Manager&lt;/a&gt; project on Twitter and from other Rubyists I know. Basically, the project provides a command-line tool which can download and compile a large number of Ruby implementations and swap between the active implementation on a per-terminal basis.&lt;/p&gt;

&lt;p&gt;This is especially useful for me as I have Ruby tools, like &lt;a href="http://middlemanapp.com"&gt;Middleman&lt;/a&gt;, which I need to maintain on multiple VMs. In the past, you&amp;#39;d have to install each VM to it&amp;#39;s own namespace and be very careful when running them to make sure you were in the right VM. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ruby: The default OSX ruby 1.8.7
ruby19: My custom-compiled ruby 1.9.1
jruby: My custom-compiled jRuby
macruby: My custom-compiled MacRuby
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;RVM makes managing these interpreters a snap. So here&amp;#39;s how you get started.&lt;/p&gt;

&lt;h2&gt;Install the gem&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;gem install rvm
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Run the installer&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;rvm-install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Follow instructions and append the output of the install to your terminal profile&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;In ~/.profile
Add to the bottom:

if [[ -s /Users/tdreyno/.rvm/scripts/rvm ]] ; then source /Users/tdreyno/.rvm/scripts/rvm ; fi
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, save and close ~/.profile and run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;source ~/.profile
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, you are ready to go.&lt;/p&gt;

&lt;h2&gt;Commands&lt;/h2&gt;

&lt;p&gt;First, lets see which Ruby VMs the tool detected.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rvm list
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;My output includes the built-in OSX VM.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;System Ruby

   system [ x86_64 i386 ppc ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, I want to install some more Rubies.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rvm install 1.9.1,rbx,jruby,macruby
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A couple of minutes later, you&amp;#39;ll have 5 different Ruby VMs installed. RBX is Rubinius and the others should be self-explanatory.&lt;/p&gt;

&lt;h2&gt;Swapping VMs&lt;/h2&gt;

&lt;p&gt;To change between the active VM, simply run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rvm use 1.9.1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And now &lt;code&gt;ruby -v&lt;/code&gt; returns &amp;quot;ruby 1.9.1p378 (2010-01-10 revision 26273) [i386-darwin10.2.0]&amp;quot;&lt;/p&gt;

&lt;p&gt;In my case, I can now run my Cucumber tests against my library and verify that it&amp;#39;s working with Ruby 1.9.1.&lt;/p&gt;

&lt;p&gt;To return to your original VM, run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rvm use system
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Be aware that each VM probably has it&amp;#39;s own gems. So you&amp;#39;ll need to be aware of that and try to keep each VM&amp;#39;s gems in sync.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Best Albums of the Decade. Top 25</title>
    <link rel="alternate" href="/2009/12/14/best-of-the-decade-pt2.html"/>
    <id>/2009/12/14/best-of-the-decade-pt2.html</id>
    <published>2009-12-14T00:00:00-08:00</published>
    <updated>2009-12-14T00:00:00-08:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;&lt;p&gt;And now for the top 25.&lt;/p&gt;
&lt;ul class="albums"&gt;
  &lt;li&gt;
    &lt;div class='cover'&gt;
      &lt;img src='http://awardwinningfjords.com/albums/25.jpg' /&gt;
    &lt;/div&gt;
    &lt;div class='content'&gt;
      &lt;h6&gt;2008&lt;/h6&gt;&lt;h4&gt;Of Montreal - Skeletal Lamping&lt;/h4&gt;
      &lt;p&gt;I flip-flopped on the position of the two Of Montreal albums several times. As bizarre and cross-genre as the band is, this album feels like &amp;quot;more of the same&amp;quot; from Hissing Fauna. However, it&amp;#39;s also much better and maybe even easier to sing along to if you can parse the words.&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;&lt;p&gt;And now for the top 25.&lt;/p&gt;
&lt;ul class="albums"&gt;
  &lt;li&gt;
    &lt;div class='cover'&gt;
      &lt;img src='http://awardwinningfjords.com/albums/25.jpg' /&gt;
    &lt;/div&gt;
    &lt;div class='content'&gt;
      &lt;h6&gt;2008&lt;/h6&gt;&lt;h4&gt;Of Montreal - Skeletal Lamping&lt;/h4&gt;
      &lt;p&gt;I flip-flopped on the position of the two Of Montreal albums several times. As bizarre and cross-genre as the band is, this album feels like &amp;quot;more of the same&amp;quot; from Hissing Fauna. However, it&amp;#39;s also much better and maybe even easier to sing along to if you can parse the words.&lt;/p&gt;
    &lt;/div&gt;
    &lt;div class='player'&gt;
      &lt;h6&gt;#25&lt;/h6&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;div class='cover'&gt;
      &lt;img src='http://awardwinningfjords.com/albums/24.jpg' /&gt;
    &lt;/div&gt;
    &lt;div class='content'&gt;
      &lt;h6&gt;2007&lt;/h6&gt;&lt;h4&gt;Menomena - Friend and Foe&lt;/h4&gt;
      &lt;p&gt;Local Portland three-piece who sound like a cross between a Jazz band and The Mars Volta. Given the amount of instruments on the album, I was blown away to see the three of them pull it off live. It&amp;#39;s my understanding that they&amp;#39;re working on a follow-up album. I can&amp;#39;t wait.&lt;/p&gt;
    &lt;/div&gt;
    &lt;div class='player'&gt;
      &lt;h6&gt;#24&lt;/h6&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;div class='cover'&gt;
      &lt;img src='http://awardwinningfjords.com/albums/23.jpg' /&gt;
    &lt;/div&gt;
    &lt;div class='content'&gt;
      &lt;h6&gt;2006&lt;/h6&gt;&lt;h4&gt;Gospel - The Moon is a Dead World&lt;/h4&gt;
      &lt;p&gt;I&amp;#39;ve fallen hard for post-hardcore and for some reason I really enjoy listening to it in unexpected locations. I feel asleep on the plane listening to Maths on repeat. I wandered around the beach in Hawaii listening to Gospel. Something about it feels so epic, even if it&amp;#39;s just some guy screaming. Unfortunately the band is not longer together.&lt;/p&gt;
    &lt;/div&gt;
    &lt;div class='player'&gt;
      &lt;h6&gt;#23&lt;/h6&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;div class='cover'&gt;
      &lt;img src='http://awardwinningfjords.com/albums/22.jpg' /&gt;
    &lt;/div&gt;
    &lt;div class='content'&gt;
      &lt;h6&gt;2006&lt;/h6&gt;&lt;h4&gt;Brand New - The Devil and God Are Raging Inside Me&lt;/h4&gt;
      &lt;p&gt;I&amp;#39;m not sure I actually like this band as I don&amp;#39;t like their previous work and I don&amp;#39;t like their follow-up album &amp;quot;Daisy.&amp;quot; Still, I put this on when I&amp;#39;m in a bad mood. The title seems to fit perfectly.&lt;/p&gt;
    &lt;/div&gt;
    &lt;div class='player'&gt;
      &lt;h6&gt;#22&lt;/h6&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;div class='cover'&gt;
      &lt;img src='http://awardwinningfjords.com/albums/21.jpg' /&gt;
    &lt;/div&gt;
    &lt;div class='content'&gt;
      &lt;h6&gt;2000&lt;/h6&gt;&lt;h4&gt;A.F.I. - The Art of Drowning&lt;/h4&gt;
      &lt;p&gt;
        I&amp;#39;ve been listening to this album for 10 years. Unlike a lot of the stuff on this list which I discovered later, I think The Art of Drowning might have been my first real punk purchase. Blink 182 and Green Day don&amp;#39;t count. The album further refines Black Sails in the Sunset and is the last decent AFI album until this year&amp;#39;s Crash Love. Still, even the best parts of Crash Love make me want to put The Art of Drowning on instead.
      &lt;/p&gt;
    &lt;/div&gt;
    &lt;div class='player'&gt;
      &lt;h6&gt;#21&lt;/h6&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;div class='cover'&gt;
      &lt;img src='http://awardwinningfjords.com/albums/20.jpg' /&gt;
    &lt;/div&gt;
    &lt;div class='content'&gt;
      &lt;h6&gt;2005&lt;/h6&gt;&lt;h4&gt;Gorillaz - Demon Days&lt;/h4&gt;
      &lt;p&gt;How awesome is Danger Mouse? I liked the first Gorillaz album and I love Dan the Automator, but Demon Days is on a whole other level. The album alternates between poppy tracks with hip-hop guests and spacey electronic songs. If you hate diversity, Damon&amp;#39;s The Good, the Bad &amp;amp; the Queen is basically an entire album of the spacey songs. Furthermore, Fire Coming Out of a Monkey&amp;#39;s Head might be the most enjoyable spoken-word track of all time. It doesn&amp;#39;t hurt that King Koopa is reading it.&lt;/p&gt;
    &lt;/div&gt;
    &lt;div class='player'&gt;
      &lt;h6&gt;#20&lt;/h6&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;div class='cover'&gt;
      &lt;img src='http://awardwinningfjords.com/albums/19.jpg' /&gt;
    &lt;/div&gt;
    &lt;div class='content'&gt;
      &lt;h6&gt;2007&lt;/h6&gt;&lt;h4&gt;The World/Inferno Friendship Society - Addicted to Bad Ideas&lt;/h4&gt;
      &lt;p&gt;These gypsy punk-rockers from NY have always created enjoyable albums, but their energy and multitude of artists and instruments have always been a bit out of control. This concept album (and possible musical) about the life of Peter Lorre reins them in and gives the album an easy narrative to follow all the way up to the sad finale &amp;quot;Heart Attack &amp;#39;64.&amp;quot;&lt;/p&gt;
    &lt;/div&gt;
    &lt;div class='player'&gt;
      &lt;h6&gt;#19&lt;/h6&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;div class='cover'&gt;
      &lt;img src='http://awardwinningfjords.com/albums/18.jpg' /&gt;
    &lt;/div&gt;
    &lt;div class='content'&gt;
      &lt;h6&gt;2001&lt;/h6&gt;&lt;h4&gt;Rx Bandits - Progress&lt;/h4&gt;
      &lt;p&gt;My favorite band, probably one of my first concerts and definitely my driving soundtrack for 3-4 years. Progress began the transition from generic 3rd wave ska band to progressive rock gods. I don&amp;#39;t think the Rx Bandits have rocked this hard until some of the guitar-driven stuff on 2009&amp;#39;s Mandala. This is also Steve Choi&amp;#39;s first with the band. Despite the fact that he didn&amp;#39;t actually record on the album, it&amp;#39;s nice to know he was around. His influence on the later albums completes the bands transition.&lt;/p&gt;
    &lt;/div&gt;
    &lt;div class='player'&gt;
      &lt;h6&gt;#18&lt;/h6&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;div class='cover'&gt;
      &lt;img src='http://awardwinningfjords.com/albums/17.jpg' /&gt;
    &lt;/div&gt;
    &lt;div class='content'&gt;
      &lt;h6&gt;2005&lt;/h6&gt;&lt;h4&gt;Death Cab for Cutie - Plans&lt;/h4&gt;
      &lt;p&gt;For what sounds like an incredibly depressing album, I usually finish it feeling uplifted. The Postal Service wrenches my heart a little ever time, but Plans makes me smile. I can&amp;#39;t really get into Transatlanticism and Narrow Stairs was a misfire in my opinion, but Plans is something I imagine I&amp;#39;ll be listening to long into the next few decades.&lt;/p&gt;
    &lt;/div&gt;
    &lt;div class='player'&gt;
      &lt;h6&gt;#17&lt;/h6&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;div class='cover'&gt;
      &lt;img src='http://awardwinningfjords.com/albums/16.jpg' /&gt;
    &lt;/div&gt;
    &lt;div class='content'&gt;
      &lt;h6&gt;2008&lt;/h6&gt;&lt;h4&gt;La Dispute - Somewhere at the Bottom of the River Between Vega and Altair&lt;/h4&gt;
      &lt;p&gt;Does anyone else know this band exists? The band fulfills all my 2000s requirements: post-hardcore, concept album and a cohesive listen all the way through. I don&amp;#39;t think they&amp;#39;ve toured in Portland yet, but I&amp;#39;m still hopeful. I imagine the live show must be epic. This album is all about loss and anger. Here&amp;#39;s hoping I&amp;#39;m never in a position where this becomes my soundtrack, but atleast it should be cathartic to scream along.&lt;/p&gt;
    &lt;/div&gt;
    &lt;div class='player'&gt;
      &lt;h6&gt;#16&lt;/h6&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;div class='cover'&gt;
      &lt;img src='http://awardwinningfjords.com/albums/15.jpg' /&gt;
    &lt;/div&gt;
    &lt;div class='content'&gt;
      &lt;h6&gt;2008&lt;/h6&gt;&lt;h4&gt;Girl Talk - Feed the Animals&lt;/h4&gt;
      &lt;p&gt;A perfect, polished improvement over Night Ripper. This is the definitive mash-up album. Greg uses a lot more classic songs and rock samples while still maintaining the perfect balance and juxtaposition with various rappers on top. Lil Wayne&amp;#39;s Lollipop over Red Hot Chili Peppers? Perfect.&lt;/p&gt;
    &lt;/div&gt;
    &lt;div class='player'&gt;
      &lt;h6&gt;#15&lt;/h6&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;div class='cover'&gt;
      &lt;img src='http://awardwinningfjords.com/albums/14.jpg' /&gt;
    &lt;/div&gt;
    &lt;div class='content'&gt;
      &lt;h6&gt;2009&lt;/h6&gt;&lt;h4&gt;Rx Bandits - Mandala&lt;/h4&gt;
      &lt;p&gt;The climax to a decade of refinement and improvement. The band may have lost all of its horns, but that has unleashed the guitars. Like ...And the Battle Begun and The Resignation, this album was recorded &amp;quot;live&amp;quot; with the band rehearsing until they were confident enough to record it in one shot. The result, as before, is an incredibly organic album, complete with human flaws, missed notes and a perfect representation of their wonderful live show.&lt;/p&gt;
    &lt;/div&gt;
    &lt;div class='player'&gt;
      &lt;h6&gt;#14&lt;/h6&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;div class='cover'&gt;
      &lt;img src='http://awardwinningfjords.com/albums/13.jpg' /&gt;
    &lt;/div&gt;
    &lt;div class='content'&gt;
      &lt;h6&gt;2003&lt;/h6&gt;&lt;h4&gt;The Postal Service - Give Up&lt;/h4&gt;
      &lt;p&gt;I&amp;#39;ve been to DC and I quite enjoyed it. If I were to attempt to wander the streets listening to this album, I may just end up in a corner hiding from people. This is the ultimate break-up album, but it&amp;#39;s not encouraging in any way. I usually end up thinking &amp;quot;I am a fool and an asshole&amp;quot; at the end. Gibbard convinces you that it&amp;#39;s all your fault and I&amp;#39;m not sure there is a rainbow at the end. I usually try to avoid listening to this when I&amp;#39;m sad, but I guess misery loves company.&lt;/p&gt;
    &lt;/div&gt;
    &lt;div class='player'&gt;
      &lt;h6&gt;#13&lt;/h6&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;div class='cover'&gt;
      &lt;img src='http://awardwinningfjords.com/albums/12.jpg' /&gt;
    &lt;/div&gt;
    &lt;div class='content'&gt;
      &lt;h6&gt;2006&lt;/h6&gt;&lt;h4&gt;Head Automatica - Popaganda&lt;/h4&gt;
      &lt;p&gt;Another follow-up album that decided to dump Dan the Automator. And yet, like Demon Days, it&amp;#39;s better for it. Popaganda does exactly what it claims to, takes Daryl Palumbo of Glassjaw&amp;#39;s eccentricity and stuffs it into a pop-rock box.&lt;/p&gt;
    &lt;/div&gt;
    &lt;div class='player'&gt;
      &lt;h6&gt;#12&lt;/h6&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;div class='cover'&gt;
      &lt;img src='http://awardwinningfjords.com/albums/11.jpg' /&gt;
    &lt;/div&gt;
    &lt;div class='content'&gt;
      &lt;h6&gt;2000&lt;/h6&gt;&lt;h4&gt;Deltron - Deltron 3030&lt;/h4&gt;
      &lt;p&gt;Hey look, more Dan the Automator! Del the Funkee Homosapien created the definitive hip hop concept album with this loose collection of songs about life in the year 3030, Del&amp;#39;s life as a mech warrior and the oppressive regime that true artists must fight against. It&amp;#39;s been 10 years and Del has been claiming Deltron Event II is mostly complete. I can&amp;#39;t wait.&lt;/p&gt;
    &lt;/div&gt;
    &lt;div class='player'&gt;
      &lt;h6&gt;#11&lt;/h6&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;div class='cover'&gt;
      &lt;img src='http://awardwinningfjords.com/albums/10.jpg' /&gt;
    &lt;/div&gt;
    &lt;div class='content'&gt;
      &lt;h6&gt;2004&lt;/h6&gt;&lt;h4&gt;mewithoutYou - Catch For Us the Foxes&lt;/h4&gt;
      &lt;p&gt;My first post-hardcore album. Basically, one brother asked his other brother to read his poetry (loudly) over his band&amp;#39;s rock. The outcome is just pitch perfect.&lt;/p&gt;
    &lt;/div&gt;
    &lt;div class='player'&gt;
      &lt;h6&gt;#10&lt;/h6&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;div class='cover'&gt;
      &lt;img src='http://awardwinningfjords.com/albums/09.jpg' /&gt;
    &lt;/div&gt;
    &lt;div class='content'&gt;
      &lt;h6&gt;2003&lt;/h6&gt;&lt;h4&gt;Rx Bandits - The Resignation&lt;/h4&gt;
      &lt;p&gt;I feel like I&amp;#39;ve already said enough about the Rx Bandits. This one was the first recorded &amp;quot;live&amp;quot; and ends with the massive build-up of Decrescendo. I&amp;#39;m also happy to see folks in 2003 complaining about America&amp;#39;s wars.&lt;/p&gt;
    &lt;/div&gt;
    &lt;div class='player'&gt;
      &lt;h6&gt;#9&lt;/h6&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;div class='cover'&gt;
      &lt;img src='http://awardwinningfjords.com/albums/08.jpg' /&gt;
    &lt;/div&gt;
    &lt;div class='content'&gt;
      &lt;h6&gt;2005&lt;/h6&gt;&lt;h4&gt;The Mars Volta - Frances the Mute&lt;/h4&gt;
      &lt;p&gt;I don&amp;#39;t really know how to describe Mars Volta albums. Super-long songs. Unintelligible vocals. Epic.&lt;/p&gt;
    &lt;/div&gt;
    &lt;div class='player'&gt;
      &lt;h6&gt;#8&lt;/h6&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;div class='cover'&gt;
      &lt;img src='http://awardwinningfjords.com/albums/07.jpg' /&gt;
    &lt;/div&gt;
    &lt;div class='content'&gt;
      &lt;h6&gt;2004&lt;/h6&gt;&lt;h4&gt;Leftover Crack - Fuck World Trade&lt;/h4&gt;
      &lt;p&gt;My favorite gutter-punks crafted a surprisingly coherent and beautiful album. There are piano interludes and songs about killing cops. Still waiting on a follow-up, but Star Fucking Hipsters are enough to hold me over.&lt;/p&gt;
    &lt;/div&gt;
    &lt;div class='player'&gt;
      &lt;h6&gt;#7&lt;/h6&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;div class='cover'&gt;
      &lt;img src='http://awardwinningfjords.com/albums/06.jpg' /&gt;
    &lt;/div&gt;
    &lt;div class='content'&gt;
      &lt;h6&gt;2008&lt;/h6&gt;&lt;h4&gt;Why? - Alopecia&lt;/h4&gt;
      &lt;p&gt;Clever, hipster, jewish hip hop. What more do you need to know? Look at these lyrics:&lt;/p&gt;
      &lt;pre&gt;i know, i know&amp;#x000A;there&amp;#39;s nothing more appealing&amp;#x000A;than the sound of high heels&amp;#x000A;down the marble tile hallways&amp;#x000A;of your distict&amp;#39;s one allotted&amp;#x000A;city funded steiner school bilingual&amp;#x000A;or montessori followed by&amp;#x000A;a single high pitched scream&amp;#x000A;followed by breaking glass&amp;#x000A;but could your anger be mapped&amp;#x000A;into an interpretive dance&amp;#x000A;to a trip hop track&amp;#x000A;could it be bowed out on strings&amp;#x000A;or strung into a pattern&amp;#x000A;for a god&amp;#39;s eye to bring to&amp;#x000A;your alma mater&amp;#39;s holiday fundraiser boutique thing&lt;/pre&gt;
    &lt;/div&gt;
    &lt;div class='player'&gt;
      &lt;h6&gt;#6&lt;/h6&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;div class='cover'&gt;
      &lt;img src='http://awardwinningfjords.com/albums/05.jpg' /&gt;
    &lt;/div&gt;
    &lt;div class='content'&gt;
      &lt;h6&gt;2006&lt;/h6&gt;&lt;h4&gt;Justin Timberlake - Futuresex/Lovesounds&lt;/h4&gt;
      &lt;p&gt;Pop music in the later-half of this decade was defined by Justin Timberlake. Yes, I&amp;#39;m counting Dick in a Box as well. Hip hop music in the same period was defined by Timbaland. This collaboration setup the new king of pop and fully erased his boy-band history. Will there be a follow-up? I hope so.&lt;/p&gt;
    &lt;/div&gt;
    &lt;div class='player'&gt;
      &lt;h6&gt;#5&lt;/h6&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;div class='cover'&gt;
      &lt;img src='http://awardwinningfjords.com/albums/04.jpg' /&gt;
    &lt;/div&gt;
    &lt;div class='content'&gt;
      &lt;h6&gt;2007&lt;/h6&gt;&lt;h4&gt;Bloc Party - A Weekend in the City&lt;/h4&gt;
      &lt;p&gt;While Silent Alarm is a great album, A Weekend in the City is really an experience. The perfect rainy-day album, whether you&amp;#39;re in London or not. I think I could leave this on repeat for an entire weekend. There is also an instrumental version which is wonderful in a completely different way.&lt;/p&gt;
    &lt;/div&gt;
    &lt;div class='player'&gt;
      &lt;h6&gt;#4&lt;/h6&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;div class='cover'&gt;
      &lt;img src='http://awardwinningfjords.com/albums/03.jpg' /&gt;
    &lt;/div&gt;
    &lt;div class='content'&gt;
      &lt;h6&gt;2000&lt;/h6&gt;&lt;h4&gt;At the Drive-In - Relationship of Command&lt;/h4&gt;
      &lt;p&gt;ATDI&amp;#39;s last album. After finally achieving mainstream success with &amp;quot;One Armed Scissor,&amp;quot; they promptly imploded. There&amp;#39;s never been anything like ATDI before or since. A different monster than Mars Volta, even if they share random, crazy-person lyrics.&lt;/p&gt;
    &lt;/div&gt;
    &lt;div class='player'&gt;
      &lt;h6&gt;#3&lt;/h6&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;div class='cover'&gt;
      &lt;img src='http://awardwinningfjords.com/albums/02.jpg' /&gt;
    &lt;/div&gt;
    &lt;div class='content'&gt;
      &lt;h6&gt;2006&lt;/h6&gt;&lt;h4&gt;The Format - Dog Problems&lt;/h4&gt;
      &lt;p&gt;I&amp;#39;ve been listening to these guys since we were both in high school. We were even neighbors for a short time. Probably the only Phoenix, AZ band worth a damn. The band finally broke out with Interventions + Lullabies and nearly collapsed from the pressure. So they took a step back and decided to have fun. Dog Problems is the result, incorporating a ton of instruments, whimsical flourishes, a little bit of Beach Boys, a little Bowie and a lot of fun. Nate&amp;#39;s new band, actually named &amp;quot;fun,&amp;quot; follows the same formula, but probably needs a few more albums to mature.&lt;/p&gt;
    &lt;/div&gt;
    &lt;div class='player'&gt;
      &lt;h6&gt;#2&lt;/h6&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;div class='cover'&gt;
      &lt;img src='http://awardwinningfjords.com/albums/01.jpg' /&gt;
    &lt;/div&gt;
    &lt;div class='content'&gt;
      &lt;h6&gt;2005&lt;/h6&gt;&lt;h4&gt;Say Anything - ...Is a Real Boy&lt;/h4&gt;
      &lt;p&gt;Who am I to argue with statistics. According to last.fm, I listened to this album way more than any other album. I love all the Say Anything albums, but this one is a little more rough and angry, which is a good thing. The new, married, happier Max Bemis is still great, but I enjoy his disgust.&lt;/p&gt;
    &lt;/div&gt;
    &lt;div class='player'&gt;
      &lt;h6&gt;#1&lt;/h6&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Best Albums of the Decade</title>
    <link rel="alternate" href="/2009/12/04/best-of-the-decade.html"/>
    <id>/2009/12/04/best-of-the-decade.html</id>
    <published>2009-12-04T00:00:00-08:00</published>
    <updated>2009-12-04T00:00:00-08:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;&lt;p&gt;In 1990, I was 7 years old. Needless to say, by 17 I still didn&amp;#39;t have the most refined musical tastes. I&amp;#39;m just now getting into Pavement, Jawbox and My Bloody Valentine. So, this past decade has been my first where I can remember listening to each of the following albums when they were released. Most of the lists I&amp;#39;ve seen so far are exceptionally myopic, with albums mostly from the past 3-4 years and enjoy Radiohead to look cool. My list is hopefully more diverse. I&amp;#39;ve also used my actual listening habits (courtesy of last.fm) for ranking, rather than pretending I actually listened to The White Stripes ever single day like some lists.&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;&lt;p&gt;In 1990, I was 7 years old. Needless to say, by 17 I still didn&amp;#39;t have the most refined musical tastes. I&amp;#39;m just now getting into Pavement, Jawbox and My Bloody Valentine. So, this past decade has been my first where I can remember listening to each of the following albums when they were released. Most of the lists I&amp;#39;ve seen so far are exceptionally myopic, with albums mostly from the past 3-4 years and enjoy Radiohead to look cool. My list is hopefully more diverse. I&amp;#39;ve also used my actual listening habits (courtesy of last.fm) for ranking, rather than pretending I actually listened to The White Stripes ever single day like some lists.&lt;/p&gt;
&lt;p&gt;Let&amp;#39;s get started, with numbers 50-26:&lt;/p&gt;
&lt;ul class="albums"&gt;
  &lt;li&gt;
    &lt;div class='cover'&gt;
      &lt;img src='http://awardwinningfjords.com/albums/50.jpg' /&gt;
    &lt;/div&gt;
    &lt;div class='content'&gt;
      &lt;h6&gt;2005&lt;/h6&gt;&lt;h4&gt;Panic at the Disco - A Fever You Can&amp;#39;t Sweat Out&lt;/h4&gt;
      &lt;p&gt;Listening to this recently, the autotune burned my ears, but I can&amp;#39;t pretend I didn&amp;#39;t have this on repeat when it came out. It&amp;#39;s pretty cheesy, but the non-autotuned vocals are catchy and the songs varied. Their sophomore album tried to prove they had actual talent by simplifying their sound and foregoing the autotune, but it wasn&amp;#39;t nearly as fun as this.&lt;/p&gt;
    &lt;/div&gt;
    &lt;div class='player'&gt;
      &lt;h6&gt;#50&lt;/h6&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;div class='cover'&gt;
      &lt;img src='http://awardwinningfjords.com/albums/49.jpg' /&gt;
    &lt;/div&gt;
    &lt;div class='content'&gt;
      &lt;h6&gt;2006&lt;/h6&gt;&lt;h4&gt;Mogwai - Mr Beast&lt;/h4&gt;
      &lt;p&gt;One of my favorite post-rock albums and an album that sat in my record player for months on end. I&amp;#39;m not sure I could explain it if I wanted to. It&amp;#39;s post rock, it climaxes and the timing is just about perfect on this album.&lt;/p&gt;
    &lt;/div&gt;
    &lt;div class='player'&gt;
      &lt;h6&gt;#49&lt;/h6&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;div class='cover'&gt;
      &lt;img src='http://awardwinningfjords.com/albums/48.jpg' /&gt;
    &lt;/div&gt;
    &lt;div class='content'&gt;
      &lt;h6&gt;2002&lt;/h6&gt;&lt;h4&gt;Bad Religion - The Process of Belief&lt;/h4&gt;
      &lt;p&gt;The last half of the 90s were pretty hard on Bad Religion. Maybe they were just busy working on other things. The return of Brett Gurewitz on guitar helped propel their comeback. The first 3 songs work great together and are usually played in rapid succession live. I think this is their best work this decade, but The Empire Strikes First and New Maps of Hell are no slouches either.&lt;/p&gt;
    &lt;/div&gt;
    &lt;div class='player'&gt;
      &lt;h6&gt;#48&lt;/h6&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;div class='cover'&gt;
      &lt;img src='http://awardwinningfjords.com/albums/47.jpg' /&gt;
    &lt;/div&gt;
    &lt;div class='content'&gt;
      &lt;h6&gt;2006&lt;/h6&gt;&lt;h4&gt;Scissor Sisters - Ta-Dah&lt;/h4&gt;
      &lt;p&gt;I once described this as the &amp;quot;gayest album I play loud and sing along to&amp;quot; and if you&amp;#39;ve scanned ahead, you&amp;#39;ll know Justin Timberlake is on this list. So that&amp;#39;s saying something. This disco-y album with Elton John on a lot of the tracks and featuring far too graphic sexual lyrics is just too much fun. Also, the &amp;quot;I Can&amp;#39;t Decide&amp;quot; sing-along The Master had in that Dr. Who finale was just plain awesome.&lt;/p&gt;
    &lt;/div&gt;
    &lt;div class='player'&gt;
      &lt;h6&gt;#47&lt;/h6&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;div class='cover'&gt;
      &lt;img src='http://awardwinningfjords.com/albums/46.jpg' /&gt;
    &lt;/div&gt;
    &lt;div class='content'&gt;
      &lt;h6&gt;2005&lt;/h6&gt;&lt;h4&gt;Transplants - Haunted Cities&lt;/h4&gt;
      &lt;p&gt;Both Transplants albums came out this decade. The self-titled is excellent, but despite their best efforts it&amp;#39;s still a punk album. However, they hit the nail on the head in their second attempt. This is an Oakland hip hop album. Travis Barker on drums kicks the shit out of any studio drum machine.&lt;/p&gt;
    &lt;/div&gt;
    &lt;div class='player'&gt;
      &lt;h6&gt;#46&lt;/h6&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;div class='cover'&gt;
      &lt;img src='http://awardwinningfjords.com/albums/45.jpg' /&gt;
    &lt;/div&gt;
    &lt;div class='content'&gt;
      &lt;h6&gt;2001&lt;/h6&gt;&lt;h4&gt;System of a Down - Toxicity&lt;/h4&gt;
      &lt;p&gt;System of a Down hit their stride on Toxicity after an excellent, manic self-titled album in the late 90s. How much strong material did they write? Well, they released a 16-song collection of B-sides called &amp;quot;Steal This Album!&amp;quot; a year later and it&amp;#39;s almost good enough to be on this list as well. Their later double-albums Memorize &amp;amp; Hypnotize are excellent, but the band&amp;#39;s dynamic was different. So I&amp;#39;m sticking with this classic SOAD.&lt;/p&gt;
    &lt;/div&gt;
    &lt;div class='player'&gt;
      &lt;h6&gt;#45&lt;/h6&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;div class='cover'&gt;
      &lt;img src='http://awardwinningfjords.com/albums/44.jpg' /&gt;
    &lt;/div&gt;
    &lt;div class='content'&gt;
      &lt;h6&gt;2005&lt;/h6&gt;&lt;h4&gt;Mindless Self Indulgence - You&amp;#39;ll Rebel To Anything&lt;/h4&gt;
      &lt;p&gt;Frankenstein Girls Will Seem Strangely Sexy should be on this list. It&amp;#39;s awesome, but it came out in 2000 and I remember listening to it on Winamp so maybe it&amp;#39;s just too 90s. Instead, I&amp;#39;m going with their follow-up. A band known for vile, 90 seconds songs of pure IDM madness decided to make 10, very polished, well-produced songs.&lt;/p&gt;
    &lt;/div&gt;
    &lt;div class='player'&gt;
      &lt;h6&gt;#44&lt;/h6&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;div class='cover'&gt;
      &lt;img src='http://awardwinningfjords.com/albums/43.jpg' /&gt;
    &lt;/div&gt;
    &lt;div class='content'&gt;
      &lt;h6&gt;2004&lt;/h6&gt;&lt;h4&gt;My Chemical Romance - Three Cheers for Sweet Romance&lt;/h4&gt;
      &lt;p&gt;This album rips all the way through. It&amp;#39;s speed and length matched perfectly up to my normal workout, so this was my default playlist for several years. It helps that I&amp;#39;m a sucker for comic books and concept albums and this album combines both.&lt;/p&gt;
    &lt;/div&gt;
    &lt;div class='player'&gt;
      &lt;h6&gt;#43&lt;/h6&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;div class='cover'&gt;
      &lt;img src='http://awardwinningfjords.com/albums/42.jpg' /&gt;
    &lt;/div&gt;
    &lt;div class='content'&gt;
      &lt;h6&gt;2007&lt;/h6&gt;&lt;h4&gt;Of Montreal - Hissing Fauna, Are You the Destroyer?&lt;/h4&gt;
      &lt;p&gt;I&amp;#39;m not sure I could even describe this album or band. Dancey, poppy, random genres, disjointed, nonsense lyrics and pure awesome. This might be the most musically creative band on this list. It makes me feel boring.&lt;/p&gt;
    &lt;/div&gt;
    &lt;div class='player'&gt;
      &lt;h6&gt;#42&lt;/h6&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;div class='cover'&gt;
      &lt;img src='http://awardwinningfjords.com/albums/41.jpg' /&gt;
    &lt;/div&gt;
    &lt;div class='content'&gt;
      &lt;h6&gt;2000&lt;/h6&gt;&lt;h4&gt;Deftones - White Pony&lt;/h4&gt;
      &lt;p&gt;Maybe this belongs in the 90s, but Deftones finally got it right in 2000 and I&amp;#39;m not going to take that away from them. This dark and violent album is all the more creepy thanks to Chino&amp;#39;s soft voice and a guest spot from king of singing, Maynard James Keenan.&lt;/p&gt;
    &lt;/div&gt;
    &lt;div class='player'&gt;
      &lt;h6&gt;#41&lt;/h6&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;div class='cover'&gt;
      &lt;img src='http://awardwinningfjords.com/albums/40.jpg' /&gt;
    &lt;/div&gt;
    &lt;div class='content'&gt;
      &lt;h6&gt;2008&lt;/h6&gt;&lt;h4&gt;The Mae Shi - Hlllyh&lt;/h4&gt;
      &lt;p&gt;I love punk rock, but there were only a couple options left to the genre this decade. Either it could follow Blink 182 into the realm of pop, put out retro albums like Bad Religion, NOFX and Propagandhi or cross-pollinate with the electronic scene like Panic! at the Disco. The Mae Shi chose the latter and create a manic, sometimes melodic, album that rocks all the way through.&lt;/p&gt;
    &lt;/div&gt;
    &lt;div class='player'&gt;
      &lt;h6&gt;#40&lt;/h6&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;div class='cover'&gt;
      &lt;img src='http://awardwinningfjords.com/albums/39.jpg' /&gt;
    &lt;/div&gt;
    &lt;div class='content'&gt;
      &lt;h6&gt;2004&lt;/h6&gt;&lt;h4&gt;Sum 41 - Chuck&lt;/h4&gt;
      &lt;p&gt;Actually, there was one other option for punk bands, but I think Sum 41 was the only one that tried it. They decided to become a metal band. The vocals and melody remain true to the band&amp;#39;s pop-punk style, but the guitars decided to imitate those of punk&amp;#39;s former worst enemy. I&amp;#39;m a huge fan of this album, it&amp;#39;s too bad it didn&amp;#39;t go over well and the band has returned to their immature pop-punk style.&lt;/p&gt;
    &lt;/div&gt;
    &lt;div class='player'&gt;
      &lt;h6&gt;#39&lt;/h6&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;div class='cover'&gt;
      &lt;img src='http://awardwinningfjords.com/albums/38.jpg' /&gt;
    &lt;/div&gt;
    &lt;div class='content'&gt;
      &lt;h6&gt;2007&lt;/h6&gt;&lt;h4&gt;Fall Out Boy - Infinity on High&lt;/h4&gt;
      &lt;p&gt;This decade&amp;#39;s king of pop-punk decided to give up any illusion of punk and had hip-hop producer Babyface produce this album. The intro features Jay-Z and the guitars have mostly been muddled into an electronic sound or mixed out. The thing is, they made a perfect pop album and it&amp;#39;s fun. Their follow-up, Folie á Deux is also excellent and even more polished, if not as cohesive.&lt;/p&gt;
    &lt;/div&gt;
    &lt;div class='player'&gt;
      &lt;h6&gt;#38&lt;/h6&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;div class='cover'&gt;
      &lt;img src='http://awardwinningfjords.com/albums/37.jpg' /&gt;
    &lt;/div&gt;
    &lt;div class='content'&gt;
      &lt;h6&gt;2002&lt;/h6&gt;&lt;h4&gt;Queens of the Stone Age - Songs for the Deaf&lt;/h4&gt;
      &lt;p&gt;When people shit on &amp;quot;Rock music,&amp;quot; I can&amp;#39;t help but argue because this is the album I hear in my head. Needless to say, it rocks and Dave Grohl on drums pushes it up to 11.&lt;/p&gt;
    &lt;/div&gt;
    &lt;div class='player'&gt;
      &lt;h6&gt;#37&lt;/h6&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;div class='cover'&gt;
      &lt;img src='http://awardwinningfjords.com/albums/36.jpg' /&gt;
    &lt;/div&gt;
    &lt;div class='content'&gt;
      &lt;h6&gt;2007&lt;/h6&gt;&lt;h4&gt;Big D and the Kids Table - Strictly Rude&lt;/h4&gt;
      &lt;p&gt;I should have put every Big D album on this list. Somehow they are all equally good and yet always different. Strictly Rude builds on How it Goes&amp;#39;s departure from loud punk, but it also brings in a UK-ska feel. 15 great songs. 2009&amp;#39;s Fluent in Stroll is excellent too, with it&amp;#39;s surf-ska-rock feel, but it&amp;#39;s a little too recent to be a classic already.&lt;/p&gt;
    &lt;/div&gt;
    &lt;div class='player'&gt;
      &lt;h6&gt;#36&lt;/h6&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;div class='cover'&gt;
      &lt;img src='http://awardwinningfjords.com/albums/35.jpg' /&gt;
    &lt;/div&gt;
    &lt;div class='content'&gt;
      &lt;h6&gt;2001&lt;/h6&gt;&lt;h4&gt;Ozma - Rock and Rock Part 3&lt;/h4&gt;
      &lt;p&gt;Everyone knows the absolute failure Weezer has been this decade, but at the beginning we had Ozma to make up for it. This album isn&amp;#39;t entirely cohesive, but there are so many gems, including the epic Baseball. You owe it to yourself to listen to it.&lt;/p&gt;
    &lt;/div&gt;
    &lt;div class='player'&gt;
      &lt;h6&gt;#35&lt;/h6&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;div class='cover'&gt;
      &lt;img src='http://awardwinningfjords.com/albums/34.jpg' /&gt;
    &lt;/div&gt;
    &lt;div class='content'&gt;
      &lt;h6&gt;2003&lt;/h6&gt;&lt;h4&gt;The Mars Volta - De-Loused in the Comatorium&lt;/h4&gt;
      &lt;p&gt;Speaking of bands I failed to get into until it was too late, At the Drive-In broke up in 2001 after finally making it &amp;quot;big.&amp;quot; Thankfully the core of the band continued as The Mars Volta. Swapping crazy punk-ish rock for progressive rock. The insane vocals remained. This is another concept album, so you know I can&amp;#39;t help but love it.&lt;/p&gt;
    &lt;/div&gt;
    &lt;div class='player'&gt;
      &lt;h6&gt;#34&lt;/h6&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;div class='cover'&gt;
      &lt;img src='http://awardwinningfjords.com/albums/33.jpg' /&gt;
    &lt;/div&gt;
    &lt;div class='content'&gt;
      &lt;h6&gt;2002&lt;/h6&gt;&lt;h4&gt;Common Rider - This is Unity Music&lt;/h4&gt;
      &lt;p&gt;I&amp;#39;ve already mentioned The Transplants, which featured former Operation Ive member Tim Armstrong. Thankfully, Jesse formed a new band as well. Common Rider is vaguely ska, but mostly held together by Jesse&amp;#39;s vocals. Their debut, Last Wave Rockers, is excellent as well, but it came out in 1999.&lt;/p&gt;
    &lt;/div&gt;
    &lt;div class='player'&gt;
      &lt;h6&gt;#33&lt;/h6&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;div class='cover'&gt;
      &lt;img src='http://awardwinningfjords.com/albums/32.jpg' /&gt;
    &lt;/div&gt;
    &lt;div class='content'&gt;
      &lt;h6&gt;2007&lt;/h6&gt;&lt;h4&gt;The National - Boxer&lt;/h4&gt;
      &lt;p&gt;Along with shoegaze, post-punk made a little comeback this decade. The National is doing it better than anyone else right now. Sorry Interpol, you got outdone.&lt;/p&gt;
    &lt;/div&gt;
    &lt;div class='player'&gt;
      &lt;h6&gt;#32&lt;/h6&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;div class='cover'&gt;
      &lt;img src='http://awardwinningfjords.com/albums/31.jpg' /&gt;
    &lt;/div&gt;
    &lt;div class='content'&gt;
      &lt;h6&gt;2006&lt;/h6&gt;&lt;h4&gt;Clint Mansell (w/ Mogwai &amp;amp; Kronos Quartet) - The Fountain (Music from the Motion Picture)&lt;/h4&gt;
      &lt;p&gt;Holy crap! As if post-rock albums weren&amp;#39;t epic enough, they had to write one about a century-spanning romantic, sci-fi beauty. The music perfectly matches the movie and the crescendo of the album (and film), &amp;quot;Death Is The Road To Awe&amp;quot; can&amp;#39;t be beat.&lt;/p&gt;
    &lt;/div&gt;
    &lt;div class='player'&gt;
      &lt;h6&gt;#31&lt;/h6&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;div class='cover'&gt;
      &lt;img src='http://awardwinningfjords.com/albums/30.jpg' /&gt;
    &lt;/div&gt;
    &lt;div class='content'&gt;
      &lt;h6&gt;2005&lt;/h6&gt;&lt;h4&gt;Kanye West - Late Registration&lt;/h4&gt;
      &lt;p&gt;Kanye&amp;#39;s most consistent and best produced work. Featuring folks like Michel Gondry and Jon Brion ridding shotgun. 808s and Heartbreak is very interesting, but I&amp;#39;m going with &amp;quot;classic&amp;quot; Kanye.&lt;/p&gt;
    &lt;/div&gt;
    &lt;div class='player'&gt;
      &lt;h6&gt;#30&lt;/h6&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;div class='cover'&gt;
      &lt;img src='http://awardwinningfjords.com/albums/29.jpg' /&gt;
    &lt;/div&gt;
    &lt;div class='content'&gt;
      &lt;h6&gt;2003&lt;/h6&gt;&lt;h4&gt;The Distillers - Coral Fang&lt;/h4&gt;
      &lt;p&gt;The definitive break-up album. The album was written during, and focusing on, the lead singer&amp;#39;s divorce from Transplant&amp;#39;s Tim Armstrong and new relationship with Queens of the Stone Age&amp;#39;s Josh Homme. I seriously hope I never make a woman as angry as Brody is on this album.&lt;/p&gt;
    &lt;/div&gt;
    &lt;div class='player'&gt;
      &lt;h6&gt;#29&lt;/h6&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;div class='cover'&gt;
      &lt;img src='http://awardwinningfjords.com/albums/28.jpg' /&gt;
    &lt;/div&gt;
    &lt;div class='content'&gt;
      &lt;h6&gt;2006&lt;/h6&gt;&lt;h4&gt;The Dresden Dolls - Yes Virginia&lt;/h4&gt;
      &lt;p&gt;The terrific twosome reigned in their self-title&amp;#39;s burlesque punk sounds and creates this quirky masterpiece. The first half bounces around with great piano pieces and weird, chirping vocals. The second half slows down a little, but it&amp;#39;s still great.&lt;/p&gt;
    &lt;/div&gt;
    &lt;div class='player'&gt;
      &lt;h6&gt;#28&lt;/h6&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;div class='cover'&gt;
      &lt;img src='http://awardwinningfjords.com/albums/27.jpg' /&gt;
    &lt;/div&gt;
    &lt;div class='content'&gt;
      &lt;h6&gt;2001&lt;/h6&gt;&lt;h4&gt;Leftover Crack - Mediocre Generica&lt;/h4&gt;
      &lt;p&gt;The band&amp;#39;s &amp;quot;tower-toppling release of 9/11/01&amp;quot; is one of the best punk albums of the decade and one of the best ska-punk albums of all time. Styz&amp;#39;s anti-religion, anti-intolerance and pro-anarchy lyrics are top notch.&lt;/p&gt;
    &lt;/div&gt;
    &lt;div class='player'&gt;
      &lt;h6&gt;#27&lt;/h6&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;div class='cover'&gt;
      &lt;img src='http://awardwinningfjords.com/albums/26.jpg' /&gt;
    &lt;/div&gt;
    &lt;div class='content'&gt;
      &lt;h6&gt;2009&lt;/h6&gt;&lt;h4&gt;Portugal the Man - The Satanic Satanist&lt;/h4&gt;
      &lt;p&gt;One of those albums that you can leave on repeat for hours accidentally. Sublimely cohesive.&lt;/p&gt;
    &lt;/div&gt;
    &lt;div class='player'&gt;
      &lt;h6&gt;#26&lt;/h6&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>The Middleman. A modular, feature-rich static site generator</title>
    <link rel="alternate" href="/2009/10/22/middleman.html"/>
    <id>/2009/10/22/middleman.html</id>
    <published>2009-10-22T00:00:00-08:00</published>
    <updated>2009-10-22T00:00:00-08:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;&lt;strong&gt;Update: &lt;a href="/2011/08/08/middleman-2-0.html"&gt;Middleman version 2.0 has been released&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;Update: &lt;a href="/2011/04/15/middleman-v11.html"&gt;Middleman version 1.1 has been released&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;Update: New &lt;a href="https://convore.com/middleman/"&gt;Middleman Support Forum&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;&lt;strong&gt;Update: &lt;a href="/2011/08/08/middleman-2-0.html"&gt;Middleman version 2.0 has been released&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;Update: &lt;a href="/2011/04/15/middleman-v11.html"&gt;Middleman version 1.1 has been released&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;Update: New &lt;a href="https://convore.com/middleman/"&gt;Middleman Support Forum&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Developing large sites can be a tedious process. First of all, a large portion of each page will contain some amount of shared code. You have site-wide navigation, footers, javascript and CSS. Within those sections you may have other common data such as color schemes, asset paths and tracking codes. Experienced developers will see this problem coming from a mile away and start the project with site-wide constants and common components separated into their own reusable files. This works pretty well if you are developing in the same framework or language that the site will eventually operate under in production, but what if your job is strictly front-end and you have no advanced knowledge of the backend which will display your pages?&lt;/p&gt;

&lt;p&gt;The two most common approaches I&amp;#39;ve encountered are to develop every page statically with shared components repeated in each and every file. Alternatively, many developers assume global familiarity with PHP or ASP and use some form of Server-Side Include for shared components. The situation gets a bit trickier for global constants and shared paths. I&amp;#39;ve seen PHP variables scattered throughout a site. I&amp;#39;ve also seen IDE-specific includes (like Textmate&amp;#39;s) used for shared content and variables. &lt;/p&gt;

&lt;p&gt;These approaches have a couple problems. First, they assume the client cares what technology you use. Second, they require you to deploy the site to a web-server before the client can preview the design. And finally, the backend team will probably be frustrated with your PHP unless they just so happen to use it as well.&lt;/p&gt;

&lt;p&gt;The solution is to use strong backend tools and concepts like variables, helper functions, layouts (or MasterPages) and javascript/css minifiers while still delivering plain old, static HTML to the client.&lt;/p&gt;

&lt;h2&gt;Existing solutions&lt;/h2&gt;

&lt;p&gt;The Ruby world already has a handful of tools which accomplish this. The two most common, in my opinion, are &lt;a href="http://staticmatic.rubyforge.org/"&gt;StaticMatic&lt;/a&gt; and &lt;a href="http://nanoc.stoneship.org/"&gt;Nanoc&lt;/a&gt;. I have far more experience with StaticMatic so I&amp;#39;ll talk about that first.&lt;/p&gt;

&lt;p&gt;StaticMatic is heavily inspired by Ruby on Rails and performs it&amp;#39;s task in a similar, but still slightly different, way. I&amp;#39;ve used StaticMatic for years, contributed to it&amp;#39;s codebase and converted anyone who would listen to using it. It allowed me to use Haml &amp;amp; Sass in static pages and I loved it. However, I have my own opinions and StaticMatic does a lot of little things differently than I&amp;#39;d like. Rather than fork that project or complain online, I wrote my own replacement which fits my style of development more closely. Apples and oranges in my opinion, but maybe other developers will be more at home with Middleman, like I am.&lt;/p&gt;

&lt;p&gt;Nanoc, on the other hand, looks very, very powerful. Unfortunately, I&amp;#39;ve been frequently overwhelmed by the &lt;a href="http://nanoc.stoneship.org/manual/"&gt;documentation&lt;/a&gt; and feature set. Like I said above, I&amp;#39;m scratching my own itch and Nanoc provided a lot more than I needed while requiring a lot of Ruby-writing to work with. I see Middleman as the Sinatra of the static deployment world. There are bigger, and arguably better, systems out there, but my niche is small, easy to learn and fast.&lt;/p&gt;

&lt;h2&gt;Middleman&lt;/h2&gt;

&lt;p&gt;The best way to describe Middleman is to show you how I use it. I&amp;#39;ll show you how to install it a little further down. The &lt;tt&gt;mm-init&lt;/tt&gt; command takes a single argument, the directory which will contain your new project. If I run that command from the terminal, I will get the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# mm-init .
Generating with setup generator:
     [ADDED]  init.rb
     [ADDED]  views/index.html.haml
     [ADDED]  views/layout.haml
     [ADDED]  views/stylesheets/site.css.sass
     [ADDED]  public/stylesheets
     [ADDED]  public/javascripts
     [ADDED]  public/images
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The initializer creates a homepage (index.html.haml), a layout to contain shared interface elements and a site-wide stylesheet. As you can see, Haml and Sass are the default templating languages. However, you&amp;#39;re free to replace .haml with .erb and use Erb templates or enable additional renderers like Markdown (more on this later). The Sass support comes with Compass bundled to provide a large number of css frameworks such as YUI, Blueprint, 960.gs, Susy and more.&lt;/p&gt;

&lt;p&gt;The init.rb file allows customization and enabling or disabling specific features. The default init.rb looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Helpers
helpers do
end

# Generic configuration
# enable :slickmap

# Build-specific configuration
configure :build do
  # For example, change the Compass output style for deployment
  # enable :minified_css

  # Or use a different image path
  # set :http_path, &amp;quot;/Content/images/&amp;quot;

  # Disable cache buster
  # disable :cache_buster
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Helpers are functions which can be called from your templates and allow you to abstract frequently repeated code. Middleman comes with a handful, most for asset management, but you can write your own within the helpers block in the init.rb.&lt;/p&gt;

&lt;p&gt;Next is the commented-out &lt;a href="http://astuteo.com/slickmap/"&gt;Slickmap&lt;/a&gt; feature. If you remove the comment, your structure will be parsed and a sitemap will automatically be generated for you. There are many other features you can enable or disable and this is the place to do it.&lt;/p&gt;

&lt;p&gt;Finally, there is the configure block which allows variables, helpers and features to be modified only during the final static HTML build process. The example init.rb offers css minification, cache busting and changing the location of your assets in production (if you&amp;#39;re using a CDN).&lt;/p&gt;

&lt;h2&gt;Configuration &amp;amp; an Example&lt;/h2&gt;

&lt;p&gt;The &lt;tt&gt;mm-init&lt;/tt&gt; command creates an init.rb which will contain your customizations and configuration.&lt;/p&gt;

&lt;p&gt;Below is an example init.rb that I am using on a live client site. First, I include a couple files with helper definitions. Next I enable php files to be previewed and choose the default template for directory requests. For this project, I have chosen to place all static files under the &amp;quot;assets&amp;quot; folder. The asset_url helper is overridden to ignore a couple cases specific to this site. Finally, I setup the directory under which the site will live in production. That&amp;#39;s it! Nearly 200 pages with a shared layout, simple Haml templates, Blueprint-base CSS grids, minified CSS, Javascript dependency management and minification, CDN support and cache busting query strings.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;require &amp;#39;config/path_helpers&amp;#39;
require &amp;#39;config/haml_helpers&amp;#39;

mime :php, &amp;quot;text/html&amp;quot;
set :index_file, &amp;quot;index.php&amp;quot;
set :images_dir, &amp;quot;assets/images&amp;quot;
set :css_dir, &amp;quot;assets/stylesheets&amp;quot;
set :videos_dir, &amp;quot;assets/videos&amp;quot;
set :js_dir, &amp;quot;assets/javascripts&amp;quot;

configure :build do
  set :http_prefix, &amp;quot;/sites/billboard&amp;quot;
  enable :automatic_image_sizes
end
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Features&lt;/h2&gt;

&lt;p&gt;As you can see, the basic project is quite sparse and you get to choose which features your project needs. 
The current list of features is as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Features enabled by default
enable :compass
enable :sprockets

# Features disabled by default
disable :slickmap
disable :cache_buster
disable :minify_css
disable :minify_javascript
disable :relative_assets
disable :maruku
disable :automatic_image_sizes
disable :minify_css
disable :minify_javascript
disable :cache_buster
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;More documentation on these features and what they enable can be found &lt;a href="http://middlemanapp.com"&gt;on the project website&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Development Process&lt;/h2&gt;

&lt;p&gt;So, the quickest way to get started is to run &lt;tt&gt;mm-init&lt;/tt&gt; and point it at a location for your new project. Then change directories into that project and run &lt;tt&gt;mm-server&lt;/tt&gt;. Now you can develop your site and preview the results on localhost:4567. Finally, when you&amp;#39;re ready to deliver raw HTML, run &lt;tt&gt;mm-build&lt;/tt&gt; from the project folder. Here&amp;#39;s an example.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Gir:~ tdreyno$ mm-init new_project
Generating with setup generator:
     [ADDED]  init.rb
     [ADDED]  views/index.haml
     [ADDED]  views/layout.haml
     [ADDED]  views/stylesheets/site.sass
     [ADDED]  public/stylesheets
     [ADDED]  public/javascripts
     [ADDED]  public/images

Gir:~ tdreyno$ cd new_project/
Gir:new_project tdreyno$ mm-server 
== Local config at: /Users/tdreyno/new_project/init.rb
== The Middleman is standing watch on port 4567
&amp;gt;&amp;gt; Thin web server (v1.2.4 codename Flaming Astroboy)
&amp;gt;&amp;gt; Maximum connections set to 1024
&amp;gt;&amp;gt; Listening on 0.0.0.0:4567, CTRL+C to stop

Gir:new_project tdreyno$ mm-build 
== Local config at: /Users/tdreyno/new_project/init.rb
Generating with build generator:
     [ADDED]  index.html
     [ADDED]  stylesheets/site.css

     &amp;gt;&amp;gt; Thin web server (v1.2.4 codename Flaming Astroboy)
     &amp;gt;&amp;gt; Maximum connections set to 1024
     &amp;gt;&amp;gt; Listening on 0.0.0.0:4567, CTRL+C to stop
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Source &amp;amp; bug reports&lt;/h2&gt;

&lt;p&gt;The code, as always, is on GitHub at: &lt;a href="http://github.com/middleman/middleman"&gt;http://github.com/middleman/middleman&lt;/a&gt;.&lt;br /&gt;
There is also a wiki at: &lt;a href="http://wiki.github.com/middleman/middleman"&gt;http://wiki.github.com/middleman/middleman&lt;/a&gt;.&lt;br /&gt;
And finally, please report bugs to: &lt;a href="http://github.com/middleman/middleman/issues"&gt;http://github.com/middleman/middleman/issues&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Tweetie-style paging with pageSlider</title>
    <link rel="alternate" href="/2009/08/31/pageslider-tweetie-style-pages.html"/>
    <id>/2009/08/31/pageslider-tweetie-style-pages.html</id>
    <published>2009-08-31T00:00:00-08:00</published>
    <updated>2009-08-31T00:00:00-08:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;&lt;a href="http://www.atebits.com/tweetie-mac/"&gt;Tweetie for Mac&lt;/a&gt; is one of my favorite programs. However, it is also one of the least Mac-like applications I use. Instead of standard interactions, such as a tab control, for switching modes, Tweetie uses an iPhone-inspired
</summary>
    <content type="html">&lt;p&gt;&lt;a href="http://www.atebits.com/tweetie-mac/"&gt;Tweetie for Mac&lt;/a&gt; is one of my favorite programs. However, it is also one of the least Mac-like applications I use. Instead of standard interactions, such as a tab control, for switching modes, Tweetie uses an iPhone-inspired
vertical slide. This is similar to the various carousel scripts around the web, but vertical rather than horizontal.&lt;/p&gt;

&lt;p&gt;I recently need a little bit of gloss on a rather plain website, so I borrowed the effect. You can see the code implemented on the &lt;a href="http://www.jivesoftware.com/jiveworld/faqs"&gt;JiveWorld09&lt;/a&gt; conference site. You can also see the effect in the screencast below:&lt;/p&gt;

&lt;div class='flash'&gt;
  &lt;object height='404' width='400'&gt;
    &lt;param name='allowfullscreen' value='true' /&gt;
    &lt;param name='allowscriptaccess' value='always' /&gt;
    &lt;param name='movie' value='http://vimeo.com/moogaloop.swf?clip_id=6371313&amp;amp;server=vimeo.com&amp;amp;show_title=1&amp;amp;show_byline=1&amp;amp;show_portrait=0&amp;amp;color=00ADEF&amp;amp;fullscreen=1' /&gt;
    &lt;embed allowfullscreen='true' allowscriptaccess='always' height='404' src='http://vimeo.com/moogaloop.swf?clip_id=6371313&amp;amp;server=vimeo.com&amp;amp;show_title=1&amp;amp;show_byline=1&amp;amp;show_portrait=0&amp;amp;color=00ADEF&amp;amp;fullscreen=1' type='application/x-shockwave-flash' width='400'&gt;&lt;/embed&gt;
  &lt;/object&gt;
&lt;/div&gt;

&lt;h2&gt;The Source&lt;/h2&gt;

&lt;p&gt;You can grab the code on Github at&lt;a href="http://github.com/tdreyno/pageSlider"&gt;http://github.com/tdreyno/pageSlider&lt;/a&gt;
or in &lt;a href="http://cloud.github.com/downloads/tdreyno/pageSlider/pageSlider.zip"&gt;this zip file&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;How to Use&lt;/h2&gt;

&lt;p&gt;First, and foremost, you will need jQuery and jQuery.history to provide the back-button support. These are included on GitHub and in the downloadable zip file.&lt;/p&gt;

&lt;p&gt;The code is implemented as a jQuery plugin which is called on a collection of pages in the current html document. You must have a div which contains the pages (defaults to having an id of &lt;tt&gt;maincontent&lt;/tt&gt;) and then you will select the pages and apply the plugin. In the example below, each page has a class of &lt;tt&gt;page&lt;/tt&gt;. That same div must also have a &lt;tt&gt;title&lt;/tt&gt; attribute declaring the unique name for referring to that page.&lt;/p&gt;

&lt;p&gt;There are also some CSS caveats. The containing element must be set to &lt;tt&gt;overflow: hidden;&lt;/tt&gt;. Additionally, calculating heights on the pages can be difficult. The best way is to set a padding on the &lt;tt&gt;.page&lt;/tt&gt; so margins don&amp;#39;t leak outside it&amp;#39;s box.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;head&amp;gt;
  &amp;lt;style type=&amp;quot;text/css&amp;quot;&amp;gt;
    #maincontent {
      overflow: hidden; }
    .page {
      padding: 5px; }
  &amp;lt;/style&amp;gt;
  &amp;lt;script src=&amp;quot;jquery-1.3.2.js&amp;quot; type=&amp;quot;text/javascript&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;script src=&amp;quot;jquery.history.js&amp;quot; type=&amp;quot;text/javascript&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;script src=&amp;quot;jquery.page-slider.js&amp;quot; type=&amp;quot;text/javascript&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
    $(document).ready(function() {
      $(&amp;#39;.page&amp;#39;).pageSlider();
    });
  &amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;

&amp;lt;body&amp;gt;
  &amp;lt;div id=&amp;quot;maincontent&amp;quot;&amp;gt;
    &amp;lt;div title=&amp;quot;home&amp;quot; class=&amp;quot;page&amp;quot;&amp;gt;
      Home page
    &amp;lt;/div&amp;gt;
    &amp;lt;div title=&amp;quot;page2&amp;quot; class=&amp;quot;page&amp;quot;&amp;gt;
      Page number two
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, whenever the &amp;quot;history&amp;quot; hash (the #page location in the URL) is changed, the javascript will slide to the requested piece. Normal links such as &amp;lt;a href=&amp;quot;#page2&amp;quot;&amp;gt; can be used to trigger the effect. The back-button will also change the history and thus trigger the animation.&lt;/p&gt;

&lt;h2&gt;Configuration&lt;/h2&gt;

&lt;p&gt;The plugin needs to know the containing element to slide inside of.&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;&lt;tt&gt;containerSelector&lt;/tt&gt; sets the text of the "on" state. Defaults to: &lt;strong&gt;#maincontent&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;$(&amp;#39;.page&amp;#39;).pageSlider({
  containerSelector: &amp;quot;#frame&amp;quot;
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Events&lt;/h2&gt;

&lt;p&gt;The plugin calls a &lt;tt&gt;changingPage&lt;/tt&gt; event whenever the animation begins. If you have dependent elements you want to update together with the slide, you can attach them to the event via the normal jQuery event model. This callback is used in the video above to update the sidebar navigation when the history changes.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(document).bind(&amp;#39;changingPage&amp;#39;, function(anchor_name) {
  // Update some other dependent element based on anchor_name
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Demo&lt;/h2&gt;

&lt;p&gt;&lt;a href="/pageSlider/demo.html"&gt;See the demo here&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Speaking at RefreshPDX on Sass</title>
    <link rel="alternate" href="/2009/07/22/speaking-at-refreshpdx.html"/>
    <id>/2009/07/22/speaking-at-refreshpdx.html</id>
    <published>2009-07-22T00:00:00-08:00</published>
    <updated>2009-07-22T00:00:00-08:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;It&amp;#39;s late notice, but I&amp;#39;ll be speaking on Sass and Compass at &lt;a href="http://refreshpdx.org/"&gt;Refresh Portland&lt;/a&gt;  on Thursday, July 23rd at  &lt;a href="http://maps.google.com/maps?f=q&amp;amp;hl=en&amp;amp;q=915+SW+Stark+St,+Portland,+Multnomah,+Oregon+97205,+United+States&amp;amp;sll=37.0625,-95.677068&amp;amp;sspn=49.176833,77.519531&amp;amp;ie=UTF8&amp;amp;cd=1&amp;amp;geocode=0,45.521796,-122.680205&amp;amp;ll=45.521804,-122.680206&amp;amp;spn=0.021408,0.037851&amp;amp;t=p&amp;amp;z=15&amp;amp;iwloc=addr"&gt;Jive Software&lt;/a&gt;.&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;It&amp;#39;s late notice, but I&amp;#39;ll be speaking on Sass and Compass at &lt;a href="http://refreshpdx.org/"&gt;Refresh Portland&lt;/a&gt;  on Thursday, July 23rd at  &lt;a href="http://maps.google.com/maps?f=q&amp;amp;hl=en&amp;amp;q=915+SW+Stark+St,+Portland,+Multnomah,+Oregon+97205,+United+States&amp;amp;sll=37.0625,-95.677068&amp;amp;sspn=49.176833,77.519531&amp;amp;ie=UTF8&amp;amp;cd=1&amp;amp;geocode=0,45.521796,-122.680205&amp;amp;ll=45.521804,-122.680206&amp;amp;spn=0.021408,0.037851&amp;amp;t=p&amp;amp;z=15&amp;amp;iwloc=addr"&gt;Jive Software&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The presentation should be streamed (and then archived) on Ustream and I&amp;#39;ll post the slides here on Friday.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Simplifying CSS with Sass Presentation</title>
    <link rel="alternate" href="/2009/07/22/simplifying-css-presentation.html"/>
    <id>/2009/07/22/simplifying-css-presentation.html</id>
    <published>2009-07-22T00:00:00-08:00</published>
    <updated>2009-07-22T00:00:00-08:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;Here are my slides from tonight&amp;#39;s Refresh PDX presentation on Sass and Compass.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.slideshare.net/tdreyno/simplifying-css-with-sass"&gt;Simplifying CSS With Sass&lt;/a&gt;&lt;/p&gt;

&lt;div class='flash'&gt;
  &lt;object height='355' style='margin:0px' width='425'&gt;
</summary>
    <content type="html">&lt;p&gt;Here are my slides from tonight&amp;#39;s Refresh PDX presentation on Sass and Compass.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.slideshare.net/tdreyno/simplifying-css-with-sass"&gt;Simplifying CSS With Sass&lt;/a&gt;&lt;/p&gt;

&lt;div class='flash'&gt;
  &lt;object height='355' style='margin:0px' width='425'&gt;
    &lt;param name='movie' value='http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=simplifyingcsswithsass-090724010510-phpapp02&amp;amp;rel=0&amp;amp;stripped_title=simplifying-css-with-sass' /&gt;
    &lt;param name='allowFullScreen' value='true' /&gt;
    &lt;param name='allowScriptAccess' value='always' /&gt;
    &lt;embed allowfullscreen='true' allowscriptaccess='always' height='355' src='http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=simplifyingcsswithsass-090724010510-phpapp02&amp;amp;rel=0&amp;amp;stripped_title=simplifying-css-with-sass' type='application/x-shockwave-flash' width='425'&gt;&lt;/embed&gt;
  &lt;/object&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry>
    <title>Easy Google Maps with jQuery</title>
    <link rel="alternate" href="/2009/07/22/google-maps-with-jquery.html"/>
    <id>/2009/07/22/google-maps-with-jquery.html</id>
    <published>2009-07-22T00:00:00-08:00</published>
    <updated>2009-07-22T00:00:00-08:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;The other day I needed a simple way to include a Google Map, so I wrote this jQuery function.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$.fn.googleMap = function(address, options) {
  var defaults = {
    lat: 44.081996,
    long: -123.0286928,
    zoom: 14,
    mapTypeId: google.maps.MapTypeId.HYBRID
</summary>
    <content type="html">&lt;p&gt;The other day I needed a simple way to include a Google Map, so I wrote this jQuery function.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$.fn.googleMap = function(address, options) {
  var defaults = {
    lat: 44.081996,
    long: -123.0286928,
    zoom: 14,
    mapTypeId: google.maps.MapTypeId.HYBRID
  };

  options = $.extend(defaults, options || {});

  var center = new google.maps.LatLng(options.lat, options.long);
  var map = new google.maps.Map(this.get(0), $.extend(options, { center: center }));

  var geocoder = new google.maps.Geocoder();
  geocoder.geocode({ address: address }, function(results, status) {
    if (status == google.maps.GeocoderStatus.OK &amp;amp;&amp;amp; results.length) {
      if (status != google.maps.GeocoderStatus.ZERO_RESULTS) {
        map.setCenter(results[0].geometry.location);
        var marker = new google.maps.Marker({
            position: results[0].geometry.location,
            map: map
        });
      }
    }
  });
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Basically, the lat &amp;amp; long are default coordinates, but you pass in an address which Google focuses the map on.&lt;/p&gt;

&lt;p&gt;This requires the latest (v3) version of the Google Map API.&lt;/p&gt;

&lt;h2&gt;Usage&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;script src=&amp;#39;http://maps.google.com/maps/api/js?sensor=false&amp;#39; type=&amp;#39;text/javascript&amp;#39;&amp;gt;
&amp;lt;/script&amp;gt;
&amp;lt;script type=&amp;#39;text/javascript&amp;#39;&amp;gt;
  $(document).ready(function() {
    $(&amp;#39;#map-container&amp;#39;).googleMap(&amp;quot;3333 RiverBend Drive, Springfield, OR&amp;quot;);
  });
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</content>
  </entry>
  <entry>
    <title>Rapha&amp;euml;l. The Return of Browser SVG</title>
    <link rel="alternate" href="/2009/07/13/return-of-svg.html"/>
    <id>/2009/07/13/return-of-svg.html</id>
    <published>2009-07-13T00:00:00-08:00</published>
    <updated>2009-07-13T00:00:00-08:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;Maybe we&amp;#39;ve all been too hasty in declaring the &lt;tt&gt;canvas&lt;/tt&gt; tag the new king of web interaction. I&amp;#39;ve just stumbled upon &lt;a href="http://raphaeljs.com/"&gt;Rapha&amp;euml;l&lt;/a&gt;&amp;mdash;a javascript library for interacting with SVG. The library is cross-browser thanks to VML on Internet Explorer. &lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;Maybe we&amp;#39;ve all been too hasty in declaring the &lt;tt&gt;canvas&lt;/tt&gt; tag the new king of web interaction. I&amp;#39;ve just stumbled upon &lt;a href="http://raphaeljs.com/"&gt;Rapha&amp;euml;l&lt;/a&gt;&amp;mdash;a javascript library for interacting with SVG. The library is cross-browser thanks to VML on Internet Explorer. &lt;/p&gt;

&lt;p&gt;I really like the idea of having real DOM nodes when manipulating things via javascript. The &lt;tt&gt;canvas&lt;/tt&gt; tag always seemed a big too much like Flash for my liking. Here are a few of my favorite demos:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="http://raphaeljs.com/australia.html"&gt;A vector map of Australia&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://raphaeljs.com/github/impact.html"&gt;Github-style impact chart&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://raphaeljs.com/analytics.html"&gt;Interactive analytics graph&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://raphaeljs.com/ichart.html"&gt;Draggable graph&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks to &lt;a href="http://pixelmatrixdesign.com/"&gt;Josh Pyles&lt;/a&gt; for pointing it out.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>iPhone-style Checkboxes for Prototype</title>
    <link rel="alternate" href="/2009/06/29/prototype-iphone-style-checkboxes.html"/>
    <id>/2009/06/29/prototype-iphone-style-checkboxes.html</id>
    <published>2009-06-29T00:00:00-08:00</published>
    <updated>2009-06-29T00:00:00-08:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;Big thanks to &lt;a href="http://jqr.github.com/"&gt;Elijah Miller&lt;/a&gt; for stepping up and finishing the work on the Prototype version of the iPhone-style checkboxes. Elijah now has write-access to the official repository at GitHub and will be maintaining it alongside my jQuery version.&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;Big thanks to &lt;a href="http://jqr.github.com/"&gt;Elijah Miller&lt;/a&gt; for stepping up and finishing the work on the Prototype version of the iPhone-style checkboxes. Elijah now has write-access to the official repository at GitHub and will be maintaining it alongside my jQuery version.&lt;/p&gt;

&lt;h2&gt;Examples&lt;/h2&gt;

&lt;p&gt;&lt;div class='table'&gt;
  &lt;table&gt;
    &lt;tr&gt;
      &lt;td style='vertical-align: middle !important;'&gt;
        A checkbox defaulting to &lt;strong&gt;checked&lt;/strong&gt;
      &lt;/td&gt;
      &lt;td&gt;
        &lt;input checked='checked' class='normal' type='checkbox' /&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style='vertical-align: middle !important;'&gt;
        A checkbox defaulting to &lt;strong&gt;unchecked&lt;/strong&gt;
      &lt;/td&gt;
      &lt;td&gt;
        &lt;input class='normal' type='checkbox' /&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/table&gt;
&lt;/div&gt;
&lt;link charset='utf-8' href='/iphone-style-checkboxes/style.css' media='screen' rel='stylesheet' type='text/css' /&gt;
&lt;script src='/iphone-style-checkboxes/prototype/prototype-1.6.0.3.js' type='text/javascript'&gt;&lt;/script&gt;
&lt;script src='/iphone-style-checkboxes/prototype/scriptaculous-effects-1.8.2.js' type='text/javascript'&gt;&lt;/script&gt;
&lt;script src='/iphone-style-checkboxes/prototype/iphone-style-checkboxes.js' type='text/javascript'&gt;&lt;/script&gt;
&lt;script type='text/javascript'&gt;
  new iPhoneStyle(&amp;#39;#post input[type=checkbox].normal&amp;#39;);
&lt;/script&gt;&lt;/p&gt;

&lt;h2&gt;Download and implement&lt;/h2&gt;

&lt;p&gt;As with the jQuery version, &lt;a href="http://github.com/tdreyno/iphone-style-checkboxes/zipball/master"&gt;download the package&lt;/a&gt;, unzip it and place the javascript, images and stylesheet where you please. You&amp;#39;ll need to update the stylesheet to point to the new location of your images if they have changed relative to the stylesheet.&lt;/p&gt;

&lt;p&gt;Once the files are available to your site, activating the script is very easy:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;head&amp;gt;
  &amp;lt;script src=&amp;quot;prototype.js&amp;quot; type=&amp;quot;text/javascript&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;script src=&amp;quot;scriptaculous.js&amp;quot; type=&amp;quot;text/javascript&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;script src=&amp;quot;prototype/iphone-style-checkboxes.js&amp;quot; type=&amp;quot;text/javascript&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;path_to/style.css&amp;quot; type=&amp;quot;text/css&amp;quot; media=&amp;quot;screen&amp;quot; /&amp;gt;
  &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
    document.observe(&amp;quot;dom:loaded&amp;quot;, function() {
      new iPhoneStyle(&amp;#39;input[type=checkbox]&amp;#39;);
    });
  &amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The initialization method takes a handful of options.&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;&lt;tt&gt;checkedLabel&lt;/tt&gt; sets the text of the "on" state. Defaults to: &lt;strong&gt;ON&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;tt&gt;uncheckedLabel&lt;/tt&gt; sets the text of the "off" state. Defaults to: &lt;strong&gt;OFF&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;new iPhoneStyle(&amp;#39;input[type=checkbox]&amp;#39;, {
  checkedLabel: &amp;#39;YES&amp;#39;,
  uncheckedLabel: &amp;#39;NO&amp;#39;
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;div class='table'&gt;
  &lt;table&gt;
    &lt;tr&gt;
      &lt;td style='vertical-align: middle !important;'&gt;
        A checkbox defaulting to &lt;strong&gt;checked&lt;/strong&gt;
      &lt;/td&gt;
      &lt;td&gt;
        &lt;input checked='checked' class='yesno' type='checkbox' /&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style='vertical-align: middle !important;'&gt;
        A checkbox defaulting to &lt;strong&gt;unchecked&lt;/strong&gt;
      &lt;/td&gt;
      &lt;td&gt;
        &lt;input class='yesno' type='checkbox' /&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/table&gt;
&lt;/div&gt;
&lt;script type='text/javascript'&gt;
  new iPhoneStyle(&amp;#39;#post input[type=checkbox].yesno&amp;#39;, { checkedLabel: &amp;#39;YES&amp;#39;, uncheckedLabel: &amp;#39;NO&amp;#39;, background: &amp;#39;#F9F3E8&amp;#39; });
&lt;/script&gt;&lt;/p&gt;

&lt;h2&gt;Original version and Contributing&lt;/h2&gt;

&lt;p&gt;You can read about the original jQuery version &lt;a href="/2009/06/16/iphone-style-checkboxes.html"&gt;here&lt;/a&gt;.
Both versions are maintained using GitHub: &lt;a href="http://github.com/tdreyno/iphone-style-checkboxes"&gt;http://github.com/tdreyno/iphone-style-checkboxes&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Introducing iPhone-style Checkboxes</title>
    <link rel="alternate" href="/2009/06/16/iphone-style-checkboxes.html"/>
    <id>/2009/06/16/iphone-style-checkboxes.html</id>
    <published>2009-06-16T00:00:00-08:00</published>
    <updated>2009-06-16T00:00:00-08:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;Ever wanted those flash iPhone on/off toggle switches on your webpage? Love jQuery? Well then I&amp;#39;ve got something special for you. iphone-style-checkboxes implements the iPhone toggles as replacements for standard HTML checkboxes. Simply run the script and your site will be updated with these specialized controls. Best of all, the underlying checkbox is not touched and backend system will never know the difference. The change is purely visual.&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;Ever wanted those flash iPhone on/off toggle switches on your webpage? Love jQuery? Well then I&amp;#39;ve got something special for you. iphone-style-checkboxes implements the iPhone toggles as replacements for standard HTML checkboxes. Simply run the script and your site will be updated with these specialized controls. Best of all, the underlying checkbox is not touched and backend system will never know the difference. The change is purely visual.&lt;/p&gt;

&lt;p&gt;&lt;a href="/2009/06/29/prototype-iphone-style-checkboxes.html"&gt;UPDATED: Now with Prototype-based version here.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://github.com/steelThread/ExtJs-ToggleSlide"&gt;UPDATED2: Now with ExtJS-based version here.&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Examples&lt;/h2&gt;

&lt;div class='table'&gt;
  &lt;table&gt;
    &lt;tr&gt;
      &lt;td style='vertical-align: middle !important;'&gt;
        A checkbox defaulting to &lt;strong&gt;checked&lt;/strong&gt;
      &lt;/td&gt;
      &lt;td&gt;
        &lt;input checked='checked' class='normal' type='checkbox' /&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style='vertical-align: middle !important;'&gt;
        A checkbox defaulting to &lt;strong&gt;unchecked&lt;/strong&gt;
      &lt;/td&gt;
      &lt;td&gt;
        &lt;input class='normal' type='checkbox' /&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/table&gt;
&lt;/div&gt;

&lt;h2&gt;Download and implement&lt;/h2&gt;

&lt;p&gt;In keeping with the jQuery philosophy, using the iphone-style-checkboxes library is very simple.
&lt;a href="http://github.com/tdreyno/iphone-style-checkboxes/zipball/master"&gt;Download the package&lt;/a&gt;,
unzip it and place the javascript, images and stylesheet where you please. You&amp;#39;ll need to update the stylesheet to point to the new location of your images if they have changed relative to the stylesheet.&lt;/p&gt;

&lt;p&gt;Once the files are available to your site, activating the script is very easy:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;head&amp;gt;
  &amp;lt;script src=&amp;quot;jquery-1.4.js&amp;quot; type=&amp;quot;text/javascript&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;script src=&amp;quot;jquery/iphone-style-checkboxes.js&amp;quot; type=&amp;quot;text/javascript&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;path_to/style.css&amp;quot; type=&amp;quot;text/css&amp;quot; media=&amp;quot;screen&amp;quot; /&amp;gt;
  &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
    $(document).ready(function() {
      $(&amp;#39;:checkbox&amp;#39;).iphoneStyle();
    });
  &amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The initialization method takes a handful of options.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;tt&gt;checkedLabel&lt;/tt&gt; sets the text of the "on" state. Defaults to: &lt;strong&gt;ON&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;tt&gt;uncheckedLabel&lt;/tt&gt; sets the text of the "off" state. Defaults to: &lt;strong&gt;OFF&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(&amp;#39;:checkbox&amp;#39;).iphoneStyle({
  checkedLabel: &amp;#39;YES&amp;#39;,
  uncheckedLabel: &amp;#39;NO&amp;#39;
});
&lt;/code&gt;&lt;/pre&gt;

&lt;div class='table'&gt;
  &lt;table&gt;
    &lt;tr&gt;
      &lt;td style='vertical-align: middle !important;'&gt;
        A checkbox defaulting to &lt;strong&gt;checked&lt;/strong&gt;
      &lt;/td&gt;
      &lt;td&gt;
        &lt;input checked='checked' class='yesno' type='checkbox' /&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style='vertical-align: middle !important;'&gt;
        A checkbox defaulting to &lt;strong&gt;unchecked&lt;/strong&gt;
      &lt;/td&gt;
      &lt;td&gt;
        &lt;input class='yesno' type='checkbox' /&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/table&gt;
&lt;/div&gt;

&lt;h2&gt;Contribute&lt;/h2&gt;

&lt;p&gt;The source is available, and forkable, on GitHub at
&lt;a href="https://github.com/tdreyno/iphone-style-checkboxes"&gt;https://github.com/tdreyno/iphone-style-checkboxes&lt;/a&gt;.
Please direct comments, support requests, bug reporting and pull requests to there.&lt;/p&gt;

&lt;script src='/projects/iphone-style-checkboxes/jquery.min.js' type='text/javascript'&gt;&lt;/script&gt;
&lt;script src='/projects/iphone-style-checkboxes/iphone-style-checkboxes.js' type='text/javascript'&gt;&lt;/script&gt;
&lt;link href='/projects/iphone-style-checkboxes/style.css' media='screen' rel='stylesheet' type='text/css'&gt;
&lt;script src='/projects/iphone-style-checkboxes/setup.js' type='text/javascript'&gt;&lt;/script&gt;
</content>
  </entry>
  <entry>
    <title>WWDC 2009 Predictions</title>
    <link rel="alternate" href="/2009/06/04/wwdc-2009-predictions.html"/>
    <id>/2009/06/04/wwdc-2009-predictions.html</id>
    <published>2009-06-04T00:00:00-08:00</published>
    <updated>2009-06-04T00:00:00-08:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;&lt;h2&gt;iPhone&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;✓ New model&lt;/li&gt;
  &lt;li&gt;✓ Video support&lt;/li&gt;
  &lt;li&gt;✓ 32Gb&lt;/li&gt;
  &lt;li&gt;✓ Compass &amp;amp; turn-by-turn partnership&lt;/li&gt;
  &lt;li&gt;✓ Pre/Zune bashing&lt;/li&gt;
  &lt;li&gt;✓ iTunes WiFi Video Store&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Snow Leopard&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Secret sauce released: theme updates, ✓ Cocoa/64bit magic, ✓ Safari 4&lt;/li&gt;
</summary>
    <content type="html">&lt;p&gt;&lt;h2&gt;iPhone&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;✓ New model&lt;/li&gt;
  &lt;li&gt;✓ Video support&lt;/li&gt;
  &lt;li&gt;✓ 32Gb&lt;/li&gt;
  &lt;li&gt;✓ Compass &amp;amp; turn-by-turn partnership&lt;/li&gt;
  &lt;li&gt;✓ Pre/Zune bashing&lt;/li&gt;
  &lt;li&gt;✓ iTunes WiFi Video Store&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Snow Leopard&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Secret sauce released: theme updates, ✓ Cocoa/64bit magic, ✓ Safari 4&lt;/li&gt;
  &lt;li&gt;✓ RC handed out to developers&lt;/li&gt;
  &lt;li&gt;✓ Out in September&lt;/li&gt;
  &lt;li&gt;✓ Windows 7 bashing&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;MacBooks&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;✓ Unibody line updated&lt;/li&gt;
  &lt;li&gt;✓ MacBook Air revision&lt;/li&gt;
  &lt;li&gt;New Snow Leopard-only features: new gestures, video cards, etc&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Simplify image paths with image_url()</title>
    <link rel="alternate" href="/2009/05/11/simplify-image-paths-with-image_url.html"/>
    <id>/2009/05/11/simplify-image-paths-with-image_url.html</id>
    <published>2009-05-11T00:00:00-08:00</published>
    <updated>2009-05-11T00:00:00-08:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;Recently Compass introduced a Sass method called image_url() which allows you to refer to images by their file name only. When the Sass is compiled, the CSS url() method is populated with a path generated by Compass.&lt;/p&gt;

&lt;p&gt;When you start a new project using the compass command-line tool, it will generate a config.rb file which contains options specific to your new project. There is a variable called http&lt;em&gt;images&lt;/em&gt;path which is used by Compass to generate the correct image paths. I have the value setup for this site as such&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;Recently Compass introduced a Sass method called image_url() which allows you to refer to images by their file name only. When the Sass is compiled, the CSS url() method is populated with a path generated by Compass.&lt;/p&gt;

&lt;p&gt;When you start a new project using the compass command-line tool, it will generate a config.rb file which contains options specific to your new project. There is a variable called http&lt;em&gt;images&lt;/em&gt;path which is used by Compass to generate the correct image paths. I have the value setup for this site as such&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http_images_path = &amp;quot;/wp-content/themes/default/images/&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now when I use the image_url() method for the header on this site:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;h1
  background= image_url(&amp;quot;title-embellishment.gif&amp;quot;) &amp;quot;no-repeat&amp;quot; 17px 7px
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It will generate this CSS:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;h1 {
  background: url(/images/title-embellishment.gif) no-repeat 17px 7px; }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This makes it trivial to change image paths for the entire site with one line in config.rb. Never again worry about relative paths, ../../images/ and the like.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Using Compass to implement the Blueprint grid-system &amp;amp; consistent vertical-rhythm</title>
    <link rel="alternate" href="/2009/05/07/blueprint-grids-vertical-rhythm.html"/>
    <id>/2009/05/07/blueprint-grids-vertical-rhythm.html</id>
    <published>2009-05-07T00:00:00-08:00</published>
    <updated>2009-05-07T00:00:00-08:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;Using Sass &amp;amp; Compass I updated the css on this site to use Blueprint&amp;#39;s 950px grid system and their typography for consistent vertical rhythm. 
The full Sass is included below:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@import base.sass

body
  background: #F9F3E8

a
</summary>
    <content type="html">&lt;p&gt;Using Sass &amp;amp; Compass I updated the css on this site to use Blueprint&amp;#39;s 950px grid system and their typography for consistent vertical rhythm. 
The full Sass is included below:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@import base.sass

body
  background: #F9F3E8

a
  font-weight: bold

h1, h2, h3
  font-family= !header_font_family
  font-weight: 200
  a
    text-decoration: none
    color= !header_color
    font-weight: 200
h1
  margin-top: 0
  background= image_url(&amp;quot;title-embellishment.gif&amp;quot;) &amp;quot;no-repeat&amp;quot; 17px 7px
h2
  margin: 1.5em 0 0 0

hr
  +colruler
  color= !border_color
  background= !border_color

#header
  height: 108px
  background: #6B4419
  h2
    height: 108px
    +replace-text(&amp;quot;header.gif&amp;quot;)
    +link-fills-element
  p
    display: none

#post
  +container(790px)
  padding-top= (!baseline * 2)
  h1, h2, p, blockquote, ul, ol, pre
    +prepend(2)
    +append(2)
  hr
    margin-left: 80px
    +span(16)
  blockquote
    color: #592E08
    font-family= !quote_font_family
    background= image_url(&amp;quot;quote.gif&amp;quot;) &amp;quot;no-repeat&amp;quot;
  strong
    color= !darker_font_color
  pre
    color= !darker_font_color
    background= #F2EADD image_url(&amp;quot;code.gif&amp;quot;) &amp;quot;no-repeat&amp;quot;
    overflow: visible
    padding-top: 1.5em
    padding-bottom: 1.5em
    strong
      font-weight: normal
      color: #000

.blurb-set
  +container(630px)
  +prepend(2)
  +append(2)
  .post-blurb
    +column(8)
    width: 290px
    padding= !baseline 20px !baseline 0
    h3
      margin-top: 0
  .last
    +last
    padding-right: 0 !important

#comments
  +container(790px)
  padding-top: 1.5em
  h2
    color: #543616
    border-bottom= 3px &amp;quot;solid&amp;quot; !border_color
    +prepend(2)
    margin= 0 0 (!baseline - 3px) 0
    span
      height= (!baseline * 2)
      overflow: hidden
      display: inline
      font-weight: bold
      font-family: &amp;#39;Helvetica Neue&amp;#39;, arial, sans-serif
      color: #fff
      padding: 0 10px
      -webkit-border-radius: 0.5em
      -moz-border-radius: 0.5em
      background: #AF512C
  ul
    +no-bullets
    margin: 0 0 3em 0
    padding: 0
    li
      +prepend(2)
      +append(2)
      padding-top: 1.5em
      padding-bottom: 1.5em
      background= image_url(&amp;quot;quote-odd.gif&amp;quot;) &amp;quot;no-repeat&amp;quot; 0 -23px
      cite
        font-weight: bold
        font-style: normal
        color: #AF512C
      &amp;amp;amp;.odd
        background= #F2EADD image_url(&amp;quot;quote-even.gif&amp;quot;) &amp;quot;no-repeat&amp;quot; 0 -23px
      &amp;amp;amp;.comment-author-admin
        background= #8F704E image_url(&amp;quot;quote-myself.gif&amp;quot;) &amp;quot;no-repeat&amp;quot; 0 -23px
        cite
          color: #fff
        p
          color: #D2C6B8

#footer
  text-align: left
  .wrapper
    +container(630px)

  #copyright
    background: #603D17
    padding-top: 1.5em
    padding-bottom: 1.5em
    +clearfix
    p
      color: #B09E8B
      margin: 0
      a
        color: #B09E8B
        font-weight: normal
      &amp;amp;amp;.left
        +float-left
      &amp;amp;amp;.right
        +float-right

  #reply
    margin-top: 1.5em
    background: #f2eadd
    h2
      color= !darker_font_color
      margin-top: 0.75em

    .text input,
    .textarea textarea
      outline: 0
      border: 2px solid #D3CBBD
      -webkit-border-radius: 0.5em
      -moz-border-radius: 0.5em
      background: #fff
      font-size: 1em
      font-family= !blueprint_font_family
      &amp;amp;amp;.example
        color: #999

    .text
      height= (!baseline * 2)
      input
        padding: 4px 6px
        width: 305px

    .textarea
      height= (!baseline * 10)
      textarea
        padding: 6px 4px
        width: 618px
        height: 150px

    .submit
      height= (!baseline * 2)
&lt;/code&gt;&lt;/pre&gt;
</content>
  </entry>
  <entry>
    <title>NHaml idiosyncrasies</title>
    <link rel="alternate" href="/2009/04/30/nhaml-idiosyncrasies.html"/>
    <id>/2009/04/30/nhaml-idiosyncrasies.html</id>
    <published>2009-04-30T00:00:00-08:00</published>
    <updated>2009-04-30T00:00:00-08:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;&lt;a href="http://code.google.com/p/nhaml/"&gt;NHaml&lt;/a&gt; is an implementation of Haml for the .NET runtime. Specifically it runs inside .NET&amp;#39;s new MVC architecture. This implementation is missing quite a few Haml niceties and the language has actually been altered in many places to be more C#-like. Personally, I think this is a poor decision. Imagine if Javascript had different syntax depending on the browser it was running in? Well... I guess Microsoft has JScript and VBScript so maybe this is just how Windows programmers operate. But, I digress. Here are some gotchas should you contemplate using NHaml.&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;&lt;a href="http://code.google.com/p/nhaml/"&gt;NHaml&lt;/a&gt; is an implementation of Haml for the .NET runtime. Specifically it runs inside .NET&amp;#39;s new MVC architecture. This implementation is missing quite a few Haml niceties and the language has actually been altered in many places to be more C#-like. Personally, I think this is a poor decision. Imagine if Javascript had different syntax depending on the browser it was running in? Well... I guess Microsoft has JScript and VBScript so maybe this is just how Windows programmers operate. But, I digress. Here are some gotchas should you contemplate using NHaml.&lt;/p&gt;

&lt;h2&gt;Instead of Ruby hashes, parameters are C# Key-Value pairs&lt;/h2&gt;

&lt;p&gt;This means Ruby&amp;#39;s symbols (prefixed with a colon) are now just plain keys. Similarly, the hashrocket (=&amp;gt;) becomes a normal equals sign&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Before: %link{ :type =&amp;gt; &amp;quot;text/css&amp;quot;, :rel =&amp;gt; &amp;quot;stylesheet&amp;quot;, :src =&amp;gt; &amp;quot;style.css&amp;quot; }
After:  %link{ type=&amp;quot;text/css&amp;quot;, rel=&amp;quot;stylesheet&amp;quot;, src=&amp;quot;style.css&amp;quot; }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;[Edit: As of NHaml 2.0 beta 2, the syntax for attributes has changed and now appears exactly like normal HTML attributes (no commas are used). The above code would now be written is as follows:]&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;%link{ type=&amp;quot;text/css&amp;quot; rel=&amp;quot;stylesheet&amp;quot; src=&amp;quot;style.css&amp;quot; }
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Single-quotes are not allowed&lt;/h2&gt;

&lt;p&gt;C# apparently uses single-quotes to denote a character, not a string.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Before: %input{ :type =&amp;gt; &amp;#39;text&amp;#39; }
After:  %input{ type=&amp;quot;text&amp;quot; }
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Lines cannot be started with an ampersand (&amp;amp;) character&lt;/h2&gt;

&lt;p&gt;NHaml has a special meaning for lines like this. Apparently it is for automatically escaping the contents of that line. You will need to escape the ampersand:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Before: &amp;amp;ldquo;Hi&amp;amp;rdquo;
After:  \&amp;amp;ldquo;Hi&amp;amp;rdquo;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;NHaml HATES white-space-only lines&lt;/h2&gt;

&lt;p&gt;Basically, if you&amp;#39;re using empty lines to space out your code, NHaml requires that they contain as much indentation as the section they are supposed to be a part of or else they will clear out your nesting.&lt;/p&gt;

&lt;p&gt;Given the following Haml&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;%ul
  %li
    Text

  %li
    Text2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;NHaml will render this as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;ul&amp;gt;
  &amp;lt;li&amp;gt;
    Text
  &amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;li&amp;gt;
  Text2
&amp;lt;/li&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So remember to remove white-space-only lines until this issue is resolved.&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;All in all, I&amp;#39;m still really happy to be able to use Haml in the .NET environment. It took me 5 hours yesterday to build a relatively complicated 20-page site in Haml. Today it took me 8 hours to get it working in NHaml, but this is a one-time penalty. Next time I can write my Haml with NHaml in mind.&lt;/p&gt;

&lt;p&gt;I want to say thanks to the NHaml team. I hope the project is a success because it still needs some love and I would really like Sass support. I kind of feel sorry for C# programmers. The culture doesn&amp;#39;t flock to open source like it does in the open source languages (Python, Ruby, etc). There seem to be fewer C# developers who live in HTML and are interested improving the front-end side of the .NET stack. However, it looks like things are improving.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>A Compass &amp;amp; Sass Screencast via Chris Eppstein</title>
    <link rel="alternate" href="/2009/04/26/a-compass-sass-screencast-via-chris-eppstein.html"/>
    <id>/2009/04/26/a-compass-sass-screencast-via-chris-eppstein.html</id>
    <published>2009-04-26T00:00:00-08:00</published>
    <updated>2009-04-26T00:00:00-08:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;Compass author—and Sass contributor—Chris Eppstein has put a screencast together showing how to use Compass. Enjoy.&lt;/p&gt;

&lt;div class='flash'&gt;
  &lt;object data='http://vimeo.com/moogaloop.swf?clip_id=4335944&amp;amp;server=vimeo.com&amp;amp;show_title=1&amp;amp;show_byline=1&amp;amp;show_portrait=0&amp;amp;color=00ADEF&amp;amp;fullscreen=1' height='225' type='application/x-shockwave-flash' width='400'&gt;
</summary>
    <content type="html">&lt;p&gt;Compass author—and Sass contributor—Chris Eppstein has put a screencast together showing how to use Compass. Enjoy.&lt;/p&gt;

&lt;div class='flash'&gt;
  &lt;object data='http://vimeo.com/moogaloop.swf?clip_id=4335944&amp;amp;server=vimeo.com&amp;amp;show_title=1&amp;amp;show_byline=1&amp;amp;show_portrait=0&amp;amp;color=00ADEF&amp;amp;fullscreen=1' height='225' type='application/x-shockwave-flash' width='400'&gt;
    &lt;param name='allowfullscreen' value='true' /&gt;
    &lt;param name='allowscriptaccess' value='always' /&gt;
    &lt;param name='src' value='http://vimeo.com/moogaloop.swf?clip_id=4335944&amp;amp;server=vimeo.com&amp;amp;show_title=1&amp;amp;show_byline=1&amp;amp;show_portrait=0&amp;amp;color=00ADEF&amp;amp;fullscreen=1' /&gt;
  &lt;/object&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href="http://vimeo.com/4335944"&gt;Compass: A Real Stylesheet Framework&lt;/a&gt; from Chris Eppstein.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Creating bullet-proof HTML emails</title>
    <link rel="alternate" href="/2009/04/06/creating-bullet-proof-html-emails.html"/>
    <id>/2009/04/06/creating-bullet-proof-html-emails.html</id>
    <published>2009-04-06T00:00:00-08:00</published>
    <updated>2009-04-06T00:00:00-08:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;This screencast will demonstrate how a bullet-proof, table-based email can be sliced and coded using ImageReady CS2. Other versions of Photoshop will work similarly, but I prefer CS2.&lt;/p&gt;

&lt;p&gt;The resulting HTML email will display perfectly in the majority of modern email clients such as gmail, Apple Mail and Outlook.&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;This screencast will demonstrate how a bullet-proof, table-based email can be sliced and coded using ImageReady CS2. Other versions of Photoshop will work similarly, but I prefer CS2.&lt;/p&gt;

&lt;p&gt;The resulting HTML email will display perfectly in the majority of modern email clients such as gmail, Apple Mail and Outlook.&lt;/p&gt;

&lt;p&gt;This table-based approach is required thanks to the changes made in the Outlook 2007 rendering engine. Please read Campaign Monitor&amp;#39;s article, &lt;a href="http://www.campaignmonitor.com/blog/post/2393/microsoft-takes-email-design-b/"&gt;Microsoft takes email design back 5 years&lt;/a&gt;, for an overview of the situation.&lt;/p&gt;

&lt;div class='flash'&gt;
  &lt;object height='250' width='400'&gt;
    &lt;param name='allowfullscreen' value='true' /&gt;
    &lt;param name='allowscriptaccess' value='always' /&gt;
    &lt;param name='movie' value='http://vimeo.com/moogaloop.swf?clip_id=4018544&amp;amp;server=vimeo.com&amp;amp;show_title=1&amp;amp;show_byline=1&amp;amp;show_portrait=0&amp;amp;color=00ADEF&amp;amp;fullscreen=1' /&gt;
    &lt;embed allowfullscreen='true' allowscriptaccess='always' height='250' src='http://vimeo.com/moogaloop.swf?clip_id=4018544&amp;amp;server=vimeo.com&amp;amp;show_title=1&amp;amp;show_byline=1&amp;amp;show_portrait=0&amp;amp;color=00ADEF&amp;amp;fullscreen=1' type='application/x-shockwave-flash' width='400'&gt;&lt;/embed&gt;
  &lt;/object&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry>
    <title>Sass Introduction slides</title>
    <link rel="alternate" href="/2009/04/02/sass-introduction-slides.html"/>
    <id>/2009/04/02/sass-introduction-slides.html</id>
    <published>2009-04-02T00:00:00-08:00</published>
    <updated>2009-04-02T00:00:00-08:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;Here&amp;#39;s the slides I will be presenting at Jive Software:&lt;/p&gt;

&lt;div class='flash'&gt;
  &lt;object data='http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=sass-090402192738-phpapp01&amp;amp;rel=0&amp;amp;stripped_title=sass-introduction' height='355' type='application/x-shockwave-flash' width='425'&gt;
</summary>
    <content type="html">&lt;p&gt;Here&amp;#39;s the slides I will be presenting at Jive Software:&lt;/p&gt;

&lt;div class='flash'&gt;
  &lt;object data='http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=sass-090402192738-phpapp01&amp;amp;rel=0&amp;amp;stripped_title=sass-introduction' height='355' type='application/x-shockwave-flash' width='425'&gt;
    &lt;param name='allowFullScreen' value='true' /&gt;
    &lt;param name='allowScriptAccess' value='always' /&gt;
    &lt;param name='src' value='http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=sass-090402192738-phpapp01&amp;amp;rel=0&amp;amp;stripped_title=sass-introduction' /&gt;
    &lt;param name='allowfullscreen' value='true' /&gt;
  &lt;/object&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry>
    <title>Don't repeat yourself, use Sass mixins</title>
    <link rel="alternate" href="/2009/04/02/dont-repeat-yourself-use-sass-modules.html"/>
    <id>/2009/04/02/dont-repeat-yourself-use-sass-modules.html</id>
    <published>2009-04-02T00:00:00-08:00</published>
    <updated>2009-04-02T00:00:00-08:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;&lt;strong&gt;Update (2011-08-23): Use to Sass 3 syntax&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There are quite a few situations in CSS where you are simply copy &amp;amp; pasting the same set of styles in multiple places. If at some point, you want to tweak these styles, you&amp;#39;ll need to track down and update each set of styles. Sass introduces the concept of mixins which are blocks of nested Sass code which can be applied to any selector in your Sass document. Think of them as variables which can hold multiple levels of information. The syntax for defining a module is simple:&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;&lt;strong&gt;Update (2011-08-23): Use to Sass 3 syntax&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There are quite a few situations in CSS where you are simply copy &amp;amp; pasting the same set of styles in multiple places. If at some point, you want to tweak these styles, you&amp;#39;ll need to track down and update each set of styles. Sass introduces the concept of mixins which are blocks of nested Sass code which can be applied to any selector in your Sass document. Think of them as variables which can hold multiple levels of information. The syntax for defining a module is simple:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;=module-name
  style1: value1
  style2: value2
  .wrapper
    style3: value3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then you can inject this module into a selector:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#frame #left
  +module-name
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which will generate CSS that looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#frame #left {
  style1: value1;
  style2: value2; }
  #frame #left .wrapper {
    style3: value3; }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In my opinion, this is Sass&amp;#39; killer feature. The repetition so common in large CSS files can be extracted into reusable functions. To illustrate this point, I&amp;#39;m going to take two of the most-frequently repeated blocks of CSS: the clearfix and the replacement of text with an image.&lt;/p&gt;

&lt;h2&gt;Clearfix&lt;/h2&gt;

&lt;p&gt;The Sass definition for clearfix—pulled from the Compass project—is declared as such:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;=clearfix
  overflow: auto
  overflow: -moz-scrollbars-none
  // This makes ie6 get layout
  display: inline-block
  // and this puts it back to block
  &amp;amp;amp;
    display: block
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Many developers create a .clearfix class and apply it on the HTML-side to blocks which need the hack. I&amp;#39;ve never been a huge fan of this as you are making presentational changes to the content-side of the equation. The old-school .clearfix class can be accomplished pretty simply though, so it is worth showing:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.clearfix
  +clearfix
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On the other hand, I prefer to include the clearfix directly on the selectors that need it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#left
  +clearfix
  div
    float: left
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And since this is a new concept, here is the CSS which will be generated:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#left {
  overflow: auto;
  overflow: -moz-scrollbars-none;
  display: inline-block; }
#left {
  display: block; }
  #left div {
    float: left; }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This actually results in a lot of duplication in the &lt;em&gt;rendered&lt;/em&gt; CSS over the .clearfix method. I guess it depends what you want to optimize your development for. If you develop entirely in Sass, then it is a non-issue. However, if you generate CSS and hand it over to a client or another developer, they may not like this kind of repetition.&lt;/p&gt;

&lt;h2&gt;Module parameters&lt;/h2&gt;

&lt;p&gt;Sass mixins can also take parameters that are used when generating the CSS. Here is the Sass definition for the often-used trick of displaying an image behind text (usually a H1-H6 tag) and shifting the text out of view.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;=replace-text( $img, $x: 50%, $y: 50% )
  text-indent: -9999em
  overflow:    hidden
  background:
    image: url($img)
    repeat: no-repeat
    position: $x $y
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, we must pass in the location of the replacement image and optionally the background position. The simplest usage of this module looks something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#header h1
  +replace-text(&amp;quot;/images/welcome.jpg&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And for completeness, here is the generated CSS:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#header h1 {
  text-indent: -9999em;
  overflow: hidden;
  background-image: url(&amp;quot;/images/welcome.jpg&amp;quot;);
  background-repeat: no-repeat;
  background-position: 50% 50%; }
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Mixin libraries&lt;/h2&gt;

&lt;p&gt;In the next article, I&amp;#39;ll go through a number of Sass mixins which are distributed with the Compass project.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Refactoring with Sass</title>
    <link rel="alternate" href="/2009/03/14/refactoring-with-sass.html"/>
    <id>/2009/03/14/refactoring-with-sass.html</id>
    <published>2009-03-14T00:00:00-08:00</published>
    <updated>2009-03-14T00:00:00-08:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;I had intended to jump right into Compass modules and user-defined &amp;quot;functions,&amp;quot; but that&amp;#39;s a rather high-level concept and requires a relatively strong understanding of Sass which I shouldn&amp;#39;t assume readers have because Sass isn&amp;#39;t really that popular. I&amp;#39;ll save the complicated stuff for the next article. Instead, I&amp;#39;ll look at how you can take an existing CSS document and convert to Sass in preparation for the article on more-complicated techniques.&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;I had intended to jump right into Compass modules and user-defined &amp;quot;functions,&amp;quot; but that&amp;#39;s a rather high-level concept and requires a relatively strong understanding of Sass which I shouldn&amp;#39;t assume readers have because Sass isn&amp;#39;t really that popular. I&amp;#39;ll save the complicated stuff for the next article. Instead, I&amp;#39;ll look at how you can take an existing CSS document and convert to Sass in preparation for the article on more-complicated techniques.&lt;/p&gt;

&lt;h2&gt;Converting CSS to Sass&lt;/h2&gt;

&lt;p&gt;There are two ways to convert an existing CSS file to Sass. The Haml gem comes with a command called css2sass which parses your CSS document, converts it to Sass-styled code and nests the selectors hierarchically to reduce repetition. You can run the conversion and save the output to a new file by running:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;css2sass OLDFILE.css &amp;gt; NEWFILE.sass
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, there is one large caveat. Because css2sass rearranges your selectors, you can run into problems with specificity and order. If you have been working quickly and not refactoring as you were developing  (aka doing real work), then you may have begun littering your CSS with more and more one-off commands that altered css defined earlier in the document. They &amp;quot;worked&amp;quot; because css overrides styles as it reads through the document. The sass produced by css2sass may have a different order and can cause your little tweaks to be ignored.&lt;/p&gt;

&lt;p&gt;The safer alternative is to convert from CSS to Sass by hand. Simply remove all curly braces and semicolons and you should have a valid—if not optimized—Sass document. If you&amp;#39;ve been inconsistent with using either tabs or spaces, Sass will warn you. You&amp;#39;ll need to standardize on one or the other before moving forward. If you start out with some CSS like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#left {
  float: left;
  display: inline;
  width: 242px;
}
#left ul {
  list-style-type: none;
  margin: 0 8px 0 0;
}
#left ul li {
  font-size: 13px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first-pass of conversion to Sass will now look like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#left
  float: left
  display: inline
  width: 242px
#left ul
  list-style-type: none
  margin: 0 8px 0 0
#left ul li
  font-size: 13px
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The next step is to start at the top (#left) and try to modify the nesting so that it only appears once in the Sass file. Simply indent anything starting with #left and remove the id selector. We will also do the same with the &amp;quot;ul li&amp;quot; selector. Exchange the explicit selector for hierarchical indentation.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#left
  float: left
  display: inline
  width: 242px
  ul
    list-style-type: none
    margin: 0 8px 0 0
    li
      font-size: 13px
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So far, all we&amp;#39;ve done is removed some punctuation and a little duplication. If we ever need to change the id selector, we can do it in one place and all the nested styles beneath it will automatically be updated thanks to Sass. Personally, this simple improvement was enough to get me to convert to Sass full-time.&lt;/p&gt;

&lt;p&gt;In the next article, I&amp;#39;ll look at the included modules in Compass that we can use to reduce code duplication and save time. Once we see why such modules are useful, we&amp;#39;ll take a look at how to define our own.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Compass, the future of Sass development</title>
    <link rel="alternate" href="/2009/03/11/compass-the-future-of-sass-development.html"/>
    <id>/2009/03/11/compass-the-future-of-sass-development.html</id>
    <published>2009-03-11T00:00:00-08:00</published>
    <updated>2009-03-11T00:00:00-08:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;I&amp;#39;ve been a fan of Haml and Sass for a long time. Ever since I ran my mouth in #merb and Hampton Caitlin rightfully put me in my place. If you have no clue what Haml &amp;amp; Sass are—or if you&amp;#39;ve heard the buzz, but never actually checked them out—you can view &lt;a href="http://peepcode.com/products/haml-and-sass"&gt;this excellent PeepCode screencast on the subject&lt;/a&gt;. I currently use both for the initial coding of all the sites I develop. However, I am not lucky enough to work with a Haml-enabled framework on the backend like Rails or Merb so I have to compile to HTML and CSS when I begin integrating the front-end with the back-end¹.&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;I&amp;#39;ve been a fan of Haml and Sass for a long time. Ever since I ran my mouth in #merb and Hampton Caitlin rightfully put me in my place. If you have no clue what Haml &amp;amp; Sass are—or if you&amp;#39;ve heard the buzz, but never actually checked them out—you can view &lt;a href="http://peepcode.com/products/haml-and-sass"&gt;this excellent PeepCode screencast on the subject&lt;/a&gt;. I currently use both for the initial coding of all the sites I develop. However, I am not lucky enough to work with a Haml-enabled framework on the backend like Rails or Merb so I have to compile to HTML and CSS when I begin integrating the front-end with the back-end¹.&lt;/p&gt;

&lt;p&gt;This situation sucks. Sass makes me a faster in my initial development, but it also speeds up tweaking small site-wide issues and overall maintenance. I develop my Sass modularly and try to use variables for site-wide colors, border and fonts. Wouldn&amp;#39;t it be great if I could use Sass throughout the entire development cycle?&lt;/p&gt;

&lt;h2&gt;Enter Compass&lt;/h2&gt;

&lt;p&gt;Compass is a new Sass-centric library from &lt;a href="http://github.com/chriseppstein"&gt;Chris Eppstein&lt;/a&gt;. 
There are two components of Compass. The first is a handful of libraries and code snippets implemented in Sass so you can easily apply the rules of &lt;a href="http://www.blueprintcss.org/"&gt;Blueprint&lt;/a&gt;, &lt;a href="http://960.gs/"&gt;960.gs&lt;/a&gt; or &lt;a href="http://developer.yahoo.com/yui/grids/"&gt;YUI grids&lt;/a&gt; to you website entirely in Sass without dirtying up your HTML with presentational classes. The second component is the compass command-line tool which continuously watches you Sass files and compiles them to CSS on-the-fly. While I do am a huge fan of grid-based design and I do appreciate the implemented CSS grid systems, I usually code each site from scratch rather than rely on someone else&amp;#39;s large CSS library. Therefore this article will focus on getting Compass installed and using it to generate CSS on-the-fly.&lt;/p&gt;

&lt;h2&gt;Getting Started&lt;/h2&gt;

&lt;p&gt;This will download, compile and install the Haml gem. The next step is making sure RubyGems is new enough to play nicely with GitHub-hosted gems. Then we&amp;#39;ll be able to install compass from GitHub. From the terminal run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo gem update --system
sudo gem install compass
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Continuous Compilation&lt;/h2&gt;

&lt;p&gt;Alright, let&amp;#39;s move to our web directory—wherever that may be. I like to keep all my CSS and Sass together so I have a base css/ directory and css/sass/ directory under that. Given that structure, I can have compass watch my Sass like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd PROJECT_DIR
compass --watch --css-dir css --sass-dir css/sass
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Compass will sit patiently in the terminal, monitoring the folder I specified and compiling the Sass files to CSS whenever I save an existing file or add a new one. In my next article, I will discuss converting existing CSS files to Sass, the refactoring process and the usage of compass&amp;#39; included Sass modules for common CSS such as the &lt;a href="http://www.positioniseverything.net/easyclearing.html"&gt;clearfix hack&lt;/a&gt; and &lt;a href="http://phark.typepad.com/phark/2003/08/accessible_imag.html"&gt;Mike Rundle&amp;#39;s image replacement&lt;/a&gt;.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;¹ Luckily for me, Microsoft&amp;#39;s &lt;a href="http://andrewpeters.net/2007/12/19/introducing-nhaml-an-aspnet-mvc-view-engine/"&gt;ASP.NET will soon have access to HAML&lt;/a&gt; via the MVC Contribs project. Alas, no native Sass support is on the horizon.&lt;/p&gt;
</content>
  </entry>
</feed>
