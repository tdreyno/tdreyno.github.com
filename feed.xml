<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Award Winning Fjords</title>
  <subtitle>Words &amp;amp; Wisdom by Thomas Reynolds</subtitle>
  <id>http://awardwinningfjords.com/</id>
  <link href="http://awardwinningfjords.com/"/>
  <link href="http://awardwinningfjords.com/feed.xml" rel="self"/>
  <updated>2011-09-11T00:00:00-07:00</updated>
  <author>
    <name>Thomas Reynolds</name>
  </author>
  <entry>
    <title>Just Launched: Metalab Design v4</title>
    <link rel="alternate" href="/2011/09/11/just-launched-metalab-v4.html"/>
    <id>/2011/09/11/just-launched-metalab-v4.html</id>
    <published>2011-09-11T00:00:00-07:00</published>
    <updated>2011-09-11T00:00:00-07:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;I'm happy to announce the latest version of the Metalab Design website is live! I worked on the initial development, interaction and code. Then &lt;a href="http://twitter.com/#!/alibosworth"&gt;Ali Bosworth&lt;/a&gt; and &lt;a href="http://twitter.com/#!/jasonswebster"&gt;Jason Webster&lt;/a&gt;, of &lt;a href="http://www.getflow.com/"&gt;Flow&lt;/a&gt; fame, did the hard work of polishing the animations and getting things looking great cross-browser.&lt;/p&gt;

&lt;p&gt;Check it out!&lt;/p&gt;

&lt;p&gt;&lt;a href="http://metalabdesign.com"&gt;&lt;img src="http://src.sencha.io/http://awardwinningfjords.com/images/metalab.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;I'm happy to announce the latest version of the Metalab Design website is live! I worked on the initial development, interaction and code. Then &lt;a href="http://twitter.com/#!/alibosworth"&gt;Ali Bosworth&lt;/a&gt; and &lt;a href="http://twitter.com/#!/jasonswebster"&gt;Jason Webster&lt;/a&gt;, of &lt;a href="http://www.getflow.com/"&gt;Flow&lt;/a&gt; fame, did the hard work of polishing the animations and getting things looking great cross-browser.&lt;/p&gt;

&lt;p&gt;Check it out!&lt;/p&gt;

&lt;p&gt;&lt;a href="http://metalabdesign.com"&gt;&lt;img src="http://src.sencha.io/http://awardwinningfjords.com/images/metalab.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2&gt;Colophon&lt;/h2&gt;

&lt;p&gt;A lot of technology went into building this site. Here's a quick rundown:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://middlemanapp.com"&gt;Middleman&lt;/a&gt; - Static development framework&lt;/li&gt;
&lt;li&gt;&lt;a href="http://slim-lang.com/"&gt;Slim&lt;/a&gt; - Whitespace-aware templating language&lt;/li&gt;
&lt;li&gt;&lt;a href="http://jashkenas.github.com/coffee-script/"&gt;CoffeeScript&lt;/a&gt; - Whitespace-aware Javascript&lt;/li&gt;
&lt;li&gt;&lt;a href="http://compass-style.org/"&gt;Sass and Compass&lt;/a&gt; - Whitespace-aware CSS preprocessor&lt;/li&gt;
&lt;li&gt;&lt;a href="http://transformjs.strobeapp.com/"&gt;TransformJS&lt;/a&gt; - jQuery CSS3 Transforms&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Middleman 2.0</title>
    <link rel="alternate" href="/2011/08/08/middleman-2-0.html"/>
    <id>/2011/08/08/middleman-2-0.html</id>
    <published>2011-08-08T00:00:00-07:00</published>
    <updated>2011-08-08T00:00:00-07:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;Middleman 2.0 is a huge release featuring a refactored core, a unified source folder, a unified command line, tons of new features and a &lt;a href="http://middlemanapp.com"&gt;full documentation website&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As always, install via RubyGems:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;:::bash
gem install middleman
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For more information, read the &lt;a href="http://middlemanapp.com/guides/getting-started"&gt;Getting Started&lt;/a&gt; guide.&lt;/p&gt;

&lt;p&gt;Here's an overview of everything that's changed.&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;Middleman 2.0 is a huge release featuring a refactored core, a unified source folder, a unified command line, tons of new features and a &lt;a href="http://middlemanapp.com"&gt;full documentation website&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As always, install via RubyGems:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;:::bash
gem install middleman
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For more information, read the &lt;a href="http://middlemanapp.com/guides/getting-started"&gt;Getting Started&lt;/a&gt; guide.&lt;/p&gt;

&lt;p&gt;Here's an overview of everything that's changed.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2&gt;Unified Source Folder&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;public&lt;/code&gt; and &lt;code&gt;views&lt;/code&gt; folders have been combined into a single &lt;code&gt;source&lt;/code&gt; folder which contains all of your files. Use the &lt;a href="http://middlemanapp.com/guides/migrating"&gt;migration tool&lt;/a&gt; to quickly update your folder structure, or manually combine the folders.&lt;/p&gt;

&lt;h2&gt;Unified Command&lt;/h2&gt;

&lt;p&gt;The old commands, &lt;code&gt;mm-init&lt;/code&gt;, &lt;code&gt;mm-server&lt;/code&gt; and &lt;code&gt;mm-build&lt;/code&gt;, have been combined into a single &lt;code&gt;middleman&lt;/code&gt; command with the following subcommands:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;middleman init&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;middleman server&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;middleman build&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;New Features&lt;/h2&gt;

&lt;p&gt;Here are the most interesting new features of Middleman 2.0.&lt;/p&gt;

&lt;h3&gt;Sprockets&lt;/h3&gt;

&lt;p&gt;Sprockets is a tool for Javascript dependency management. Using Sprockets you can include other Javascript and CoffeeScript files into your scripts. &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;:::javascript
//= require &amp;quot;another_file&amp;quot;

function my_javascript() {

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Read more in the &lt;a href="http://middlemanapp.com/guides/coffeescript-sprockets"&gt;Javascript, CoffeeScript and Sprockets&lt;/a&gt; guide.&lt;/p&gt;

&lt;h3&gt;Dynamic Pages&lt;/h3&gt;

&lt;p&gt;Dynamic pages allow you to generate HTML for files which share a single template. &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;:::ruby
[&amp;quot;tom&amp;quot;, &amp;quot;dick&amp;quot;, &amp;quot;harry&amp;quot;].each do |name|
  page &amp;quot;/about/#{name}.html&amp;quot;, :proxy =&amp;gt; &amp;quot;/about/template.html&amp;quot; do
    @person_name = name
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Read more in the &lt;a href="http://middlemanapp.com/guides/dynamic-pages"&gt;Dynamic Pages&lt;/a&gt; guide.&lt;/p&gt;

&lt;h3&gt;Pretty URLs&lt;/h3&gt;

&lt;p&gt;Pretty URLs (aka Directory Indexes) let you generate folders for each HTML file in your project which results in a pretty, extension-less URL in common web-servers.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;:::ruby
activate :directory_indexes
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now &lt;code&gt;source/my-page.html&lt;/code&gt; will generate &lt;code&gt;build/my-page/index.html&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Read more in the &lt;a href="http://middlemanapp.com/guides/pretty-urls"&gt;Pretty URLs&lt;/a&gt; guide.&lt;/p&gt;

&lt;h3&gt;YAML Frontmatter&lt;/h3&gt;

&lt;p&gt;YAML Frontmatter lets you add in-template variables at the top of a page, which are also available in the layout, and to configure which layout the page uses.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;:::erb
---
layout: &amp;quot;login&amp;quot;
page_name: &amp;quot;Login&amp;quot;
---

&amp;lt;h1&amp;gt;&amp;lt;%= data.page.page_name %&amp;gt;&amp;lt;/h1&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above &lt;code&gt;login.html.erb&lt;/code&gt; file will be rendered using the &lt;code&gt;login.erb&lt;/code&gt; layout file.&lt;/p&gt;

&lt;p&gt;Read more in the &lt;a href="http://middlemanapp.com/guides/individual-page-configuration"&gt;Individual Page Configuration&lt;/a&gt; guide.&lt;/p&gt;

&lt;h3&gt;LiveReload&lt;/h3&gt;

&lt;p&gt;By default, LiveReload will monitor your &lt;code&gt;config.rb&lt;/code&gt; file and automatically restart the Middleman server if it changes. This means, activating new features no longer requires a server restart.&lt;/p&gt;

&lt;p&gt;In addition, you can have LiveReload monitor your project files as well and instruct the web-browser to reload when they change using the &lt;a href="https://github.com/mockko/livereload#readme"&gt;LiveReload Extension&lt;/a&gt; and the &lt;code&gt;--livereload&lt;/code&gt; flag.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;:::bash
middleman server --livereload
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Migrating to 2.0&lt;/h2&gt;

&lt;p&gt;Updating old projects to Middleman 2.0 is very easy. Simply use the new &lt;code&gt;migrate&lt;/code&gt; command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;:::bash
middleman migrate
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Read more about the migration edge cases in the &lt;a href="http://middlemanapp.com/guides/migrating"&gt;Migrating to Middleman 2.0&lt;/a&gt; guide.&lt;/p&gt;

&lt;h2&gt;Support&lt;/h2&gt;

&lt;p&gt;If there are any issues or regressions, please log bugs on the &lt;a href="https://github.com/tdreyno/middleman/issues"&gt;Github Issue Tracker&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>CoffeeScript-specific Style Guide</title>
    <link rel="alternate" href="/2011/05/13/coffeescript-specific-style-guide.html"/>
    <id>/2011/05/13/coffeescript-specific-style-guide.html</id>
    <published>2011-05-13T00:00:00-07:00</published>
    <updated>2011-05-13T00:00:00-07:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;First, go buy &lt;a href="http://twitter.com/topfunky"&gt;@topfunky&lt;/a&gt;'s new &lt;a href="https://peepcode.com/products/coffeescript"&gt;CoffeeScript PeepCode screencast&lt;/a&gt;. It's wonderful. All done? Okay.&lt;/p&gt;

&lt;p&gt;One of the most interesting pieces of information to me, as someone who's been writing a lot of CoffeeScript and has written a ton of Javascript in the past, is the subtle tweaks to style in CoffeeScript. Here are some quick preferred styles.&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;First, go buy &lt;a href="http://twitter.com/topfunky"&gt;@topfunky&lt;/a&gt;'s new &lt;a href="https://peepcode.com/products/coffeescript"&gt;CoffeeScript PeepCode screencast&lt;/a&gt;. It's wonderful. All done? Okay.&lt;/p&gt;

&lt;p&gt;One of the most interesting pieces of information to me, as someone who's been writing a lot of CoffeeScript and has written a ton of Javascript in the past, is the subtle tweaks to style in CoffeeScript. Here are some quick preferred styles.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Here's a simple piece of jQuery and a test case in plain Javascript.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var elem = $(&amp;quot;#myselector&amp;quot;).addClass(&amp;quot;testing&amp;quot;);
expect(elem.id).toEqual(&amp;quot;myselector&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Naive Conversion to CoffeeScript:&lt;/h2&gt;

&lt;p&gt;Simply removing semi-colons and the &lt;tt&gt;var&lt;/tt&gt; keyword isn't really enough.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;elem = $(&amp;quot;#myselector&amp;quot;).addClass(&amp;quot;testing&amp;quot;)
expect(elem.id).toEqual(&amp;quot;myselector&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Lisp-y Function Grouping/Calling &amp;amp; Omitting Final parentheses&lt;/h2&gt;

&lt;p&gt;First, remember that CoffeeScript doesn't require parentheses when calling functions. These two lines are rendered identically:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;myfunc(&amp;quot;string&amp;quot;)
myfunc &amp;quot;string&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The second version, without parentheses, is the preferred style. The general rule is: &lt;strong&gt;the final method call in a chain should omit the parentheses&lt;/strong&gt;. The original, naive conversion can become:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;elem = $(&amp;quot;#myselector&amp;quot;).addClass &amp;quot;testing&amp;quot;
expect(elem.id).toEqual &amp;quot;myselector&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, CoffeeScript prefers to use parentheses to group methods, rather than group method parameters. This subtle difference is best illustrated by the final code. I think seeing the jQuery &lt;tt&gt;$&lt;/tt&gt; without a parenthesis was off-putting at first, but I'm slowly learning to like it. The resulting code feels more math-y (or Lisp-y).&lt;/p&gt;

&lt;h2&gt;Preferred Style&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;elem = ($ &amp;quot;#myselector&amp;quot;).addClass &amp;quot;testing&amp;quot;
(expect elem.id).toEqual &amp;quot;myselector&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
</content>
  </entry>
  <entry>
    <title>Javascript Microframeworks and The Future</title>
    <link rel="alternate" href="/2011/05/09/javascript-microframeworks-and-the-future.html"/>
    <id>/2011/05/09/javascript-microframeworks-and-the-future.html</id>
    <published>2011-05-09T00:00:00-07:00</published>
    <updated>2011-05-09T00:00:00-07:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;Last week at &lt;a href="http://2011.jsconf.us/"&gt;jsconf&lt;/a&gt;, &lt;a href="http://mir.aculo.us/"&gt;Thomas Fuchs&lt;/a&gt; continued his argument for small frameworks with the release of &lt;a href="http://microjs.com/"&gt;MicroJS&lt;/a&gt; which acts as a listing of tiny, single-purpose libraries. The idea being that freedom and choice, combined with optimizing for size will result in a better product than using a larger, monolithic &amp;quot;framework.&amp;quot;&lt;/p&gt;

&lt;p&gt;But what are we talking about when we say &amp;quot;framework&amp;quot; and what kind of applications can be built with microframeworks?  &lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;Last week at &lt;a href="http://2011.jsconf.us/"&gt;jsconf&lt;/a&gt;, &lt;a href="http://mir.aculo.us/"&gt;Thomas Fuchs&lt;/a&gt; continued his argument for small frameworks with the release of &lt;a href="http://microjs.com/"&gt;MicroJS&lt;/a&gt; which acts as a listing of tiny, single-purpose libraries. The idea being that freedom and choice, combined with optimizing for size will result in a better product than using a larger, monolithic &amp;quot;framework.&amp;quot;&lt;/p&gt;

&lt;p&gt;But what are we talking about when we say &amp;quot;framework&amp;quot; and what kind of applications can be built with microframeworks?  &lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2&gt;The Two Types of HTML Applications&lt;/h2&gt;

&lt;p&gt;It is useful to denominate the two kinds of web applications that exist on the web. First, there is the traditional &amp;quot;Progressive Enhancement&amp;quot; apps. These use Javascript to bring additional interaction, animation and life to static HTML/CSS. The benefit is that even if the client has problems with Javascript due to some esoteric IE bug, or their phone doesn't support Javascript, that they can still interact with the site normally. The majority of large sites using jQuery act in this way. They output HTML from the backend and then jQuery adds interaction.&lt;/p&gt;

&lt;p&gt;The second type is the MVC application. These frameworks start from a blank slate and use their own Views (templates) to build up the components of an app. This view layer certainly adds complexity (and lines of code) to the framework, but the result is usually a more Desktop-like user experience. The big frameworks of this type are &lt;a href="http://blog.sproutcore.com/"&gt;Sproutcore&lt;/a&gt;, &lt;a href="http://cappuccino.org/"&gt;Cappuccino&lt;/a&gt; and to a lesser degree, &lt;a href="http://documentcloud.github.com/backbone/"&gt;Backbone.js&lt;/a&gt;. &lt;a href="http://skilldrick.co.uk/2011/05/javascript-and-the-end-of-progressive-enhancement/comment-page-1/"&gt;Nick Morgan argues that these types of app are the future&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We'll need to keep in mind both types of applications as we think about optimization. What benefits one might not benefit the other and it's important to figure out the kind of app a person is talking about when they are discussing &amp;quot;microframeworks.&amp;quot;&lt;/p&gt;

&lt;h2&gt;The Problem&lt;/h2&gt;

&lt;p&gt;On the web, speed is king. Yahoo and Amazon have shown that every additional millisecond it takes to load your page has a direct result in decreasing sales. Right now, the biggest bottleneck is the way javascript loading blocks rendering in the browser. The modern web craves javascript. The browser is just an empty shell until it is scripted to life. This means the entire stack of web interactivity has to be written in Javascript and it has to be transferred to every single client who views the site. There are 3 solutions to this problem:&lt;/p&gt;

&lt;h3&gt;The Great Cache in the Sky&lt;/h3&gt;

&lt;p&gt;jQuery is now present on about 44% of websites. jQuery also weighs about 130k (before minification and gzipping). Which means after just a little casual browsing, you've probably downloaded jQuery several times. Browsers cache Javascript based on which domain it was downloaded from, which means your browser is actually storing 1 copy of jQuery for every site you visited that used it. And, even though you have a dozen copies already, it's going to download it again when you change to a new site.&lt;/p&gt;

&lt;p&gt;The jQuery project and Google both offer to serve jQuery from their respective CDNs. These CDNs are heavily optimized to get clients a copy of jQuery as quickly as possible and they have the added bonus of using a consistent URL. That means if domaina.com and domainb.com both point to Google's copy of jQuery, then they will share the same file in the cache. This means domainb.com and all subsequent domains you visit using the Google CDN copy of jQuery won't have to be delayed waiting for jQuery to download, it will already be in the cache.&lt;/p&gt;

&lt;p&gt;This is a great idea. With jQuery on 44% of the web, it's time to admit that it is the &amp;quot;standard library&amp;quot; of the web. Personally, I think Google Chrome should ship with the last dozen versions of jQuery embedded and have an option to prefer the local copies over downloading a new one. The standard library should ship with the language (in the browser). I think this will happen some day, but until then...&lt;/p&gt;

&lt;h3&gt;Load Asynchronously&lt;/h3&gt;

&lt;p&gt;There are a handful of popular new tools for loading your Javascript without blocking such as LABjs, RequireJS, StealJS, yepnope and script.js. Of course, these tools are themselves written in Javascript and must be first loaded in a blocking fashion. However, they are usually small enough that this isn't a real issue. Once the script loader is ready, it will begin pulling in your other Javascript files.&lt;/p&gt;

&lt;p&gt;Asynchronous script loading works great for apps using &amp;quot;progressive enhancement&amp;quot;, you can off-load almost all the Javascript, including jQuery, until later and when it finally loads the page simply gets a little nicer and interactive. However, to the user it looks like the page is loaded and they can begin interacting immediately.&lt;/p&gt;

&lt;p&gt;&amp;quot;MVC Applications&amp;quot; require more complicated organization and packaging to work asynchronously. They need to know which parts of the app can be loaded later and which are needed immediately. The larger frameworks, like &lt;a href="http://blog.sproutcore.com/"&gt;Sproutcore&lt;/a&gt; and &lt;a href="http://javascriptmvc.com/"&gt;JavascriptMVC&lt;/a&gt;, have already solved this problem, but it does add some conceptual overhead.&lt;/p&gt;

&lt;h3&gt;Use Less Code&lt;/h3&gt;

&lt;p&gt;Simply put: send less data to the client. Sounds easy? Remember that jQuery is 130k before you even start writing your own code. This is where Thomas Fuchs (and &lt;a href="http://microjs.com/"&gt;MicroJS&lt;/a&gt;) come in. He argues that &amp;quot;frameworks&amp;quot; are too big and include stuff that you probably don't need. He, and others, seem purposefully vague about which framework they are rebelling against, but let's be honest: it's jQuery.&lt;/p&gt;

&lt;p&gt;I've built some large applications of both the Progressive Enhancement and MVC varieties and initially I couldn't understand how a seasoned developer could possibly argue that glueing a dozen plugins together is better than a consistent application framework. Tom Dale, of the Sproutcore team, &lt;a href="http://tomdale.net/2011/04/imagine-a-beowulf-cluster-of-javascript-frameworks/"&gt;was similarly flabbergasted&lt;/a&gt;. While I agree with everything Tom writes in that article, I think he got hung up on terminology. Thomas Fuchs isn't arguing against Sproutcore, he is covertly arguing against jQuery. I, Thomas Reynolds (let's call this the Mexican Standoff of Javacript Toms), personally love Sproutcore and so I'll spend the rest of this article talking about replacing jQuery for Progressively Enhanced apps.&lt;/p&gt;

&lt;h2&gt;Replacing jQuery Piece by Piece&lt;/h2&gt;

&lt;p&gt;What is jQuery? Do most developers use everything available? Here are the core functions and their current file sizes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Selector Engine (33k)&lt;/li&gt;
&lt;li&gt;DOM Manipulation (21k)&lt;/li&gt;
&lt;li&gt;DOM Attributes (16k)&lt;/li&gt;
&lt;li&gt;DOM Data Storage (9k)&lt;/li&gt;
&lt;li&gt;Core Helpers and Plugin Framework: $.each, $.extend, etc (23k)&lt;/li&gt;
&lt;li&gt;CSS reading/writing/animating (26k)&lt;/li&gt;
&lt;li&gt;AJAX (26k)&lt;/li&gt;
&lt;li&gt;Events (32k)&lt;/li&gt;
&lt;li&gt;Deferreds (5k)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Take a look at that list and then take a look at &lt;a href="http://microjs.com/"&gt;MicroJS&lt;/a&gt;. Look familiar? The majority of these micro libraries take aim at a specific portion of jQuery and attempt to do it in a smaller file size. Sound great? If you're optimizing for size it does, but let me issue a word of warning.&lt;/p&gt;

&lt;p&gt;jQuery is used on 44% of the web. It is better tested, has more users and has better browser support than any other framework. It is a very well organized project which is continuing to improve and increase performance on every release. I agree with Yehuda Katz, the most important piece of any framework is the size, age and knowledge of its community. Therefore, I believe these new micro libraries will be forced to re-learn the same lessons (whether it be browser support or speed optimization) that jQuery has already solved.&lt;/p&gt;

&lt;h2&gt;Enter Ender.js&lt;/h2&gt;

&lt;p&gt;&lt;a href="http://ender.no.de/"&gt;Ender.js&lt;/a&gt; is a framework framework. It attempts to provide a scaffold roughly shaped like jQuery with places to plugin micro libraries of your choice to fill in the features. Then Ender.js will glue those parts together and produce either a single output file or a file which loads each component asynchronously.&lt;/p&gt;

&lt;p&gt;The default jQuery-like bundle is called &amp;quot;jeesh&amp;quot; and includes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Selector Engine (Qwery)&lt;/li&gt;
&lt;li&gt;DOM Manipulation (Bonzo)&lt;/li&gt;
&lt;li&gt;DOM Attributes (Bonzo)&lt;/li&gt;
&lt;li&gt;DOM Data Storage (Bonzo)&lt;/li&gt;
&lt;li&gt;Core Helpers and Plugin Framework: $.each, $.extend, etc (Underscore &amp;amp; Klass)&lt;/li&gt;
&lt;li&gt;CSS reading/writing/animating (Émile)&lt;/li&gt;
&lt;li&gt;AJAX (Reqwest)&lt;/li&gt;
&lt;li&gt;Events (Bean)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These pieces fit together nicely and create an almost drop-in replacement for jQuery. The edges are a little rough and you will have to rewrite some code to use it. &lt;a href="http://www.dustindiaz.com/"&gt;Dustin Diaz&lt;/a&gt; wrote almost all of theses default libraries, so atleast there is some consistency. As Ender.js gets more popular and more libraries are integrated which weren't written by Dustin, I expect the API will get more and more awkward. As I said above, while Dustin is a very smart person (and he's had help from Thomas Fuchs as well), neither can match jQuery's maturity, test suite and institutional knowledge.&lt;/p&gt;

&lt;p&gt;Still, if you're optimizing for size on a Progressively Enhanced app, Ender.js is a nice fit. If you're optimizing for consistency and the ability to hire and bring new developers up-to-speed quickly, then you should probably stick with jQuery.  &lt;/p&gt;

&lt;h3&gt;Anecdotal &amp;quot;Evidence&amp;quot;&lt;/h3&gt;

&lt;p&gt;I'm working on a small Progressively Enhanced portfolio site. I've completed the homepage, which uses 2 &amp;quot;plugins&amp;quot; for some slideshows and some helper functions. The initial build was with jQuery and the jQueryUI widget factory. Minified: &lt;u&gt;109k&lt;/u&gt;, the majority of that being jQuery which I wasn't really using that many features of.&lt;/p&gt;

&lt;p&gt;Next, I ported the site to JavascriptMVC which has a very nice dependency management system and only pulls in the pieces you need (and jQuery). The coding-style was nicer, the code modularized and the minified output was: &lt;u&gt;110k&lt;/u&gt;. Makes sense, it has all of jQuery plus a 1k of glue code (Class system + Controllers). I'd really like to see JavascriptMVC (and Sproutcore too), break up jQuery into it's components and rely on those directly. Their dependency management systems can handle this and it should reduce the file system for relatively simple apps.&lt;/p&gt;

&lt;p&gt;Finally, I used Ender with Bonzo, Émile, Bean, Qwery and &lt;a href="http://extralogical.net/projects/firmin/"&gt;Firmin&lt;/a&gt;. I had to change some stuff around and basically invent a micro controller system, but the minified output was only: &lt;u&gt;38k&lt;/u&gt;.&lt;/p&gt;

&lt;p&gt;So, not a surprise, when competing purely on size, microframeworks and Ender.js win. I didn't really love the code I had to write for the Ender.js version and I don't appreciate opening 4 different documentation pages to figure out the methods. Still, I'll probably stick with it because the project has only a single developer, doesn't require great IE compatibility and my primary goal is speed.&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;People are going to keep talking about microframeworks, but I don't see jQuery's usage decreasing at all. Developer Happiness should be the primary goal, but we can't work on that until these technical issues of memory, cpu usage, gpu usage and blocking scripts are solved. They will be solved and looking back, these will feel like the dark ages.&lt;/p&gt;

&lt;p&gt;Here's what I'm looking forward to in the &amp;quot;future.&amp;quot; I'd like to see an end-to-end framework written in CoffeeScript. Models, Views and Controllers are the same code and the decision whether to execute code on the client or the server can be optimized. Doing the same database requests? Optimize and cache it on the backend. Rendering the same views? Do it on the backend. I'd like to see the client open a connection to the node.js backend and pipeline scripts and data as needed. If something would be faster on the client side, build it into a module and pipe it to the client on demand.&lt;/p&gt;

&lt;p&gt;Honestly, I don't think we'll be waiting too much longer for such a system. A first step can be seen in Shopify's &lt;a href="http://batmanjs.org/"&gt;batman.js&lt;/a&gt; which made a huge splash at jsconf. Property binding is huge (also at the heart of Sproutcore) and reduces the need for jQuery's DOM manipulation hammer. Can't wait to play with it!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Trigger CSS3 Animations with jQuery</title>
    <link rel="alternate" href="/2011/05/06/trigger-css3-animations-with-jquery.html"/>
    <id>/2011/05/06/trigger-css3-animations-with-jquery.html</id>
    <published>2011-05-06T00:00:00-07:00</published>
    <updated>2011-05-06T00:00:00-07:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;Did you know that jQuery 1.4.3 added a system for adding custom css attributes? For example, any normal style can be applied like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(elem).css({ background: 'red' })
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But what about more complicated styles? Complicated polyfills and vendor-prefixed styles? What if you could add a custom handler for &lt;tt&gt;border-radius&lt;/tt&gt;? It's pretty simple and I'll show you a strawman example.&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;Did you know that jQuery 1.4.3 added a system for adding custom css attributes? For example, any normal style can be applied like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(elem).css({ background: 'red' })
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But what about more complicated styles? Complicated polyfills and vendor-prefixed styles? What if you could add a custom handler for &lt;tt&gt;border-radius&lt;/tt&gt;? It's pretty simple and I'll show you a strawman example.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$.cssHooks['pirateBackground'] = {
  get: function(elem, computed, extra) {
    return &amp;quot;yaarrr&amp;quot;;
  },
  set: function(elem, value) {
    elem.style.background = value + &amp;quot; url(pirates.png)&amp;quot;;
  }
};

$(elem).css({ pirateBackground: 'red' });
// elem now has a red background and the pirates.png pattern

$(elem).css('pirateBackground') == &amp;quot;yaarrr&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Included in David DeSandro's excellent &lt;a href="http://isotope.metafizzy.co/"&gt;Isotope&lt;/a&gt; library are &lt;a href="https://github.com/desandro/isotope/blob/a2a238968347199842dd7e2d552741d5a63c90b9/jquery.isotope.js"&gt;csshooks for CSS3 scale and translate&lt;/a&gt;. These hooks correctly use the fast 3d-transforms if available. I've included the full implementation below, but the important part is that you can include the following gist and use it like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Double the size using CSS3 transform scale 
$(elem).css({ scale: [2] })

// Move the element 100px right and 200px down
$(elem).css({ translate: [ 100, 200 ] })
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Demo&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$('.2x').click(function() {
  $('.square').css({ scale: [2] })
});

$('.1x').click(function() {
  $('.square').css({ scale: [1] })
});

$('.right').click(function() {
  $('.square').css({ translate: [150, 0] })
});

$('.left').click(function() {
  $('.square').css({ translate: [25, 0] })
});
&lt;/code&gt;&lt;/pre&gt;

&lt;iframe width="300" height="450" src="/images/iso/demo.html"&gt;&lt;/iframe&gt;

&lt;h2&gt;Full Implementation&lt;/h2&gt;

&lt;p&gt;Download: https://gist.github.com/959860&lt;/p&gt;

&lt;script src="https://gist.github.com/959860.js?file=isoTransform.js"&gt;&lt;/script&gt;
</content>
  </entry>
  <entry>
    <title>jQuery.Deferred Image Preloader</title>
    <link rel="alternate" href="/2011/05/03/jquerydeferred-image-preloader.html"/>
    <id>/2011/05/03/jquerydeferred-image-preloader.html</id>
    <published>2011-05-03T00:00:00-07:00</published>
    <updated>2011-05-03T00:00:00-07:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;A little wrapper around &lt;tt&gt;&lt;a href="http://api.jquery.com/category/deferred-object/"&gt;jQuery.Deferred&lt;/a&gt;&lt;/tt&gt; for an image preloader.&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;A little wrapper around &lt;tt&gt;&lt;a href="http://api.jquery.com/category/deferred-object/"&gt;jQuery.Deferred&lt;/a&gt;&lt;/tt&gt; for an image preloader.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var loadImageCache = {}
var loadImage = function(imageSrc) {
  if (typeof loadImageCache[imageSrc] === &amp;quot;undefined&amp;quot;) {
    deferred = $.Deferred();

    preloader         = new Image();
    preloader.onload  = function() { deferred.resolve(this.src) };
    preloader.onerror = function() { deferred.reject(this.src)  };
    preloader.src     = imageSrc;

    loadImageCache[imageSrc] = deferred;
  }

  return loadImageCache[imageSrc];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Requires jQuery 1.5 or newer:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;loadImage(&amp;quot;http://my/image.jpg&amp;quot;).then(function(url) {
  alert(url + ' is preloaded');
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The code will only preload each url once, you can reuse the deferred object and add additional &lt;tt&gt;then&lt;/tt&gt; callbacks to that object anywhere in your code.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Just Launched: PixelUnion v2</title>
    <link rel="alternate" href="/2011/04/26/just-launched-pixelunion-v2.html"/>
    <id>/2011/04/26/just-launched-pixelunion-v2.html</id>
    <published>2011-04-26T00:00:00-07:00</published>
    <updated>2011-04-26T00:00:00-07:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;A project I've been working on has just launched. Check out the release post from the Metalab blog below:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;iframe src="http://player.vimeo.com/video/22873653" width="500" height="281" frameborder="0"&gt;&lt;/iframe&gt;&lt;br /&gt;&lt;br /&gt;
About a year ago, we teamed up with &lt;a href="http://www.45royale.com/"&gt;45royale&lt;/a&gt; to create &lt;a href="http://pixelunion.net"&gt;Pixel Union&lt;/a&gt;, a premium Tumblr theme marketplace showcasing designs by some of the world’s best designers. It’s been immensely successful. What began as four themes dedicated to better showcasing photographs and videos has rapidly turned into a library of nearly twenty, multipurpose themes. &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    <content type="html"></content>
  </entry>
  <entry>
    <title>Just Give a Damn About Something</title>
    <link rel="alternate" href="/2011/04/26/just-give-a-damn-about-something.html"/>
    <id>/2011/04/26/just-give-a-damn-about-something.html</id>
    <published>2011-04-26T00:00:00-07:00</published>
    <updated>2011-04-26T00:00:00-07:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;I just want everyone to care about something. [...] I just think it's sad when people seem to have no passion in life.
&lt;strong&gt;- Marco Arment&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    <content type="html"></content>
  </entry>
  <entry>
    <title>CrossFit is for Nerds</title>
    <link rel="alternate" href="/2011/04/24/crossfit-is-for-nerds.html"/>
    <id>/2011/04/24/crossfit-is-for-nerds.html</id>
    <published>2011-04-24T00:00:00-07:00</published>
    <updated>2011-04-24T00:00:00-07:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;Yesterday I competed in the CrossFit Games Open WOD 11.5 at CrossFit HEL (in Portland, Oregon). To the majority of my readers, those words mean absolutely nothing. So, let's start at the beginning.&lt;/p&gt;

&lt;h2&gt;What is CrossFit?&lt;/h2&gt;

&lt;p&gt;CrossFit is an fitness program that attempts to improve your skill in the broadest range of physical abilities possible. Here is a short list of activities a random CrossFit workout might contain:&lt;/p&gt;
</summary>
    <content type="html"></content>
  </entry>
  <entry>
    <title>Branching Out, Opening Up and Publishing More</title>
    <link rel="alternate" href="/2011/04/23/branching-out-opening-up-and-publishing-more.html"/>
    <id>/2011/04/23/branching-out-opening-up-and-publishing-more.html</id>
    <published>2011-04-23T00:00:00-07:00</published>
    <updated>2011-04-23T00:00:00-07:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;It's been 2 years and 1 month since I started writing seriously here. I've enjoyed it very much, but I've also focused almost exclusively on technical articles and the promotion of my own open source software. While I am proud of these articles, it can get a bit dry, can't it?&lt;/p&gt;
</summary>
    <content type="html"></content>
  </entry>
  <entry>
    <title>Middleman v1.1</title>
    <link rel="alternate" href="/2011/04/15/middleman-v11.html"/>
    <id>/2011/04/15/middleman-v11.html</id>
    <published>2011-04-15T00:00:00-07:00</published>
    <updated>2011-04-15T00:00:00-07:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;&lt;strong&gt;Update: &lt;a href="/2011/08/08/middleman-2-0.html"&gt;Middleman version 2.0 has been released&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It's been a long time since &lt;a href="/2009/10/22/middleman"&gt;I introduced Middleman on this blog&lt;/a&gt; in 2009. Since then, RubyGems reports that there have been 27,518 downloads, &lt;a href="https://github.com/tdreyno/middleman/contributors"&gt;several great contributors&lt;/a&gt; to the source code and even a mention in a printed book.&lt;/p&gt;

&lt;p&gt;I've been working hard on documentation as it was the most requested feature from the &lt;a href="/2011/02/06/future-of-middleman-survey"&gt;&amp;quot;Future of Middleman Survey&amp;quot;&lt;/a&gt;. I'm a developer and I'm sorry to admit that my first documentation target is the code and generated documentation. Available at: &lt;a href="http://middlemanapp.com/"&gt;http://middlemanapp.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I know, I need better, more tutorial-style written documentation for actual people. I'll be working on it as time permits, but I'd also love any assistance.&lt;/p&gt;

&lt;p&gt;So, let's talk about the version 1.1. Originally, I planned to make 1.1 a simple update to use the latest features from Sass 3.1. However, as Sass took forever to actually ship, I tweaked, massaged and added a lot more stuff to the platform. Now, I'm releasing even though Sass 3.1 isn't out. &lt;i&gt;C'est la vie&lt;/i&gt;. So, here's what's new:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Now running on Sinatra 1.2&lt;/li&gt;
&lt;li&gt;Sass 3.1 beta &amp;amp; Compass 0.11 beta&lt;/li&gt;
&lt;li&gt;Feature/Extension API (&lt;a href="#features"&gt;see below&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Simple YAML-based data for reusable content (&lt;a href="#yaml"&gt;see below&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;mm-build &amp;amp; mm-init now use Thor for templating&lt;/li&gt;
&lt;li&gt;Lorem Ipsum &amp;amp; placehold.it helpers (&lt;a href="#lorem"&gt;see below&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;mm-init templates, including HTML5 Boilerplate (&lt;a href="#boilerplate"&gt;see below&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Built-in Rack config.ru for easy running on Heroku or under Pow (see below)&lt;/li&gt;
&lt;li&gt;Experimental JRuby support&lt;/li&gt;
&lt;li&gt;RubyGems-test support&lt;/li&gt;
&lt;li&gt;Using Bundler for packaging&lt;/li&gt;
&lt;/ul&gt;
</summary>
    <content type="html">&lt;p&gt;&lt;strong&gt;Update: &lt;a href="/2011/08/08/middleman-2-0.html"&gt;Middleman version 2.0 has been released&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It's been a long time since &lt;a href="/2009/10/22/middleman"&gt;I introduced Middleman on this blog&lt;/a&gt; in 2009. Since then, RubyGems reports that there have been 27,518 downloads, &lt;a href="https://github.com/tdreyno/middleman/contributors"&gt;several great contributors&lt;/a&gt; to the source code and even a mention in a printed book.&lt;/p&gt;

&lt;p&gt;I've been working hard on documentation as it was the most requested feature from the &lt;a href="/2011/02/06/future-of-middleman-survey"&gt;&amp;quot;Future of Middleman Survey&amp;quot;&lt;/a&gt;. I'm a developer and I'm sorry to admit that my first documentation target is the code and generated documentation. Available at: &lt;a href="http://middlemanapp.com/"&gt;http://middlemanapp.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I know, I need better, more tutorial-style written documentation for actual people. I'll be working on it as time permits, but I'd also love any assistance.&lt;/p&gt;

&lt;p&gt;So, let's talk about the version 1.1. Originally, I planned to make 1.1 a simple update to use the latest features from Sass 3.1. However, as Sass took forever to actually ship, I tweaked, massaged and added a lot more stuff to the platform. Now, I'm releasing even though Sass 3.1 isn't out. &lt;i&gt;C'est la vie&lt;/i&gt;. So, here's what's new:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Now running on Sinatra 1.2&lt;/li&gt;
&lt;li&gt;Sass 3.1 beta &amp;amp; Compass 0.11 beta&lt;/li&gt;
&lt;li&gt;Feature/Extension API (&lt;a href="#features"&gt;see below&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Simple YAML-based data for reusable content (&lt;a href="#yaml"&gt;see below&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;mm-build &amp;amp; mm-init now use Thor for templating&lt;/li&gt;
&lt;li&gt;Lorem Ipsum &amp;amp; placehold.it helpers (&lt;a href="#lorem"&gt;see below&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;mm-init templates, including HTML5 Boilerplate (&lt;a href="#boilerplate"&gt;see below&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Built-in Rack config.ru for easy running on Heroku or under Pow (see below)&lt;/li&gt;
&lt;li&gt;Experimental JRuby support&lt;/li&gt;
&lt;li&gt;RubyGems-test support&lt;/li&gt;
&lt;li&gt;Using Bundler for packaging&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Let's take a look at some of these in depth.&lt;/p&gt;

&lt;p&gt;&lt;a name="features"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Feature/Extension API&lt;/h2&gt;

&lt;p&gt;All the &amp;quot;features&amp;quot; of Middleman can be enabled or disabled from your &lt;tt&gt;config.rb&lt;/tt&gt; file. These features are now all using the Sinatra extension API which means it is very easy to add your own features or include features from other RubyGems. Here is an example Feature:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# In your config.rb or an external file/gem required in config.rb
module MyMiddlemanFeature
  class &amp;lt;&amp;lt; self
    def registered(app)
      app.helpers MyMiddlemanFeature::Helpers
    end
    alias :included :registered
  end

  module Helpers
    def my_custom_helper
      &amp;quot;Hello World&amp;quot;
    end
  end
end

# In config.rb
activate MyMiddlemanFeature
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above extension will add some helpers to your project. Of course, there is already the shortcut &lt;tt&gt;helpers&lt;/tt&gt; block available in &lt;tt&gt;config.rb&lt;/tt&gt;, but this extension could live anywhere. If you have some reusable components or business logic, you can place those in a gem, share it within your company and include it in &lt;tt&gt;config.rb&lt;/tt&gt;. I use this for a custom grid-system I reuse on a lot of projects.&lt;/p&gt;

&lt;p&gt;Of course, existing Sinatra extensions should work too. &lt;a href="http://www.sinatrarb.com/extensions-wild.html"&gt;See more here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a name="yaml"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;YAML Data API&lt;/h2&gt;

&lt;p&gt;Heavier static systems like Nanoc have a robust system for separating data from your HTML. This is great for sharing content across pages or having simpler files which content-focused co-workers can update without touching HTML. It's not documented, but because Middleman runs on Sinatra, it's possible to open database connections and pull data in that way already, but that's a bit must. Middleman 1.1 comes with a simple data API. Here's how it works:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a folder in the root of your project named &lt;tt&gt;data&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;Create as many &lt;tt&gt;.yml&lt;/tt&gt; YAML files as you want&lt;/li&gt;
&lt;li&gt;Their contents will be made available in your templates as &lt;tt&gt;data[&amp;quot;filename&amp;quot;]&lt;/tt&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// In PROJECT_ROOT/data/people.yml
friends:
  - tom
  - dick
  - harry

// In my template
%h1 Friends
%ul
  - data.people.friends.each do |f|
    %li= f
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a name="lorem"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Lorem Ipsum &amp;amp; Placehold.it helpers&lt;/h2&gt;

&lt;p&gt;The &lt;a href="https://github.com/blahed/frank"&gt;Frank project&lt;/a&gt;, a static tool also inspired by Sinatra, has a wonderful set of helpers for generating random text content and placeholder images. I'm adapted this code for Middleman (god bless the MIT license). The API is as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;lorem.sentence      # returns a single sentence
lorem.words 5       # returns 5 individual words
lorem.word
lorem.paragraphs 10 # returns 10 paragraphs 
lorem.paragraph
lorem.date          # accepts a strftime format argument
lorem.name
lorem.first_name
lorem.last_name
lorem.email
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And to use placeholder images:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;lorem.image('300x400')
#=&amp;gt; http://placehold.it/300x400

lorem.image('300x400', :background_color =&amp;gt; '333', :color =&amp;gt; 'fff')
#=&amp;gt; http://placehold.it/300x400/333/fff

lorem.image('300x400', :random_color =&amp;gt; true)
#=&amp;gt; http://placehold.it/300x400/f47av7/9fbc34d

lorem.image('300x400', :text =&amp;gt; 'blah')
#=&amp;gt; http://placehold.it/300x400&amp;amp;text=blah
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a name="boilerplate"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;New Project Templates (HTML5 Boilerplate)&lt;/h2&gt;

&lt;p&gt;I've abstracted the templates used in &lt;tt&gt;mm-init&lt;/tt&gt; so that it is easy to add new ones, but right now those templates have to live in the Middleman gem to work. In the future, I'll add support for extra templates in external gems or somewhere on the local machine like &lt;tt&gt;~/.middleman&lt;/tt&gt;. For now, enjoy the new template option, the wonderful &lt;a href="http://html5boilerplate.com/"&gt;HTML5 Boilerplate&lt;/a&gt;. It is used like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mm-init my_boilerplate_project --template=html5
    create  my_boilerplate_project/config.rb
    create  my_boilerplate_project/public
    create  my_boilerplate_project/public/404.html
    create  my_boilerplate_project/public/apple-touch-icon.png
    create  my_boilerplate_project/public/crossdomain.xml
    create  my_boilerplate_project/public/css/handheld.css
    create  my_boilerplate_project/public/css/style.css
    create  my_boilerplate_project/public/favicon.ico
    create  my_boilerplate_project/public/humans.txt
    create  my_boilerplate_project/public/images/.gitignore
    create  my_boilerplate_project/public/index.html
    create  my_boilerplate_project/public/js/libs/dd_belatedpng.js
    create  my_boilerplate_project/public/js/libs/jquery-1.5.0.js
    create  my_boilerplate_project/public/js/libs/jquery-1.5.0.min.js
    create  my_boilerplate_project/public/js/libs/modernizr-1.6.min.js
    create  my_boilerplate_project/public/js/mylibs/.gitignore
    create  my_boilerplate_project/public/js/plugins.js
    create  my_boilerplate_project/public/js/script.js
    create  my_boilerplate_project/public/robots.txt
    create  my_boilerplate_project/views
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Rack-support by Default&lt;/h2&gt;

&lt;p&gt;Finally, a very simple Rack &lt;tt&gt;config.ru&lt;/tt&gt; file is included in the default template. It's contents are:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;require 'rubygems'
require 'middleman'

run Middleman::Server
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This allows Middleman to easily run on a Heroku instance or under 37Signal's new &lt;a href="http://pow.cx/"&gt;Pow webserver&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Installation&lt;/h2&gt;

&lt;p&gt;As easy as ever:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gem install middleman
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Please direct all questions and bugs to Github:
&lt;a href="https://github.com/tdreyno/middleman"&gt;https://github.com/tdreyno/middleman&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Adjustable Animations with Sliders</title>
    <link rel="alternate" href="/2011/04/13/adjustable-animations-with-sliders.html"/>
    <id>/2011/04/13/adjustable-animations-with-sliders.html</id>
    <published>2011-04-13T00:00:00-07:00</published>
    <updated>2011-04-13T00:00:00-07:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;Quick question? What is the perfect amount of time to animate an element on a page? jQuery defaults to 400ms, which sounds short, but ends up being pretty perfect for most occasions. It gets the job done and then it gets out of the way. &lt;/p&gt;

&lt;p&gt;However, it shouldn't surprise you that designers have opinions on motion and we're just now reaching the point where motion is becoming important on the web. &lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;Quick question? What is the perfect amount of time to animate an element on a page? jQuery defaults to 400ms, which sounds short, but ends up being pretty perfect for most occasions. It gets the job done and then it gets out of the way. &lt;/p&gt;

&lt;p&gt;However, it shouldn't surprise you that designers have opinions on motion and we're just now reaching the point where motion is becoming important on the web.  Back in the day, 37Signals would just set the background of an element to yellow and call it a day. If you take a look at &lt;a href="http://getflow.com"&gt;Flow&lt;/a&gt;, you'll see some very designed motion. Closing a task results in the checkbox animating to a state, then it picks up and animates along an arc to drop into the &amp;quot;completed&amp;quot; box in your sidebar.&lt;/p&gt;

&lt;p&gt;Okay, so, what's the perfect timing for that animation? There are tools for prototyping motion, most notably Adobe Flash, but usually you're designer is going to want to look over your shoulder and tweak the animation until it &amp;quot;feels right.&amp;quot;&lt;/p&gt;

&lt;p&gt;The solution is something I've seen friends in the old-school OpenGL motion build into their dev workflow. Every time they've got a motion variable (duration, size, color, wobble, randomness, etc), they setup a control to adjust the variable. Who wants to change integers in OpenGL and recompile? Like so many things, it's time to re-learn tricks from the desktop world if we're going to move forward.&lt;/p&gt;

&lt;p&gt;Here, below is the most basic example. I have a square that is animating back and forth and changing width and height. In a more complicated example, it might arc or have several animations queued up. I've used a shiny new HTML5 &lt;tt&gt;range&lt;/tt&gt; element and each time the animation loops, it checks the value to define it's duration.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!-- Ranges from 0-4000, with integer steps. Defaults to 400 --&amp;gt;
&amp;lt;input type=&amp;quot;range&amp;quot; min=&amp;quot;0&amp;quot; max=&amp;quot;4000&amp;quot; step=&amp;quot;1&amp;quot; value=&amp;quot;400&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The animation looks like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$elem.animate({ left: 480, width: 100, height: 100 }, {
  duration: $(&amp;quot;input[type=range]&amp;quot;).val()
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Simple enough. If I were implementing an animation, vaguely defined in a PSD, I'd setup something like this and then let the designer have a field day. Developers love round numbers and math, but the &amp;quot;best&amp;quot; timing may actually be the combination of an esoteric easing function and a duration of 962.&lt;/p&gt;

&lt;p&gt;This gets even more interesting if you're using something like WebGL, Three.js or Box2d.js. Adjust physics engines on the fly makes finding the perfect balance a cinch.&lt;/p&gt;

&lt;h1&gt;Demo&lt;/h1&gt;

&lt;p&gt;Here we have a little animating square, a slider to control the duration and a bunch of easing options. Go ahead, play around and find the &amp;quot;sweet spot.&amp;quot;&lt;/p&gt;

&lt;script type="text/javascript" charset="utf-8"&gt;
  $.getScript("/javascripts/jquery.easing.1.3.js", function() {

    $(function($) {
      $(".range").change(function() {
        $(".speed").text($(this).val());
      }).change();

      function getEasing() {
        return $(".easing").val();
      }

      function getSliderValue() {
        return parseInt($(".range").val(), 10);
      }

      function animateRight() {
        $(".box").stop().animate({ left: 380, width: 100, height: 100 }, {
          duration: getSliderValue(), 
          easing:   getEasing(),
          complete: function() {
            setTimeout(animateLeft, 750);
          }
        });
      }

      function animateLeft() {
        $(".box").stop().animate({ left: 0, width: 50, height: 50 }, {
          duration: getSliderValue(), 
          easing:   getEasing(),
          complete: function() {
            setTimeout(animateRight, 750);
          }
        });
      }

      animateRight();
    });
  });
&lt;/script&gt;

&lt;div class="demo" style="width: 600px; height: 300px; position: relative; overflow: hidden;"&gt;
  Duration: &lt;span class="speed"&gt;&lt;/span&gt;&lt;br /&gt;
  &lt;input class="range" type="range" min="0" max="4000" step="1" value="1400" style="width: 300;" /&gt;&lt;br /&gt;
  Easing: &lt;select class="easing"&gt;
    &lt;option&gt;swing&lt;/option&gt;
    &lt;option&gt;easeInQuad&lt;/option&gt;
    &lt;option&gt;easeOutQuad&lt;/option&gt;
    &lt;option&gt;easeInOutQuad&lt;/option&gt;
    &lt;option&gt;easeInCubic&lt;/option&gt;
    &lt;option&gt;easeOutCubic&lt;/option&gt;
    &lt;option&gt;easeInOutCubic&lt;/option&gt;
    &lt;option&gt;easeInQuart&lt;/option&gt;
    &lt;option&gt;easeOutQuart&lt;/option&gt;
    &lt;option&gt;easeInOutQuart&lt;/option&gt;
    &lt;option&gt;easeInQuint&lt;/option&gt;
    &lt;option&gt;easeOutQuint&lt;/option&gt;
    &lt;option&gt;easeInOutQuint&lt;/option&gt;
    &lt;option&gt;easeInSine&lt;/option&gt;
    &lt;option&gt;easeOutSine&lt;/option&gt;
    &lt;option&gt;easeInOutSine&lt;/option&gt;
    &lt;option&gt;easeInExpo&lt;/option&gt;
    &lt;option&gt;easeOutExpo&lt;/option&gt;
    &lt;option&gt;easeInOutExpo&lt;/option&gt;
    &lt;option&gt;easeInCirc&lt;/option&gt;
    &lt;option&gt;easeOutCirc&lt;/option&gt;
    &lt;option&gt;easeInOutCirc&lt;/option&gt;
    &lt;option&gt;easeInElastic&lt;/option&gt;
    &lt;option&gt;easeOutElastic&lt;/option&gt;
    &lt;option&gt;easeInOutElastic&lt;/option&gt;
    &lt;option&gt;easeInBack&lt;/option&gt;
    &lt;option&gt;easeOutBack&lt;/option&gt;
    &lt;option&gt;easeInOutBack&lt;/option&gt;
    &lt;option&gt;easeInBounce&lt;/option&gt;
    &lt;option selected&gt;easeOutBounce&lt;/option&gt;
    &lt;option&gt;easeInOutBounce&lt;/option&gt;
  &lt;/select&gt;&lt;br /&gt;

  &lt;div class="box" style="width: 50px; height: 50px; background: red; position: absolute; top: 75px; left: 10px;"&gt;&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Announcing: WouldHire.com</title>
    <link rel="alternate" href="/2011/04/08/announcing-wouldhirecom.html"/>
    <id>/2011/04/08/announcing-wouldhirecom.html</id>
    <published>2011-04-08T00:00:00-07:00</published>
    <updated>2011-04-08T00:00:00-07:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;This year at SXSW I was either involved in or overheard the same conversation several times. &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Person A: So where do you work now?
Person B: Just started a new job at Company X.
Person A: Ah, man, you should have told me you were looking. 
          I'd love to work with you.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Somehow, despite all of our constant communication and over-sharing on Twitter, we still like to avoid &amp;quot;serious&amp;quot; conversations about jobs, salaries and what it would take to get your friend/buddy/idol to work with you. So, to scratch this itch, &lt;a href="http://pixelmatrixdesign.com/"&gt;Josh Pyles&lt;/a&gt; and I spent the last weekend putting together &lt;a href="http://wouldhire.com"&gt;WouldHire.com&lt;/a&gt;.&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;This year at SXSW I was either involved in or overheard the same conversation several times. &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Person A: So where do you work now?
Person B: Just started a new job at Company X.
Person A: Ah, man, you should have told me you were looking. 
          I'd love to work with you.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Somehow, despite all of our constant communication and over-sharing on Twitter, we still like to avoid &amp;quot;serious&amp;quot; conversations about jobs, salaries and what it would take to get your friend/buddy/idol to work with you. So, to scratch this itch, &lt;a href="http://pixelmatrixdesign.com/"&gt;Josh Pyles&lt;/a&gt; and I spent the last weekend putting together &lt;a href="http://wouldhire.com"&gt;WouldHire.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;The site is very simple. Go to the homepage, enter your twitter username and see if anyone has expressed interest in working with you. If they have and you're looking for a new gig, it's up to you two to figure it out.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://wouldhire.com"&gt;&lt;img src="http://src.sencha.io/http://awardwinningfjords.com/images/WouldHire-homepage.png" alt="Homepage"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://who.wouldhire.com/pixelmatrix"&gt;&lt;img src="http://src.sencha.io/http://awardwinningfjords.com/images/WouldHire-who.png" alt="Who WouldHire @pixelmatrix"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, if you're looking to let someone know that you're interested, simply login (using Twitter) and add some Twitter usernames to your &amp;quot;dream team.&amp;quot;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://src.sencha.io/http://awardwinningfjords.com/images/WouldHire-admin.png" alt="WouldHire Admin"&gt;&lt;/p&gt;

&lt;p&gt;Pretty cool, eh? Please check it out, email me your ideas/comments and hopefully this will help someone, somewhere end up with their dream job.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Model and Data Store: JavascriptMVC</title>
    <link rel="alternate" href="/2011/02/18/model-and-data-store-javascriptmvc.html"/>
    <id>/2011/02/18/model-and-data-store-javascriptmvc.html</id>
    <published>2011-02-18T00:00:00-08:00</published>
    <updated>2011-02-18T00:00:00-08:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;Last time, [I wrote about client-side models] in an abstract way using plain Javascript. Understanding the purpose of models and encapulating model-specific functionality is important for code organization, but you will end up having to write a bunch of code to support your models. For example, converting and parsing JSON values, figuring out how and when to push changes to the server and client-side validations.&lt;/p&gt;
</summary>
    <content type="html"></content>
  </entry>
  <entry>
    <title>Aaron Quint on Javascript Hash URLs</title>
    <link rel="alternate" href="/2011/02/11/aaron-quint-on-javascript-hash-urls.html"/>
    <id>/2011/02/11/aaron-quint-on-javascript-hash-urls.html</id>
    <published>2011-02-11T00:00:00-08:00</published>
    <updated>2011-02-11T00:00:00-08:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Sammy and the ‘#’ are for applications. It provides a way to maintain state in a world where you can require JavaScript and even require the presence of certain browsers. If you’re an application, that requires login/signup you can make a number of demands of your users. You also probably dont even want the crawlability. You’re using ‘#’ to maintain state for a specific user in a specific session.&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    <content type="html"></content>
  </entry>
  <entry>
    <title>Andy Rutledge on Kickstarter</title>
    <link rel="alternate" href="/2011/02/08/andy-rutledge-on-kickstarter.html"/>
    <id>/2011/02/08/andy-rutledge-on-kickstarter.html</id>
    <published>2011-02-08T00:00:00-08:00</published>
    <updated>2011-02-08T00:00:00-08:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;By taking the professional-to-client approach for what should be a merchant-to-customer context, Mr. Chimero has abdicated ownership of his idea/genius and the results that will come of it. Having bought and paid for it, the collective investors now own his genius in this project. By selling out first before he created the product he promises, he’s now working for the investors instead of working for himself.&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    <content type="html"></content>
  </entry>
  <entry>
    <title>Future of Middleman Survey</title>
    <link rel="alternate" href="/2011/02/06/future-of-middleman-survey.html"/>
    <id>/2011/02/06/future-of-middleman-survey.html</id>
    <published>2011-02-06T00:00:00-08:00</published>
    <updated>2011-02-06T00:00:00-08:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;I've created a brief survey about &lt;a href="http://middlemanapp.com"&gt;Middleman&lt;/a&gt;. If you've used the project, I would love your input. Thanks!&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.surveymonkey.com/s/5P9B92Q"&gt;http://www.surveymonkey.com/s/5P9B92Q&lt;/a&gt;&lt;/p&gt;
</summary>
    <content type="html"></content>
  </entry>
  <entry>
    <title>Model and Data Store: Sencha</title>
    <link rel="alternate" href="/2011/01/28/model-and-data-store-sencha.html"/>
    <id>/2011/01/28/model-and-data-store-sencha.html</id>
    <published>2011-01-28T00:00:00-08:00</published>
    <updated>2011-01-28T00:00:00-08:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;I'm in the process of writing up how the Model and Data Store works in JavascriptMVC and Sproutcore. In the mean-time, check out Ed Spencer's fantastic article about the ExtJS/Sencha Data Package on the official Sencha blog.&lt;/p&gt;

&lt;p&gt;[http://www.sencha.com/blog/ext-js-4-anatomy-of-a-model/]&lt;/p&gt;
</summary>
    <content type="html"></content>
  </entry>
  <entry>
    <title>Client-side MVC+S Part 1: The Model and Data Store</title>
    <link rel="alternate" href="/2011/01/25/client-side-mvcs-part-1-the-model-and-data-store.html"/>
    <id>/2011/01/25/client-side-mvcs-part-1-the-model-and-data-store.html</id>
    <published>2011-01-25T00:00:00-08:00</published>
    <updated>2011-01-25T00:00:00-08:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;Like it or not, the Apple iPhone and iPad have changed people&amp;rsquo;s expectations for how apps and even websites should behave. As designers begin porting native application concepts to the web, we front-end developers have got to become more organized and application-oriented to survive. More and more, websites should be categorized as &amp;quot;simple applications.&amp;quot; Building sites as a collection of jQuery plugins is a bad idea in this new, complex web-application world.&lt;/p&gt;
</summary>
    <content type="html"></content>
  </entry>
  <entry>
    <title>SecondStoryJS State Machine now has a documentation website</title>
    <link rel="alternate" href="/2010/12/31/secondstoryjs-state-machine-now-has-a-documentation-website.html"/>
    <id>/2010/12/31/secondstoryjs-state-machine-now-has-a-documentation-website.html</id>
    <published>2010-12-31T00:00:00-08:00</published>
    <updated>2010-12-31T00:00:00-08:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;You can now learn everything you wanted to know about the JavascriptMVC3 state machine on the project website at:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://secondstory.github.com/secondstoryjs-router/"&gt;http://secondstory.github.com/secondstoryjs-statemachine/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://src.sencha.io/http://awardwinningfjords.com/images/SecondStoryJS-StateMachine.png" alt="SecondStoryJS State Machine" /&gt;&lt;/p&gt;
</summary>
    <content type="html"></content>
  </entry>
  <entry>
    <title>Best Albums of the Year: 2010</title>
    <link rel="alternate" href="/2010/12/09/best-albums-of-the-year-2010.html"/>
    <id>/2010/12/09/best-albums-of-the-year-2010.html</id>
    <published>2010-12-09T00:00:00-08:00</published>
    <updated>2010-12-09T00:00:00-08:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;&lt;link rel="stylesheet" href="/stylesheets/best-of-2010.css?v2" type="text/css" media="screen" /&gt;&lt;/p&gt;

&lt;p&gt;It's that time of year again! I don't want a personal live journal all year, but damnit this is the one exception. I document my opinions because I think it will be really fun to look back and see what I was listening to in Ye Olde 2010. I suppose this should be a &amp;quot;Top 14&amp;quot; list, but instead it's &amp;quot;Top 10&amp;quot; and some honorable mentions. Let's  get started.&lt;/p&gt;
</summary>
    <content type="html"></content>
  </entry>
  <entry>
    <title>PubSub, Evented Programming and Javascript</title>
    <link rel="alternate" href="/2010/10/27/pubsub-evented-programming-and-javascript.html"/>
    <id>/2010/10/27/pubsub-evented-programming-and-javascript.html</id>
    <published>2010-10-27T00:00:00-07:00</published>
    <updated>2010-10-27T00:00:00-07:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;One of the buzzwords at jQuery Conference 2010 Boston (that mouthful makes Microsoft product names sound elegant), was &amp;quot;PubSub.&amp;quot; At least three speakers referenced the concept in different contexts and I overheard quite a bit of chatter about it in the hallways. I was surprised to see so many people getting their first introduction to the concept, especially given how event-oriented jQuery is. So, let's take a look at what PubSub means, how you can use it in jQuery and some very naive example code.&lt;/p&gt;
</summary>
    <content type="html"></content>
  </entry>
  <entry>
    <title>Slides from my jQuery Conference Presentation</title>
    <link rel="alternate" href="/2010/10/18/slides-from-my-jquery-conference-presentation.html"/>
    <id>/2010/10/18/slides-from-my-jquery-conference-presentation.html</id>
    <published>2010-10-18T00:00:00-07:00</published>
    <updated>2010-10-18T00:00:00-07:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;Here are the slides which went along with my JavascriptMVC presentation at jQuery Conference Boston. You can avoid the nasty flash widget and &lt;a href="http://dl.dropbox.com/u/102356/organizing-code-with-javascriptmvc.pdf"&gt;download the PDF directly&lt;/a&gt; if you prefer.&lt;/p&gt;
</summary>
    <content type="html"></content>
  </entry>
  <entry>
    <title>Middleman Feature: Config.rb can setup Rack middleware</title>
    <link rel="alternate" href="/2010/10/11/middleman-feature-configrb-can-setup-rack-middleware.html"/>
    <id>/2010/10/11/middleman-feature-configrb-can-setup-rack-middleware.html</id>
    <published>2010-10-11T00:00:00-07:00</published>
    <updated>2010-10-11T00:00:00-07:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;Did you know that since &lt;a href="http://middlemanapp.com"&gt;Middleman&lt;/a&gt;'s &lt;tt&gt;config.rb&lt;/tt&gt; is evaluated by Sinatra that it can initialize Rack middleware?&lt;/p&gt;

&lt;p&gt;In the code sample below, I use the &lt;a href="http://github.com/wbzyl/rack-codehighlighter"&gt;rack-codehighlighter&lt;/a&gt; middleware to add syntax highlighting to a Middleman project.&lt;/p&gt;
</summary>
    <content type="html"></content>
  </entry>
  <entry>
    <title>SecondStoryJS Router now has a documentation website</title>
    <link rel="alternate" href="/2010/10/11/secondstoryjs-router-now-has-a-documentation-website.html"/>
    <id>/2010/10/11/secondstoryjs-router-now-has-a-documentation-website.html</id>
    <published>2010-10-11T00:00:00-07:00</published>
    <updated>2010-10-11T00:00:00-07:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;Like the title says, you can now learn everything you wanted to know about the JavascriptMVC3 router on the project website at:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://secondstory.github.com/secondstoryjs-router/"&gt;http://secondstory.github.com/secondstoryjs-router/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://src.sencha.io/http://awardwinningfjords.com/images/SecondStoryJS-Router.png" alt="SecondStoryJS Router" /&gt;&lt;/p&gt;
</summary>
    <content type="html"></content>
  </entry>
  <entry>
    <title>Handling Touch Events in jQuery Tools Scrollable</title>
    <link rel="alternate" href="/2010/09/22/handling-touch-events-in-jquery-tools-scrollable.html"/>
    <id>/2010/09/22/handling-touch-events-in-jquery-tools-scrollable.html</id>
    <published>2010-09-22T00:00:00-07:00</published>
    <updated>2010-09-22T00:00:00-07:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html"></summary>
    <content type="html"></content>
  </entry>
  <entry>
    <title>Speaking at jQuery Conference: Boston 2010</title>
    <link rel="alternate" href="/2010/09/08/speaking-at-jquery-conference-boston-2010.html"/>
    <id>/2010/09/08/speaking-at-jquery-conference-boston-2010.html</id>
    <published>2010-09-08T00:00:00-07:00</published>
    <updated>2010-09-08T00:00:00-07:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;Two big announcements today.&lt;/p&gt;
</summary>
    <content type="html"></content>
  </entry>
  <entry>
    <title>Mustache for JavascriptMVC 3</title>
    <link rel="alternate" href="/2010/08/09/mustache-for-javascriptmvc-3.html"/>
    <id>/2010/08/09/mustache-for-javascriptmvc-3.html</id>
    <published>2010-08-09T00:00:00-07:00</published>
    <updated>2010-08-09T00:00:00-07:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;If you're a fan of the Mustache templating language, here's a plugin to integrate it with JavascriptMVC 3.&lt;/p&gt;

&lt;p&gt;There are two ways of grabbing the code. If you have a very recent version of JavascriptMVC 3 you can use the new &lt;tt&gt;getjs&lt;/tt&gt; method of installing plugins. The command, from your project folder, looks like this:&lt;/p&gt;
</summary>
    <content type="html"></content>
  </entry>
  <entry>
    <title>The jQuery Tools API Pattern</title>
    <link rel="alternate" href="/2010/08/06/the-jquery-tools-api-pattern.html"/>
    <id>/2010/08/06/the-jquery-tools-api-pattern.html</id>
    <published>2010-08-06T00:00:00-07:00</published>
    <updated>2010-08-06T00:00:00-07:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html"></summary>
    <content type="html"></content>
  </entry>
  <entry>
    <title>Style Guides Using Sass @extend</title>
    <link rel="alternate" href="/2010/07/30/style-guides-using-sass-extend.html"/>
    <id>/2010/07/30/style-guides-using-sass-extend.html</id>
    <published>2010-07-30T00:00:00-07:00</published>
    <updated>2010-07-30T00:00:00-07:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;There are some very common front-end development patterns that drive me crazy. CSS with every style related to a specific selector on one line and IE-only stylesheets with conditional comments are both common place and even encouraged by some. But the worst, in my opinion, is breaking our CSS into multiple files in an attempt to make them &amp;quot;themable.&amp;quot; Usually this results in something like a &lt;tt&gt;main.css&lt;/tt&gt; and a &lt;tt&gt;fonts.css&lt;/tt&gt; or &lt;tt&gt;colors.css&lt;/tt&gt;. Having a go-to file for designers to manipulate fonts and colors is very useful, but usually the structure of this secondary file mirrors the primary file and you end up with a lot of repetition. Furthermore, if your DOM structure changes, then you will need to update multiple files (&lt;tt&gt;ie.css&lt;/tt&gt; results in a similar problem).&lt;/p&gt;
</summary>
    <content type="html"></content>
  </entry>
  <entry>
    <title>Sass @extend Introduction</title>
    <link rel="alternate" href="/2010/07/27/sass-extend-introduction.html"/>
    <id>/2010/07/27/sass-extend-introduction.html</id>
    <published>2010-07-27T00:00:00-07:00</published>
    <updated>2010-07-27T00:00:00-07:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;Sass (and SCSS) version 3 added support for the @extend directive which provides a means of class inheritance and combats the duplication of CSS which Sass mixins create. The earlier features of Sass were basically macros. They grabbed a piece of CSS from either a mixin definition or an external file and inserted that CSS into the output. @extend actually manipulates the selectors and uses CSS's own cascading inheritance system simplify code and avoid duplication. Let's look at some simple examples.&lt;/p&gt;
</summary>
    <content type="html"></content>
  </entry>
  <entry>
    <title>JavascriptMVC Router</title>
    <link rel="alternate" href="/2010/07/23/javascriptmvc-router.html"/>
    <id>/2010/07/23/javascriptmvc-router.html</id>
    <published>2010-07-23T00:00:00-07:00</published>
    <updated>2010-07-23T00:00:00-07:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html"></summary>
    <content type="html"></content>
  </entry>
  <entry>
    <title>UINavigationController implementation for SenchaTouch</title>
    <link rel="alternate" href="/2010/07/02/uinavigationcontroller-implementation-for-senchatouch.html"/>
    <id>/2010/07/02/uinavigationcontroller-implementation-for-senchatouch.html</id>
    <published>2010-07-02T00:00:00-07:00</published>
    <updated>2010-07-02T00:00:00-07:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;&lt;a href="http://www.sencha.com/products/touch/"&gt;SenchaTouch&lt;/a&gt; is web development framework for building native-looking mobile apps (iOS &amp;amp; Android) using standards-based web technologies such as HTML5 &amp;amp; CSS3. The Sencha website features &lt;a href="http://www.sencha.com/products/touch/demos.php"&gt;several very impressive demos&lt;/a&gt;. However, the framework is still in beta and many useful features are either incomplete or missing entirely.&lt;/p&gt;
</summary>
    <content type="html"></content>
  </entry>
  <entry>
    <title>State Machine Controller for JavascriptMVC</title>
    <link rel="alternate" href="/2010/05/27/state-machine-controller-for-javascriptmvc.html"/>
    <id>/2010/05/27/state-machine-controller-for-javascriptmvc.html</id>
    <published>2010-05-27T00:00:00-07:00</published>
    <updated>2010-05-27T00:00:00-07:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html"></summary>
    <content type="html"></content>
  </entry>
  <entry>
    <title>HTML5 localStorage for JavascriptMVC</title>
    <link rel="alternate" href="/2010/05/21/html5-localstorage-for-javascriptmvc.html"/>
    <id>/2010/05/21/html5-localstorage-for-javascriptmvc.html</id>
    <published>2010-05-21T00:00:00-07:00</published>
    <updated>2010-05-21T00:00:00-07:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html"></summary>
    <content type="html"></content>
  </entry>
  <entry>
    <title>Apple-style Gradient Text Headlines in SCSS/SASS</title>
    <link rel="alternate" href="/2010/04/13/apple-style-gradient-text-headlines-in-scsssass.html"/>
    <id>/2010/04/13/apple-style-gradient-text-headlines-in-scsssass.html</id>
    <published>2010-04-13T00:00:00-07:00</published>
    <updated>2010-04-13T00:00:00-07:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;Apple's effect looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://src.sencha.io/http://dl.dropbox.com/u/102356/Screenshot.png" /&gt;&lt;/p&gt;

&lt;p&gt;This effect only works in Webkit-based browsers like Safari and Chrome at this time and requires Sass 3 and the most recent version of Compass:&lt;/p&gt;
</summary>
    <content type="html"></content>
  </entry>
  <entry>
    <title>Sass 3 Color Manipulation</title>
    <link rel="alternate" href="/2010/04/12/sass-3-color-manipulation.html"/>
    <id>/2010/04/12/sass-3-color-manipulation.html</id>
    <published>2010-04-12T00:00:00-07:00</published>
    <updated>2010-04-12T00:00:00-07:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html"></summary>
    <content type="html"></content>
  </entry>
  <entry>
    <title>Example SCSS (Sassy CSS) File</title>
    <link rel="alternate" href="/2010/04/09/example-scss-sassy-css-file.html"/>
    <id>/2010/04/09/example-scss-sassy-css-file.html</id>
    <published>2010-04-09T00:00:00-07:00</published>
    <updated>2010-04-09T00:00:00-07:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;I'm working on a new site which will eventually run on PHP5. Going back to raw CSS isn't really an option because I value my time and sanity. Thankfully there may be a way to run Sass' new format, &lt;a href="http://nex-3.com/posts/96-scss-sass-is-a-css-extension"&gt;SCSS&lt;/a&gt;, under PHP using &lt;a href="http://github.com/anthonyshort/csscaffold"&gt;Anthony Short's CSScaffold project&lt;/a&gt;. The project provides a CSS preprocessor, like Sass, which runs on PHP. Currently, the project's syntax is similar, but different, than either Less or SCSS. Thankfully, Anthony has said he is working on bringing CSScaffold in-line with the SCSS syntax.&lt;/p&gt;
</summary>
    <content type="html"></content>
  </entry>
  <entry>
    <title>Sass 3 Syntax</title>
    <link rel="alternate" href="/2010/03/31/sass-3-syntax.html"/>
    <id>/2010/03/31/sass-3-syntax.html</id>
    <published>2010-03-31T00:00:00-07:00</published>
    <updated>2010-03-31T00:00:00-07:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;&lt;strong&gt;Edit: Added section on hyphens and underscores as requested by &lt;a href="http://twitter.com/chriseppstein"&gt;Chris Eppstein&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
</summary>
    <content type="html"></content>
  </entry>
  <entry>
    <title>A Learning Experience. iPhone-style checkboxes in Coffee-Script</title>
    <link rel="alternate" href="/2010/03/01/a-learning-experience-iphone-style-checkboxes-in-coffee-script.html"/>
    <id>/2010/03/01/a-learning-experience-iphone-style-checkboxes-in-coffee-script.html</id>
    <published>2010-03-01T00:00:00-08:00</published>
    <updated>2010-03-01T00:00:00-08:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html"></summary>
    <content type="html"></content>
  </entry>
  <entry>
    <title>Using RVM to Manage Multiple Ruby Interpreters</title>
    <link rel="alternate" href="/2010/02/17/using-rvm-to-manage-multiple-ruby-interpreters.html"/>
    <id>/2010/02/17/using-rvm-to-manage-multiple-ruby-interpreters.html</id>
    <published>2010-02-17T00:00:00-08:00</published>
    <updated>2010-02-17T00:00:00-08:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;I've been hearing a bit of buzz about the &lt;a href="http://rvm.beginrescueend.com/rvm/install/"&gt;Ruby Version Manager&lt;/a&gt; project on Twitter and from other Rubyists I know. Basically, the project provides a command-line tool which can download and compile a large number of Ruby implementations and swap between the active implementation on a per-terminal basis.&lt;/p&gt;
</summary>
    <content type="html"></content>
  </entry>
  <entry>
    <title>Best Albums of the Decade. Top 25</title>
    <link rel="alternate" href="/2009/12/14/best-of-the-decade-pt2.html"/>
    <id>/2009/12/14/best-of-the-decade-pt2.html</id>
    <published>2009-12-14T00:00:00-08:00</published>
    <updated>2009-12-14T00:00:00-08:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;&lt;link rel="stylesheet" href="/stylesheets/best-of-2010.css?v2" type="text/css" media="screen" /&gt;&lt;/p&gt;

&lt;p&gt;And now for the top 25.&lt;/p&gt;

&lt;p&gt;&lt;ul&gt;
  &lt;li&gt;
    &lt;div class='cover'&gt;
      &lt;img src='http://awardwinningfjords.com/albums/25.jpg' /&gt;
    &lt;/div&gt;
    &lt;div class='content'&gt;&lt;/p&gt;
</summary>
    <content type="html"></content>
  </entry>
  <entry>
    <title>Best Albums of the Decade</title>
    <link rel="alternate" href="/2009/12/04/best-of-the-decade.html"/>
    <id>/2009/12/04/best-of-the-decade.html</id>
    <published>2009-12-04T00:00:00-08:00</published>
    <updated>2009-12-04T00:00:00-08:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;&lt;link rel="stylesheet" href="/stylesheets/best-of-2010.css?v2" type="text/css" media="screen" /&gt;&lt;/p&gt;

&lt;p&gt;In 1990, I was 7 years old. Needless to say, by 17 I still didn't have the most refined musical tastes. I'm just now getting into Pavement, Jawbox and My Bloody Valentine. So, this past decade has been my first where I can remember listening to each of the following albums when they were released. Most of the lists I've seen so far are exceptionally myopic, with albums mostly from the past 3-4 years and enjoy Radiohead to look cool. My list is hopefully more diverse. I've also used my actual listening habits (courtesy of last.fm) for ranking, rather than pretending I actually listened to The White Stripes ever single day like some lists.&lt;/p&gt;
</summary>
    <content type="html"></content>
  </entry>
  <entry>
    <title>The Middleman. A modular, feature-rich static site generator</title>
    <link rel="alternate" href="/2009/10/22/middleman.html"/>
    <id>/2009/10/22/middleman.html</id>
    <published>2009-10-22T00:00:00-07:00</published>
    <updated>2009-10-22T00:00:00-07:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html"></summary>
    <content type="html"></content>
  </entry>
  <entry>
    <title>Tweetie-style paging with pageSlider</title>
    <link rel="alternate" href="/2009/08/31/pageslider-tweetie-style-pages.html"/>
    <id>/2009/08/31/pageslider-tweetie-style-pages.html</id>
    <published>2009-08-31T00:00:00-07:00</published>
    <updated>2009-08-31T00:00:00-07:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;&lt;a href="http://www.atebits.com/tweetie-mac/"&gt;Tweetie for Mac&lt;/a&gt; is one of my favorite programs. However, it is also one of the least Mac-like applications I use. Instead of standard interactions, such as a tab control, for switching modes, Tweetie uses an iPhone-inspired&lt;/p&gt;
</summary>
    <content type="html"></content>
  </entry>
  <entry>
    <title>Speaking at RefreshPDX on Sass</title>
    <link rel="alternate" href="/2009/07/22/speaking-at-refreshpdx.html"/>
    <id>/2009/07/22/speaking-at-refreshpdx.html</id>
    <published>2009-07-22T00:00:00-07:00</published>
    <updated>2009-07-22T00:00:00-07:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html"></summary>
    <content type="html"></content>
  </entry>
  <entry>
    <title>Easy Google Maps with jQuery</title>
    <link rel="alternate" href="/2009/07/22/google-maps-with-jquery.html"/>
    <id>/2009/07/22/google-maps-with-jquery.html</id>
    <published>2009-07-22T00:00:00-07:00</published>
    <updated>2009-07-22T00:00:00-07:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;The other day I needed a simple way to include a Google Map, so I wrote this jQuery function.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;:::JavaScript
$.fn.googleMap = function(address, options) {
  var defaults = {
    lat: 44.081996,
    long: -123.0286928,
    zoom: 14,
&lt;/code&gt;&lt;/pre&gt;
</summary>
    <content type="html"></content>
  </entry>
  <entry>
    <title>Simplifying CSS with Sass Presentation</title>
    <link rel="alternate" href="/2009/07/22/simplifying-css-presentation.html"/>
    <id>/2009/07/22/simplifying-css-presentation.html</id>
    <published>2009-07-22T00:00:00-07:00</published>
    <updated>2009-07-22T00:00:00-07:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;Here are my slides from tonight's Refresh PDX presentation on Sass and Compass.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.slideshare.net/tdreyno/simplifying-css-with-sass"&gt;Simplifying CSS With Sass&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class='flash'&gt;
  &lt;object height='355' style='margin:0px' width='425'&gt;&lt;/p&gt;
</summary>
    <content type="html"></content>
  </entry>
  <entry>
    <title>Rapha&amp;euml;l. The Return of Browser SVG</title>
    <link rel="alternate" href="/2009/07/13/return-of-svg.html"/>
    <id>/2009/07/13/return-of-svg.html</id>
    <published>2009-07-13T00:00:00-07:00</published>
    <updated>2009-07-13T00:00:00-07:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;Maybe we've all been too hasty in declaring the &lt;tt&gt;canvas&lt;/tt&gt; tag the new king of web interaction. I've just stumbled upon &lt;a href="http://raphaeljs.com/"&gt;Rapha&amp;euml;l&lt;/a&gt;&amp;mdash;a javascript library for interacting with SVG. The library is cross-browser thanks to VML on Internet Explorer. &lt;/p&gt;
</summary>
    <content type="html"></content>
  </entry>
  <entry>
    <title>iPhone-style Checkboxes for Prototype</title>
    <link rel="alternate" href="/2009/06/29/prototype-iphone-style-checkboxes.html"/>
    <id>/2009/06/29/prototype-iphone-style-checkboxes.html</id>
    <published>2009-06-29T00:00:00-07:00</published>
    <updated>2009-06-29T00:00:00-07:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html"></summary>
    <content type="html"></content>
  </entry>
  <entry>
    <title>Introducing iPhone-style Checkboxes</title>
    <link rel="alternate" href="/2009/06/16/iphone-style-checkboxes.html"/>
    <id>/2009/06/16/iphone-style-checkboxes.html</id>
    <published>2009-06-16T00:00:00-07:00</published>
    <updated>2009-06-16T00:00:00-07:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html"></summary>
    <content type="html"></content>
  </entry>
  <entry>
    <title>WWDC 2009 Predictions</title>
    <link rel="alternate" href="/2009/06/04/wwdc-2009-predictions.html"/>
    <id>/2009/06/04/wwdc-2009-predictions.html</id>
    <published>2009-06-04T00:00:00-07:00</published>
    <updated>2009-06-04T00:00:00-07:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;h2&gt;iPhone&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;✓ New model&lt;/li&gt;
  &lt;li&gt;✓ Video support&lt;/li&gt;
  &lt;li&gt;✓ 32Gb&lt;/li&gt;
  &lt;li&gt;✓ Compass &amp;amp; turn-by-turn partnership&lt;/li&gt;
  &lt;li&gt;✓ Pre/Zune bashing&lt;/li&gt;
  &lt;li&gt;✓ iTunes WiFi Video Store&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Snow Leopard&lt;/h2&gt;

&lt;p&gt;&lt;ul&gt;
  &lt;li&gt;Secret sauce released: theme updates, ✓ Cocoa/64bit magic, ✓ Safari 4&lt;/li&gt;&lt;/p&gt;
</summary>
    <content type="html"></content>
  </entry>
  <entry>
    <title>Simplify image paths with image_url()</title>
    <link rel="alternate" href="/2009/05/11/simplify-image-paths-with-image_url.html"/>
    <id>/2009/05/11/simplify-image-paths-with-image_url.html</id>
    <published>2009-05-11T00:00:00-07:00</published>
    <updated>2009-05-11T00:00:00-07:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;Recently Compass introduced a Sass method called image_url() which allows you to refer to images by their file name only. When the Sass is compiled, the CSS url() method is populated with a path generated by Compass.&lt;/p&gt;

&lt;p&gt;When you start a new project using the compass command-line tool, it will generate a config.rb file which contains options specific to your new project. There is a variable called http_images_path which is used by Compass to generate the correct image paths. I have the value setup for this site as such&lt;/p&gt;
</summary>
    <content type="html"></content>
  </entry>
  <entry>
    <title>Using Compass to implement the Blueprint grid-system &amp;amp; consistent vertical-rhythm</title>
    <link rel="alternate" href="/2009/05/07/blueprint-grids-vertical-rhythm.html"/>
    <id>/2009/05/07/blueprint-grids-vertical-rhythm.html</id>
    <published>2009-05-07T00:00:00-07:00</published>
    <updated>2009-05-07T00:00:00-07:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;Using Sass &amp;amp; Compass I updated the css on this site to use Blueprint's 950px grid system and their typography for consistent vertical rhythm. 
The full Sass is included below:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@import base.sass

body
  background: #F9F3E8

a
  font-weight: bold
&lt;/code&gt;&lt;/pre&gt;
</summary>
    <content type="html"></content>
  </entry>
  <entry>
    <title>NHaml idiosyncrasies</title>
    <link rel="alternate" href="/2009/04/30/nhaml-idiosyncrasies.html"/>
    <id>/2009/04/30/nhaml-idiosyncrasies.html</id>
    <published>2009-04-30T00:00:00-07:00</published>
    <updated>2009-04-30T00:00:00-07:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;&lt;a href="http://code.google.com/p/nhaml/"&gt;NHaml&lt;/a&gt; is an implementation of Haml for the .NET runtime. Specifically it runs inside .NET's new MVC architecture. This implementation is missing quite a few Haml niceties and the language has actually been altered in many places to be more C#-like. Personally, I think this is a poor decision. Imagine if Javascript had different syntax depending on the browser it was running in? Well... I guess Microsoft has JScript and VBScript so maybe this is just how Windows programmers operate. But, I digress. Here are some gotchas should you contemplate using NHaml.&lt;/p&gt;
</summary>
    <content type="html"></content>
  </entry>
  <entry>
    <title>A Compass &amp;amp; Sass Screencast via Chris Eppstein</title>
    <link rel="alternate" href="/2009/04/26/a-compass-sass-screencast-via-chris-eppstein.html"/>
    <id>/2009/04/26/a-compass-sass-screencast-via-chris-eppstein.html</id>
    <published>2009-04-26T00:00:00-07:00</published>
    <updated>2009-04-26T00:00:00-07:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;Compass author—and Sass contributor—Chris Eppstein has put a screencast together showing how to use Compass. Enjoy.&lt;/p&gt;

&lt;p&gt;&lt;div class='flash'&gt;
  &lt;object data='http://vimeo.com/moogaloop.swf?clip_id=4335944&amp;amp;server=vimeo.com&amp;amp;show_title=1&amp;amp;show_byline=1&amp;amp;show_portrait=0&amp;amp;color=00ADEF&amp;amp;fullscreen=1' height='225' type='application/x-shockwave-flash' width='400'&gt;&lt;/p&gt;
</summary>
    <content type="html"></content>
  </entry>
  <entry>
    <title>Creating bullet-proof HTML emails</title>
    <link rel="alternate" href="/2009/04/06/creating-bullet-proof-html-emails.html"/>
    <id>/2009/04/06/creating-bullet-proof-html-emails.html</id>
    <published>2009-04-06T00:00:00-07:00</published>
    <updated>2009-04-06T00:00:00-07:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;This screencast will demonstrate how a bullet-proof, table-based email can be sliced and coded using ImageReady CS2. Other versions of Photoshop will work similarly, but I prefer CS2.&lt;/p&gt;
</summary>
    <content type="html"></content>
  </entry>
  <entry>
    <title>Sass Introduction slides</title>
    <link rel="alternate" href="/2009/04/02/sass-introduction-slides.html"/>
    <id>/2009/04/02/sass-introduction-slides.html</id>
    <published>2009-04-02T00:00:00-07:00</published>
    <updated>2009-04-02T00:00:00-07:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;Here's the slides I will be presenting at Jive Software:&lt;/p&gt;

&lt;p&gt;&lt;div class='flash'&gt;
  &lt;object data='http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=sass-090402192738-phpapp01&amp;amp;rel=0&amp;amp;stripped_title=sass-introduction' height='355' type='application/x-shockwave-flash' width='425'&gt;&lt;/p&gt;
</summary>
    <content type="html"></content>
  </entry>
  <entry>
    <title>Don't repeat yourself, use Sass mixins</title>
    <link rel="alternate" href="/2009/04/02/dont-repeat-yourself-use-sass-modules.html"/>
    <id>/2009/04/02/dont-repeat-yourself-use-sass-modules.html</id>
    <published>2009-04-02T00:00:00-07:00</published>
    <updated>2009-04-02T00:00:00-07:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;&lt;strong&gt;Update (2011-08-23): Use to Sass 3 syntax&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There are quite a few situations in CSS where you are simply copy &amp;amp; pasting the same set of styles in multiple places. If at some point, you want to tweak these styles, you'll need to track down and update each set of styles. Sass introduces the concept of mixins which are blocks of nested Sass code which can be applied to any selector in your Sass document. Think of them as variables which can hold multiple levels of information. The syntax for defining a module is simple:&lt;/p&gt;
</summary>
    <content type="html"></content>
  </entry>
  <entry>
    <title>Refactoring with Sass</title>
    <link rel="alternate" href="/2009/03/14/refactoring-with-sass.html"/>
    <id>/2009/03/14/refactoring-with-sass.html</id>
    <published>2009-03-14T00:00:00-07:00</published>
    <updated>2009-03-14T00:00:00-07:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html">&lt;p&gt;I had intended to jump right into Compass modules and user-defined &amp;quot;functions,&amp;quot; but that's a rather high-level concept and requires a relatively strong understanding of Sass which I shouldn't assume readers have because Sass isn't really that popular. I'll save the complicated stuff for the next article. Instead, I'll look at how you can take an existing CSS document and convert to Sass in preparation for the article on more-complicated techniques.&lt;/p&gt;
</summary>
    <content type="html"></content>
  </entry>
  <entry>
    <title>Compass, the future of Sass development</title>
    <link rel="alternate" href="/2009/03/11/compass-the-future-of-sass-development.html"/>
    <id>/2009/03/11/compass-the-future-of-sass-development.html</id>
    <published>2009-03-11T00:00:00-07:00</published>
    <updated>2009-03-11T00:00:00-07:00</updated>
    <author>
      <name>Thomas Reynolds</name>
    </author>
    <summary type="html"></summary>
    <content type="html"></content>
  </entry>
</feed>
